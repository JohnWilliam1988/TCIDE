<?xml version="1.0" encoding="GB2312"?>
<api>
<!--MyApiDll.dll-->

<dll name="功能列表" path="matchDll.dll">

<!--鼠标空间(中文)-->
<namespace name="鼠标">

<!--鼠标移动绝对坐标-->
<function name="移动">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:x 鼠标绝对坐标X,y 鼠标绝对坐标Y-->
<pram>(整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 鼠标.移动(整型 x坐标,整型 y坐标)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|鼠标.移动(100,200)
</example>
</function>
 	

<!--鼠标移动相对坐标-->
<function name="相对移动">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:x 鼠标相对坐标X,y 鼠标相对坐标Y-->
<pram>(整型 x相对坐标,整型 y相对坐标)</pram>
<example>
函数原型:|逻辑型 鼠标.相对移动(整型 x坐标,整型 y坐标)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|鼠标.相对移动(100,200)
</example>
</function>


<!--鼠标中键单击-->
<function name="中键单击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:单击次数 鼠标单击次数-->
<pram>(整型 单击次数)</pram>
<example>
函数原型:|逻辑型 鼠标.中键单击(整型 单击次数)|
函数说明:|鼠标中键单击|
调用例子:|鼠标.中键单击(10)
</example>
</function>

<!--鼠标中键按下-->
<function name="中键按下">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.中键按下()|
函数说明:|鼠标中键按下|
调用例子:|鼠标.中键按下()
</example>
</function>

<!--鼠标中键弹起-->
<function name="中键弹起">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.中键弹起()|
函数说明:|鼠标中键弹起|
调用例子:|鼠标.中键弹起()
</example>
</function>


<!--鼠标右键单击-->
<function name="右键单击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:单击次数 鼠标右键单击次数-->
<pram>(整型 单击次数)</pram>
<example>
函数原型:|逻辑型 鼠标.右键单击(整型 单击次数)| 
函数说明:|鼠标右键单击|
调用例子:|鼠标.右键单击(10)
</example>
</function>


<!--鼠标右键双击-->
<function name="右键双击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:双击次数 鼠标右键双击的次数-->
<pram>(整型 双击次数)</pram>
<example>
函数原型:|逻辑型 鼠标.右键双击(整型 双击次数)|
函数说明:|鼠标右键双击|
调用例子:|鼠标.右键双击(10)
</example>
</function>


<!--鼠标左键单击-->
<function name="左键单击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:单击次数 鼠标左键单击的次数-->
<pram>(整型 单击次数)</pram>
<example>
函数原型:|逻辑型 鼠标.左键单击(整型 单击次数)|
函数说明:|鼠标左键单击|
调用例子:|鼠标.左键单击(10)
</example>
</function>


<!--鼠标左键双击-->
<function name="左键双击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:双击次数 鼠标左键双击的次数-->
<pram>(整型 双击次数)</pram>
<example>
函数原型:|逻辑型 鼠标.左键双击(整型 双击次数)|
函数说明:|鼠标左键双击|
调用例子:|鼠标.左键双击(10)
</example>
</function>


<!--鼠标左键按下-->
<function name="左键按下">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.左键按下()|
函数说明:|鼠标左键按下|
调用例子:|鼠标.左键按下()
</example>
</function>


<!--鼠标右键按下-->
<function name="右键按下">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.右键按下()|
函数说明:|鼠标右键按下|
调用例子:|鼠标.右键按下()
</example>
</function>


<!--鼠标左键弹起-->
<function name="左键弹起">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.左键弹起()|
函数说明:|鼠标左键弹起|
调用例子:|鼠标.左键弹起()
</example>
</function>


<!--鼠标右键弹起-->
<function name="右键弹起">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.右键弹起()|
函数说明:|鼠标右键弹起|
调用例子:|鼠标.右键弹起()
</example>
</function>      


<!--鼠标中键向上移动-->
<function name="中键上滚">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:上滑次数 鼠标中键向上滚动的次数-->
<pram>(整型 上滑次数)</pram>
<example>
函数原型:|逻辑型 鼠标.中键上滚(整型 上滑次数)|
函数说明:|鼠标中键上滚|
调用例子:|鼠标.中键上滚(10)
</example>
</function>


<!--鼠标中键向下移动-->
<function name="中键下滚">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:下滑次数 鼠标中键向下滚动的次数-->
<pram>(整型 下滑次数)</pram>
<example>
函数原型:|逻辑型 鼠标.中键下滚(整型 下滑次数)|
函数说明:|鼠标中键向下滚动几次|
调用例子:|鼠标.中键下滚(10)
</example>
</function>


<!--保存鼠标当前坐标-->
<function name="保存坐标">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.保存坐标()|
函数说明:|保存鼠标当前坐标到下一次恢复|
调用例子:|鼠标.保存坐标()
</example>
</function>


<!--恢复鼠标上一次保存的坐标-->
<function name="恢复坐标">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.恢复坐标()|
函数说明:|恢复鼠标上一次保存的坐标|
调用例子:|鼠标.恢复坐标()
</example>
</function>


<!--锁住当前鼠标-->
<function name="锁定">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.锁定()|
函数说明:|锁住当前鼠标|
调用例子:|鼠标.锁定()
</example>
</function>

<!--解锁当前鼠标-->
<function name="解锁">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|逻辑型 鼠标.解锁()|
函数说明:|解锁当前鼠标|
调用例子:|鼠标.解锁()
</example>
</function>


<!--获取当前鼠标的当前位置坐标-->
<function name="获取坐标">
<!--返回值:执行成功返回当前鼠标位置坐标字符串-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>(整型 x,整型 y)</pram>
<example>
函数原型:|逻辑型 鼠标.获取坐标(整型 x,整型 y)|
函数说明:|获取当前鼠标的当前位置坐标|
调用例子:|
整型 x,y
鼠标.获取坐标(x,y)
</example>
</function>


<!--获取当前鼠标句柄-->
<function name="鼠标句柄">
<!--返回值:返回当前鼠标句柄-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 鼠标.鼠标句柄()|
函数说明:|获取当前鼠标句柄|
调用例子:|鼠标.鼠标句柄()
</example>
</function>

<!--获取当前鼠标特征码-->
<function name="获取特征码">
<!--返回值:返回当前鼠标特征码-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 鼠标.获取特征码()|
函数说明:|获取当前鼠标特征码|
调用例子:|
整型 鼠标形状特征码=鼠标.获取特征码()
</example>
</function>

<!-- 等待点击 -->
<function name="等待点击">
<!--返回值:返回当前鼠标动作代码-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 鼠标.等待点击()|
函数说明:|等待鼠标任意点击动作，并返回鼠标点击动作代码|
调用例子:|
整型 鼠标代码=鼠标.等待点击()
</example>
</function>
</namespace>


<!--键盘空间(中文)-->
<namespace name="键盘">


<!--按键:按下-->
<function name="按下">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:键码 键码-->
<pram>(整型 键码)</pram>
<example>
函数原型:|逻辑型 键盘.按下(整型 键码)|
函数说明:|模拟键盘按下动作,键码参考帮助文档里面的键码表|
调用例子:|键盘.按下(65)
</example>
</function>


<!--按键:按下弹起-->
<function name="按键">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:键码 键码,按键次数 模拟按下的次数-->
<pram>(整型 键码,整型 按键次数)</pram>
<example>
函数原型:|逻辑型 键盘.按键(整型 键码,整型 按键次数)|
函数说明:|模拟键盘按键(按下+弹起)动作,键码参考帮助文档里面的键码表|
调用例子:|键盘.按键(65,10)
</example>
</function>


<!--按键:弹起-->
<function name="弹起">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:键码 键码-->
<pram>(整型 键码)</pram>
<example>
函数原型:|逻辑型 键盘.弹起(整型 键码)|
函数说明:|模拟键盘弹起动作,键码参考帮助文档里面的键码表|
调用例子:|键盘.弹起(65)
</example>
</function>


<!--按键:按下一串连续的字符-->
<function name="发送字符串">
<!-- 返回值:执行成功返回真，否则返回假 --> 
<returntype>逻辑型</returntype> 
<!--参数:字符串 发送的字符串-->
<pram>(字符型 字符串,整型 发送延时=50)</pram> 
<example>
函数原型:|逻辑型 键盘.发送字符串(字符型 字符串,整型 发送延时=50)|
函数说明:|模拟键盘按键动作发送一连串字符串|
调用例子:|键盘.发送字符串("hello world!")
</example>
</function>

<!--按键:暂停程序等待任意按键后继续-->
<function name="等待按键">
<!-- 返回值:执行成功返回真，否则返回假 --> 
<returntype>整型</returntype> 
<!--参数:-->
<pram>()</pram> 
<example>
函数原型:|整型 键盘.等待按键()|
函数说明:|暂停程序等待任意按键后继续|
调用例子:|
整型 键值=键盘.等待按键()
</example>
</function>
</namespace>


<!--窗口空间(中文)-->
<namespace name="窗口">
	
<!--找到窗口-->
<function name="找到窗口">
<!--返回值:执行成功返回找到窗口句柄的整形值,否则返回0-->
<returntype>整型</returntype>
<!--参数:窗口名 就是窗口标题-->
<pram>(字符型 窗口名,字符型 类名="")</pram>
<example>
函数原型:|整型 窗口.找到窗口(字符型 窗口名,字符型 类名="")|
函数说明:|根据窗口名称或窗口类名返回窗口句柄|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
</example>
</function>


<!--设置窗口最大化-->
<function name="最大化">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 窗口句柄整形值-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.最大化(整型 窗口句柄)|
函数说明:|窗口最大化|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.最大化(窗口句柄)
</example>
</function>


<!--设置窗口最小化-->
<function name="最小化">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 窗口句柄整形值-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.最小化(整型 窗口句柄)|
函数说明:|使窗口最小化|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.最小化(窗口句柄)
</example>
</function>


<!--设置窗口标题-->
<function name="设置标题">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 整形值,窗口新标题 要设置的标题-->
<pram>(整型 窗口句柄,字符型 窗口新标题)</pram>
<example>
函数原型:|逻辑型 窗口.设置标题(整型 窗口句柄,字符型 窗口新标题)|
函数说明:|重新设置窗口标题|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.设置标题(窗口句柄,"wow")
</example>
</function>


<!--设置窗口为置前窗口-->
<function name="置顶">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 窗口的唯一句柄-->
<pram>(整型 窗口句柄,逻辑型 是否置顶)</pram>
<example>
函数原型:|逻辑型 窗口.置顶(整型 窗口句柄,逻辑型 是否置顶)|
函数说明:|设置窗口永久置顶,第二参数,真为置顶,假为取消置顶|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft") 
窗口.置顶(窗口句柄,真)
</example>
</function>


<!--设置窗口的位置-->
<function name="设置位置">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口的X坐标, 窗口的Y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.设置位置(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|设置窗口的位置|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.设置位置(窗口句柄,10,10)
</example>
</function>


<!--窗口隐藏-->
<function name="隐藏">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.隐藏(整型 窗口句柄)|
函数说明:|设置窗口隐藏|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.隐藏(窗口句柄)
</example>
</function>


<!--显示窗口-->
<function name="显示">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 窗口句柄整形值-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.显示(整型 窗口句柄)|
函数说明:|设置窗口显示|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft") 
窗口.显示(窗口句柄)
</example>
</function>


<!--还原窗口-->
<function name="还原">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要还原的窗口句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.还原(整型 窗口句柄)|
函数说明:|将窗口还原|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.还原(窗口句柄)
</example>
</function>


<!--关闭窗口-->
<function name="关闭">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要关闭的窗口句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.关闭(整型 窗口句柄)|
函数说明:|将窗口关闭|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")  
窗口.关闭(窗口句柄)
</example>
</function>


<!--得到窗口标题-->
<function name="得到标题">
<!--返回值:字符型 窗口标题-->
<returntype>字符型</returntype>
<!--参数:窗口句柄 要还原的窗口句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|字符型 窗口.得到标题(整型 窗口句柄)|
函数说明:|得到窗口的标题|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
字符型 标题=窗口.得到标题(窗口句柄)
</example>
</function>


<!--判断窗口是否存在-->
<function name="是否存在">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要判断的窗口句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.是否存在(整型 窗口句柄)|
函数说明:|判断窗口是否存在|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
逻辑型 结果=窗口.是否存在(窗口句柄)
</example>
</function>


<!--得到窗口类型(窗口类名)-->
<function name="类名">
<!--返回值:字符型 窗口类型-->
<returntype>字符型</returntype>
<!--参数:窗口句柄 要操作的窗口的句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|字符型 窗口.类名(整型 窗口句柄)|
函数说明:|得到窗口的类名|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
字符型 类名=窗口.类名(窗口句柄)
</example>
</function>


<!--得到当前窗口句柄-->
<function name="顶层窗口句柄">
<!--返回值:顶层窗口句柄整形值-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 窗口.顶层窗口句柄()|
函数说明:|得到顶层窗口句柄|
调用列子:|
整型 顶层句柄=窗口.顶层窗口句柄()
</example>
</function>


<!--得到鼠标移动的窗口句柄-->
<function name="鼠标所在窗口句柄">
<!--返回值:鼠标所在的窗口句柄-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 窗口.鼠标所在窗口句柄()|
函数说明:|得到鼠标所在的窗口句柄|
调用列子:|
整型 鼠标窗口=窗口.鼠标所在窗口句柄()
</example>
</function>


<!--得到当前可以发送按键消息的窗口,获取当前键盘焦点的窗口句柄-->
<function name="焦点窗口">
<!--返回值:返回焦点窗口句柄-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 窗口.焦点窗口()|
函数说明:|得到当前焦点窗口句柄|
调用列子:|
整型 焦点句柄=窗口.焦点窗口()
</example>
</function>


<!--向窗口按键:按键-弹起消息-->
<function name="发送按键">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要发送的窗口句柄, 键码 要发送的键码-->
<pram>(整型 窗口句柄,整型 键码)</pram>
<example>
函数原型:|逻辑型 窗口.发送按键(整型 窗口句柄,整型 键码)|
函数说明:|向窗口发送一个按键(按下+弹起)模拟,键码参考帮助文档里面的键码表|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")|
窗口.发送按键(窗口句柄,13)
</example>
</function>


<!--向窗口按键:弹起消息-->
<function name="发送弹起">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要发送的窗口句柄, 键码-->
<pram>(整型 窗口句柄,整型 键码)</pram>
<example>
函数原型:|逻辑型 窗口.发送弹起(整型 窗口句柄,整型 键码)|
函数说明:|向窗口发送一个键码的弹起模拟操作,键码参考帮助文档里面的键码表|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.发送弹起(窗口句柄,13)
</example>
</function>


<!--向窗口按键:按下消息-->
<function name="发送按下">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要发送的窗口句柄, 键码-->
<pram>(整型 窗口句柄,整型 键码)</pram>
<example>
函数原型:|逻辑型 窗口.发送按下(整型 窗口句柄,整型 键码)|
函数说明:|向窗口发送一个键码按下的模拟,键码参考帮助文档里面的键码表|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.发送按下(窗口句柄,13)
</example>
</function>


<!--向窗口按下字符消息-->
<function name="发送字符">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要发送的窗口句柄,字符码 字符对应的编码-->
<pram>(整型 窗口句柄,整型 字符码)</pram>
<example>
函数原型:|逻辑型 窗口.发送字符(整型 窗口句柄,整型 字符码)|
函数说明:|向窗口发送一个字符的输入操作,字符码参考帮助文档里面的键码表|
调用列子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.发送字符(窗口句柄,65)
</example>
</function>


<!--向窗口按下字符消息-->
<function name="发送字符串">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 要发送的窗口, 字符串 要发送的字符串-->
<pram>(整型 窗口句柄,字符型 字符串)</pram>
<example>
函数原型:|逻辑型 窗口.发送字符串(整型 窗口句柄,字符型 字符串)|
函数说明:|向窗口发送字符串|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.发送字符串(窗口句柄,"abcdefghijklmn")
</example>
</function>


<!-- 向窗口按键:按键-弹起消息--> 
<function name="提交按键">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>逻辑型</returntype> 
<!-- 参数:窗口句柄 通过找到窗口得到的窗口句柄,键码 键码--> 
<pram>(整型 窗口句柄,整型 键码)</pram> 
<example>
函数原型:|逻辑型 窗口.提交按键(整型 窗口句柄,整型 键码)|
函数说明:|向窗口后台提交按键(按下+弹起)模拟,键码参考帮助文档里面的键码表|
调用例子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交按键(窗口句柄,13)
</example>
</function>


<!-- post向窗口按键:弹起消息--> 
<function name="提交弹起">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>逻辑型</returntype> 
<!-- 参数:窗口句柄 通过找到窗口得到的窗口句柄, 键码 键码--> 
<pram>(整型 窗口句柄,整型 键码)</pram> 
<example>
函数原型:|逻辑型 窗口.提交弹起(整型 窗口句柄,整型 键码)|
函数说明:|向窗口后台提交键盘弹起模拟,键码参考帮助文档里面的键码表|
调用例子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交弹起(窗口句柄,13)
</example>
</function>


<!-- post向窗口按键:按下消息--> 
<function name="提交按下">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>逻辑型</returntype> 
<!-- 参数:窗口句柄 窗口句柄, 键码 键码--> 
<pram>(整型 窗口句柄,整型 键码)</pram> 
<example>
函数原型:|逻辑型 窗口.提交按下(整型 窗口句柄,整型 键码)|
函数说明:|向窗口后台提交按下模拟,键码参考帮助文档里面的键码表|
调用例子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交按下(窗口句柄,13)
</example>
</function>


<!-- post向窗口按下字符消息--> 
<function name="提交字符">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>逻辑型</returntype> 
<!-- 参数:窗口句柄 窗口的句柄,字符值 字符值--> 
<pram>(整型 窗口句柄,整型 字符值)</pram> 
<example>
函数原型:|逻辑型 窗口.提交字符(整型 窗口句柄,整型 字符值)|
函数说明:|向窗口后台提交按键字符值输入,字符值参考帮助文档里面的键码表|
调用例子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")  
窗口.提交字符(窗口句柄,65)|
</example>
</function>


<!-- post向窗口按下字符消息--> 
<function name="提交字符串">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>逻辑型</returntype> 
<!-- 参数:窗口句柄 操作的窗口的句柄, 字符串 发送的字符串--> 
<pram>(整型 窗口句柄,字符型 字符串)</pram> 
<example>
函数原型:|逻辑型 窗口.提交字符串(整型 窗口句柄,字符型 字符串)|
函数说明:|向窗口后台提交一连串的字符串|
调用例子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交字符串(窗口句柄,"hello world")
</example>
</function>


<!--设置窗口的大小-->
<function name="设置大小">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口的宽,窗口的高-->
<pram>(整型 窗口句柄,整型 宽,整型 高)</pram>
<example>
函数原型:|逻辑型 窗口.设置大小(整型 窗口句柄,整型 宽,整型 高)|
函数说明:|设置窗口的大小|
调用列子:|
整型 窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.设置大小(窗口句柄,600,450)
</example>
</function>


<!--获取窗口的位置-->
<function name="获取位置">
<!--返回值:执行成功返回真，将窗口位置的X坐标，Y坐标返回-->
<returntype>逻辑型</returntype>
<!--参数:整型 窗口句柄,窗口的X坐标, 窗口的Y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.获取位置(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|获取窗口的位置|
调用列子:|
整型 x坐标,y坐标,窗口句柄 
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.获取位置(窗口句柄,x坐标,y坐标)
</example>
</function>

<!--获取窗口的大小-->
<function name="获取大小">
<!--返回值:执行成功返回真，将窗口宽和将窗口高返回-->
<returntype>逻辑型</returntype>
<!--参数:整型 窗口句柄,窗口的宽,窗口的高-->
<pram>(整型 窗口句柄,整型 宽,整型 高)</pram>
<example>
函数原型:|逻辑型 窗口.获取大小(整型 窗口句柄,整型 宽,整型 高)|
函数说明:|获取窗口的大小|
调用列子:|
整型 宽,高,窗口句柄
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.获取大小(窗口句柄,宽,高)
</example>
</function>


<!--根据窗口类名得到窗口句柄-->
<function name="类名返回窗口">
<!--返回值:整型 窗口句柄-->
<returntype>整型</returntype>
<!--参数:窗口类名 要得到的窗口句柄的类名-->
<pram>(字符型 窗口类名)</pram>
<example>
函数原型:|整型 窗口.类名返回窗口(字符型 窗口类名)|
函数说明:|根据窗口类名得到窗口句柄|
调用列子:|
整型 窗口句柄=窗口.类名返回窗口("GxWindowClassD3d")
</example>
</function>

<!--窗口坐标转屏幕坐标-->
<function name="窗口转屏幕">
<!--返回值:逻辑型 成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数窗口句柄,窗口x坐标, 窗口y坐标, 返回屏幕x坐标, 返回屏幕y坐标-->
<pram>(整型 窗口句柄,整型 窗口x坐标,整型 窗口y坐标,整型 返回屏幕x坐标,整型 返回屏幕y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.窗口转屏幕(整型 窗口句柄,整型 窗口x坐标,整型 窗口y坐标,整型 返回屏幕x坐标,整型 返回屏幕y坐标)|
函数说明:|窗口坐标转屏幕坐标|
调用列子:|
整型 返回屏幕x坐标,返回屏幕y坐标
逻辑型 是否成功=窗口.窗口转屏幕(窗口句柄,10,200,返回屏幕x坐标,返回屏幕y坐标)
</example>
</function> 

<!--屏幕坐标转窗口坐标-->
<function name="屏幕转窗口">
<!--返回值:逻辑型 成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数窗口句柄,屏幕x坐标, 屏幕y坐标, 返回窗口x坐标, 返回窗口y坐标-->
<pram>(整型 窗口句柄,整型 窗口x坐标,整型 窗口y坐标,整型 返回窗口x坐标,整型 返回窗口y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.屏幕转窗口(整型 窗口句柄,整型 屏幕x坐标,整型 屏幕y坐标,整型 返回窗口x坐标,整型 返回窗口y坐标)|
函数说明:|屏幕坐标转窗口坐标|
调用列子:|
整型 返回窗口x坐标,返回窗口y坐标
逻辑型 是否成功=窗口.屏幕转窗口(窗口句柄,10,200,返回屏幕x坐标,返回屏幕y坐标)
</example>
</function> 

<!--得到父窗口句柄-->
<function name="得到父窗口">
<!--返回值:整型 父窗口句柄-->
<returntype>整型</returntype>
<!--参数窗口句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|整型 窗口.得到父窗口(整型 窗口句柄)|
函数说明:|得到父窗口句柄|
调用列子:|
整型 父窗口句柄=窗口.得到父窗口(窗口句柄)
</example>
</function> 

<!--后台发送鼠标-->
<function name="鼠标移动">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标移动(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|发送鼠标到窗口x,y坐标位置|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标移动(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键按下-->
<function name="鼠标左键按下">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标左键按下(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键按下|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键按下(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键弹起-->
<function name="鼠标左键弹起">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标左键弹起(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键弹起|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键弹起(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键单击-->
<function name="鼠标左键单击">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标左键单击(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键单击|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键单击(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键双击-->
<function name="鼠标左键双击">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标左键双击(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键双击|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键双击(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键按下-->
<function name="鼠标右键按下">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标右键按下(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键按下|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键按下(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键弹起-->
<function name="鼠标右键弹起">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标右键弹起(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键弹起|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键弹起(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键单击-->
<function name="鼠标右键单击">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标右键单击(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键单击|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键单击(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键双击-->
<function name="鼠标右键双击">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标右键双击(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键双击|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键双击(窗口句柄,50,20)
</example>
</function>


<!--后台发送鼠标中键按下-->
<function name="鼠标中键按下">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标中键按下(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键按下|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标中键按下(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标中键弹起-->
<function name="鼠标中键弹起">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标中键弹起(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键弹起|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标中键弹起(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标中键单击-->
<function name="鼠标中键单击">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 窗口.鼠标中键单击(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键单击|
调用例子:|
整型 窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标中键单击(窗口句柄,50,20)
</example>
</function>

<!--得到自身窗口句柄-->
<function name="自身句柄">
<!--返回值:顶层窗口句柄整形值-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 窗口.自身句柄()|
函数说明:|得到自身窗口句柄|
调用列子:|
整型 句柄=窗口.自身句柄()
</example>
</function>


<!--通过句柄获取路径-->
<function name="获取路径">
<!--返回值:path程序路径-->
<returntype>字符型</returntype>
<!--参数:无-->
<pram>(整型 句柄)</pram>
<example>
函数原型:|字符型 窗口.获得路径(整型 句柄)|
函数说明:|通过句柄获取路径|
调用例子:|
整型 句柄=窗口.自身句柄()
字符型 路径=窗口.获取路径(句柄)
辅助.消息框(路径)
</example>
</function>

<!--设置窗口为置前窗口-->
<function name="激活">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄 窗口的唯一句柄-->
<pram>(整型 窗口句柄)</pram>
<example>
函数原型:|逻辑型 窗口.激活(整型 窗口句柄)|
函数说明:|激活窗口,并置顶一次|
调用列子:|
整型 窗口句柄=窗口.找到窗口("TC帮助文档")
窗口.激活(窗口句柄)
</example>
</function>

<!--获取窗口客户区大小-->
<function name="获取客户区大小">
<!--返回值:执行成功返回真失败返回假-->
<returntype>逻辑型</returntype>
<!--参数:整型 窗口句柄,窗口的宽,窗口的高-->
<pram>(整型 窗口句柄,整型 rCX,整型 rCY,整型 返回宽,整型 返回高)</pram>
<example>
函数原型:|逻辑型 窗口.获取客户区大小(整型 窗口句柄,整型 rCX,整型 rCY,整型 返回宽,整型 返回高)|
函数说明:|获取窗口的位置及客户区大小(不包含标题栏大小)|
调用列子:|
整型 窗口句柄,rCX,rCY,返回宽,返回高
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.获取客户区大小(窗口句柄,rCX,rCY,返回宽,返回高)
</example>
</function>

<!--抓取当前活动窗口指定坐标点的图像-->
<function name="坐标点取色">
<!--返回值:返回的是颜色值的十六进制字符型数据-->
<returntype>整型</returntype>
<!--参数:窗口句柄, 点的x坐标, 点的y坐标-->
<pram>(整型 窗口句柄,整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|整型 窗口.坐标点取色(整型 窗口句柄,整型 x坐标,整型 y坐标)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|
整型 窗口句柄=窗口.找到窗口("IE浏览器")
整型 图像值| 图像值=窗口.坐标点取色(窗口句柄,300,300)
</example>
</function>

<!--在当前活动窗口区域内找色-->
<function name="区域找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像,返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值 颜色16进制数, 检索方式,返回x坐标,返回y坐标-->
<pram>(整型 窗口句柄,整型 左上角的x坐标,整型 左上角的y坐标,整型 右下角的x坐标,整型 右下角的y坐标,整型 颜色值,整型 检索方式,整型 返回x坐标,整型 返回y坐标)</pram>
<example>
函数原型:|逻辑型  窗口.区域找色(整型 窗口句柄,整型 左上角的x坐标,整型 左上角的y坐标,整型 右下角的x坐标,整型 右下角的y坐标,整型 颜色值,整型 检索方式,整型 返回x坐标,整型 返回y坐标)|
函数说明:|在当前活动窗口区域内找色|
调用列子:|
整型 x,y,窗口句柄
窗口句柄=窗口.找到窗口("IE浏览器")
逻辑型 是否找到=窗口.区域找色(窗口句柄,10,10,500,600,#1E3C04,1,x,y)
</example>
</function>

<!--在当前活动窗口区域内模糊找色-->
<function name="模糊找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像点,如果找到在参数里返回,否则返回空-->
<returntype>逻辑型</returntype>
<!--参数:窗口句柄,左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标, 颜色值 颜色16进制数,检索方式,返回x坐标,返回y坐标-->
<pram>(整型 窗口句柄,整型 左上角x坐标,整型 左上角y坐标,整型 右下角x坐标,整型 右下角y坐标,整型 颜色值,浮点型 相似度,整型 检索方式,整型 返回的x坐标,整型 返回的y坐标)</pram>
<example>
函数原型:|逻辑型  窗口.模糊找色(整型 窗口句柄,整型 颜色值,整型 左上角的x坐标,整型 左上角的y坐标,整型 右下角的x坐标,整型 右下角的y坐标,浮点型 相似度,整型 检索方式,整型 返回的x坐标,整型 返回的y坐标)|
函数说明:|在当前活动窗口区域内模糊找图像点,找到图像点,坐标值保存在返回的x坐标和返回的y坐标 变量里。未找到则返回的x坐标和返回的y坐标这2个变量的值为-1|
调用列子:|
//相似度的值规定范围(0.5-1.0),推荐使用0.8
整型 x,y,窗口句柄
窗口句柄=窗口.找到窗口("IE浏览器")
逻辑型 是否找到=窗口.模糊找色(窗口句柄,10,10,500,600,#1E3C04,0.8,1,x,y)
</example>
</function>


<!--后台找图功能-->
<function name="找图">
<!-- 返回值:找到则返回相应图片的序号,未找到则返回0--> 
<returntype>整型</returntype> 
<!-- 参数:窗口句柄 左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径, 色偏, 相似度, 检索方式,返回找到的x坐标,y坐标--> 
<pram>(整型 窗口句柄,整型 left,整型 top,整型 right,整型 buttom,字符型 path,整型 色偏,浮点型 相似度,整型 检索方式,整型 x,整型 y)</pram> 
<example>
函数原型:|整型 窗口.找图(整型 窗口句柄,整型 left,整型 top,整型 right,整型 buttom,字符型 path,整型 色偏,浮点型 相似度,整型 检索方式,整型 x,整型 y)| 
函数说明:|后台找图功能| 
调用列子:|
//说明:支持多张图片(图片与图片中间使用 竖线隔开)和根据四角的颜色判断是否为透明图
整型 图片X坐标,图片Y坐标,图片序号,窗口句柄
窗口句柄=窗口.找到窗口("IE浏览器")
图片序号=窗口.找图(窗口句柄,0,0,1440,900,"d:\\111.bmp",#101120,1.0,1,图片X坐标,图片Y坐标)
</example> 
</function>

</namespace>


<!--文件命名空间(中文)-->
<namespace name="文件">

<!--打开文件,打开成功返回文件句柄,失败返回0 -->
<function name="打开">
<!--返回值:打开成功返回文件句柄,否则返回0-->
<returntype>整型</returntype>
<!--参数:文件路径 文件绝对路径-->
<pram>(字符型 文件路径,字符型 属性="读写")</pram>
<example>
函数原型:|整型 文件.打开(字符型 文件路径,字符型 属性="读写")|
函数说明:|打开文件判断文件是否存在,默认属性有(读写,文件要存在,共享读,共享写),更多属性见帮助文档|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
文件.关闭(文件句柄)
</example>
</function>


<!--关闭文件-->
<function name="关闭">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件句柄-->
<pram>(整型 文件句柄)</pram>
<example>
函数原型:|逻辑型 文件.关闭(整型 文件句柄)|
函数说明:|关闭文件|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
文件.关闭(文件句柄)
</example>
</function>


<!--创建文件-->
<function name="创建">
<!--返回值:执行成功返回文件句柄，否则返回0-->
<returntype>整型</returntype>
<!--参数:文件路径,读写属性-->
<pram>(字符型 文件路径,字符型 属性)</pram>
<example>
函数原型:|整型 文件.创建(字符型 文件路径,字符型 属性)|
函数说明:|创建文件,,默认属性有("创建文件"),默认创建为ascii编码文件,创建unicode编码文件请在属性中加入的unicode或UNICODE,更多属性见帮助文档|
调用例子:|
整型 文件句柄=文件.创建("d:\\1.txt","读写")
文件.关闭(文件句柄)
</example>
</function>


<!--写文件ascii-->
<function name="写入">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件句柄,写入的内容-->
<pram>(整型 文件句柄,字符型 写入的内容)</pram>
<example>
函数原型:|逻辑型 文件.写入(整型 文件句柄,字符型 写入的内容)|
函数说明:|在文件中当前位置写入指定的内容|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
文件.写入(文件句柄,"aaaa")
文件.关闭(文件句柄)
</example>
</function>


<!--在文件当前读写入一行内容ascii-->
<function name="写一行">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件句柄,写入的内容-->
<pram>(整型 文件句柄,字符型 写入的内容)</pram>
<example>
函数原型:|逻辑型 文件.写一行(整型 文件句柄,字符型 写入的内容)|
函数说明:|在文件中写一行内容|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
文件.写一行(文件句柄,"this is a test")
文件.关闭(文件句柄)
</example>
</function>


<!--写文件ascii-->
<function name="末尾写入">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件句柄,写入的内容-->
<pram>(整型 文件句柄,字符型 写入的内容)</pram>
<example>
函数原型:|逻辑型 文件.末尾写入(整型 文件句柄,字符型 写入的内容)|
函数说明:|在文件末尾写入指定内容|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
文件.末尾写入(文件句柄,"aaaa")
文件.关闭(文件句柄)
</example>
</function>


<!--读文件ascii-->
<function name="读出">
<!--返回值:返回读出的内容-->
<returntype>字符型</returntype>
<!--参数:文件句柄,读取字符个数-->
<pram>(整型 文件句柄,整型 读取字符个数)</pram>
<example>
函数原型:|字符型 文件.读出(整型 文件句柄,整型 读取字符个数)|
函数说明:|读出文件指定个数的内容|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
字符型 读取内容=文件.读出(文件句柄,10)
文件.关闭(文件句柄)
</example>
</function>


<!--根据文件的当前读写位置读一行内容ascii-->
<function name="读一行">
<!--返回值:读出的内容-->
<returntype>字符型</returntype>
<!--参数: 文件句柄-->
<pram>(整型 文件句柄)</pram>
<example>
函数原型:|字符型 文件.读一行(整型 文件句柄)|
函数说明:|在文件中读一行内容并返回|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
字符型 内容=文件.读一行(文件句柄)
文件.关闭(文件句柄)
</example>
</function>

<!--移动文件-->
<function name="移动">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:源文件路径,目标文件路径-->
<pram>(字符型  源文件路径,字符型 目标文件路径)</pram>
<example>
函数原型:|逻辑型 文件.移动(字符型  源文件路径,字符型 目标文件路径)|
函数说明:|文件移动|
调用例子:|文件.移动("e:\\2.txt","d:\\1.txt")
</example>
</function>


<!--拷贝文件-->
<function name="拷贝">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:要拷贝的文件,拷贝的目标的文件-->
<pram>(字符型  要拷贝的文件,字符型 拷贝的目标的文件)</pram>
<example>
函数原型:|逻辑型 文件.拷贝(字符型  要拷贝的文件,字符型 拷贝的目标的文件)|
函数说明:|文件拷贝|
调用例子:|
文件.拷贝("d:\\bb.txt","d:\\aa.txt")
</example>
</function>


<!--重命名文件-->
<function name="重命名">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:原始文件名,新文件名-->
<pram>(字符型 原始文件名,字符型 新文件名)</pram>
<example>
函数原型:|逻辑型 文件.重命名(字符型 原始文件名,字符型 新文件名)|
函数说明:|文件重命名|
调用例子:|文件.重命名("d:\\aa.txt","d:\\bb.txt")
</example>
</function>


<!--删除文件-->
<function name="删除">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件路径 要删除的文件路径-->
<pram>(字符型  文件路径)</pram>
<example>
函数原型:|逻辑型 文件.删除(字符型 文件路径)|
函数说明:|文件删除|
调用例子:|
文件.删除("d:\\1.txt")
</example>
</function>


<!--得到文件的长度-->
<function name="长度">
<!--返回值:返回文件的长度-->
<returntype>整型</returntype>
<!--参数:文件句柄-->
<pram>(整型 文件句柄)</pram>
<example>
函数原型:|整型 文件.长度(整型 文件句柄)|
函数说明:|求出文件长度|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
整型 文件长度=文件.长度(文件句柄)
</example>
</function>


<!--创建文件夹-->
<function name="创建文件夹">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件夹路径-->
<pram>(字符型 文件夹路径)</pram>
<example>
函数原型:|逻辑型 文件.创建文件夹(字符型 文件夹路径)|
函数说明:|创建文件夹|
调用例子:|
文件.创建文件夹("d:\\bb")
</example>
</function>


<!--复制文件夹-->
<function name="复制文件夹">
<!--返回值:执行成功返回0值,否则返回非0值-->
<returntype>逻辑型</returntype>
<!--参数:要被复制的文件夹,新的文件夹路径-->
<pram>(字符型  要被复制的文件夹,字符型 新的文件夹路径)</pram>
<example>
函数原型:|逻辑型 文件.复制文件夹(字符型  要被复制的文件夹,字符型 新的文件夹路径)|
函数说明:|复制文件夹|
调用例子:|
文件.复制文件夹("d:\\bbb","d:\\aaa")
</example>
</function>


<!--重命名文件夹-->
<function name="重命名文件夹">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:源文件夹名,新文件夹名-->
<pram>(字符型 源文件夹名,字符型 新文件夹名)</pram>
<example>
函数原型:|逻辑型 文件.重命名文件夹(字符型 源文件夹名,字符型 新文件夹名)|
函数说明:|重命名文件夹|
调用例子:|
文件.重命名文件夹("d:\\bb","d:\\aa")
</example>
</function>


<!--删除文件夹-->
<function name="删除文件夹">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件夹路径-->
<pram>(字符型 文件夹路径)</pram>
<example>
函数原型:|逻辑型 文件.删除文件夹(字符型 文件夹路径)|
函数说明:|删除文件夹|
调用例子:|
文件.删除文件夹("d:\\bb")
</example>
</function>


<!--设置文件属性-->
<function name="设置属性">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件路径,文件属性-->
<pram>(字符型 文件路径,字符型 文件属性)</pram>
<example>
函数原型:|逻辑型 文件.设置属性(字符型 文件路径,字符型 文件属性)|
函数说明:|设置属性|
调用例子:|
文件.设置属性("d:\\bb.txt","读写")
</example>
</function>


<!--设置文件的读写的位置-->
<function name="设置游标位置">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件句柄,位置-->
<pram>(整型 文件句柄,字符型 位置)</pram>
<example>
函数原型:|逻辑型 文件.设置游标位置(整型 文件句柄,字符型 位置)|
函数说明:|设置指定文件句柄的当前的读写游标位置|
调用例子:|
整型 文件句柄=文件.打开("d:\\1.txt")
文件.设置游标位置(文件句柄,"开始")
文件.设置游标位置(文件句柄,"结束")
</example>
</function>

<!--判断文件或文件夹是否存在-->
<function name="是否存在">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:文件句柄,位置-->
<pram>(字符型 路径)</pram>
<example>
函数原型:|逻辑型 文件.是否存在(字符型 路径)|
函数说明:|判断文件或文件夹是否存在|
调用例子:|
逻辑型 是否存在=文件.是否存在("c:\\1.txt")
如果(是否存在)
辅助.消息框("文件存在")
否则
辅助.消息框("文件不存在")
如果结束
</example>
</function>

<!--读文件-->
<function name="读文件">
<!--返回值:返回读出的内容-->
<returntype>字符型</returntype>
<!--参数:文件路径-->
<pram>(字符型 路径)</pram>
<example>
函数原型:|字符型 文件.读文件(字符型 路径)|
函数说明:|根据路径读文件,返回文件内容字符串|
调用例子:|
辅助.消息框(文件.读文件("d:\\1.txt"))
</example>
</function>

<!--遍历-->
<function name="遍历">
<!--返回值:返回读出的内容-->
<returntype>逻辑型</returntype>
<!--参数:真或假-->
<pram>(字符型 路径,字符型[] 返回文件夹,字符型[] 返回文件)</pram>
<example>
函数原型:|逻辑型 文件.遍历(字符型 路径,字符型[] 返回文件夹,字符型[] 返回文件)|
函数说明:|遍历指定路径中的文件夹及文件|
调用例子:|
字符型[] 返回文件夹,返回文件
文件.遍历("D:\\test",返回文件夹,返回文件)
</example>
</function>

</namespace>



<!--字符串命名空间(中文)-->
<namespace name="字符串">

<!--2个字符串的连接-->
<function name="连接">
<!--返回值:返回字符串-->
<returntype>字符型</returntype>
<!--参数: 连接字符串1, 连接字符串2-->
<pram>(字符型 连接字符串1,字符型 连接字符串2)</pram>
<example>
函数原型:|字符型 字符串.连接(字符型 连接字符串1,字符型 连接字符串2)|
函数说明:|连接字符串|
调用例子:|辅助.消息框(字符串.连接("aaa","bbb"))
</example>
</function>


<!--字符串小写-->
<function name="转小写">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>字符型</returntype>
<!--参数: 要改成小写的字符串-->
<pram>(字符型 要改成小写的字符串)</pram>
<example>
函数原型:|字符型 字符串.转小写(字符型 要改成小写的字符串)|
函数说明:|转小写|
调用例子:|辅助.消息框(字符串.转小写("ABC"))
</example>
</function>


<!--字符串大写-->
<function name="转大写">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>字符型</returntype>
<!--参数:要改成大写的字符串-->
<pram>(字符型 要改成大写的字符串)</pram>
<example>
函数原型:|字符型 字符串.转大写(字符型 要改成大写的字符串)|
函数说明:|转大写|
调用例子:|辅助.消息框(字符串.转大写("abc"))
</example>
</function>


<!--2个字符串的比较-->
<function name="比较">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->
<returntype>整型</returntype>
<!--参数:字符串1，字符串2-->
<pram>(字符型 字符串1,字符型 字符串2)</pram>
<example>
函数原型:|整型 字符串.比较(字符型 字符串1,字符型 字符串2)|
函数说明:|比较|
调用例子:|字符串.比较("aaa","bbb")
</example>
</function>


<!--去掉字符串头尾指定字符-->
<function name="修剪">
<!--返回值:返回排除了要比较的字符串-->
<returntype>字符型</returntype>
<!--参数:要比较字符串,源数据-->
<pram>(字符型 要比较字符串,字符型 源数据)</pram>
<example>
函数原型:|字符型 字符串.修剪(字符型 要比较字符串,字符型 源数据)|
函数说明:|修剪|
调用例子:|辅助.消息框(字符串.修剪("abcdefgabcdefgabc","abc"))
</example>
</function>


<!--移除前几位或后几位字符串-->
<function name="移除" >
<!--返回值:返回已移除几位的字符串-->
<returntype>字符型</returntype>
<!--参数:字符串,从前或后移除的几位字符串-->
<pram>(字符型 字符串,整型 移除几位,逻辑型 前后)</pram>
<example>
函数原型:|字符型 字符串.移除(字符型 字符串,整型 移除几位,逻辑型 前后)|
函数说明:|移除前几位或后几位字符串|
调用例子:|字符串.移除("abcdefghijiklnm",5,假)
</example>
</function>


<!--字符串中截取指定区域的字符串-->
<function name="截取">
<!--返回值:返回截取到的指定区域的字符串-->
<returntype>字符型</returntype>
<!--参数:字符串, 截取的开头位置,截取的末尾的位置-->
<pram>(字符型 字符串,整型 截取的开头位置,整型 截取的末尾的位置)</pram>
<example>
函数原型:|字符型 字符串.截取(字符型 字符串,整型 截取的开头位置,整型 截取的末尾的位置)|
函数说明:|字符串中截取指定区域的字符串|
调用例子:|辅助.消息框(字符串.截取("abcdefghijklmn",2,5))
</example>
</function>


<!--得到字符串长度-->
<function name="长度">
<!--返回值:返回整形-->
<returntype>整型</returntype>
<!--参数:求出长度信息的字符串-->
<pram>(字符型 求出长度信息的字符串)</pram>
<example>
函数原型:|整型 字符串.长度(字符型 求出长度信息的字符串)|
函数说明:|得到字符串长度|
调用例子:|字符串.长度("abdcdef")
</example>
</function>


<!--字符串中加字符-->
<function name="添加字符">
<!--返回值:返回字符串-->
<returntype>字符型</returntype>
<!--参数:字符串,字符ascii值-->
<pram>(字符型 字符串,整型 字符ascii值)</pram>
<example>
函数原型:|字符型 字符串.添加字符(字符型 字符串,整型 字符ascii值)|
函数说明:|添加字符|
调用例子:|辅助.消息框(字符串.添加字符("abcdefghijklmn",13))
</example>
</function>


<!--字符串中找字符-->
<function name="查找字符">
<!--返回值:返回找到字符的位置-->
<returntype>整型</returntype>
<!--参数:字符串,字符ascii值-->
<pram>(字符型 字符串,整型 字符ascii值)</pram>
<example>
函数原型:|整型 字符串.查找字符(字符型 字符串,整型 字符ascii值)|
函数说明:|查找字符|
调用例子:|字符串.查找字符("abcdefghijklmn",65)
</example>
</function>


<!--在第一个字符串查找第一个字符串,并返回第一次出现该字符的位置-->
<function name="查找字符串" >
<!--返回值:返回第一次出现该字符串的位置-->
<returntype>整型</returntype>
<!--参数:要比较字符串,源数据-->
<pram>(字符型 要比较字符串,字符型 源数据)</pram>
<example>
函数原型:|整型 字符串.查找字符串(字符型 要比较字符串,字符型 源数据)|
函数说明:|在第一个字符串查找第二个字符串,并返回第一次出现该字符串的位置|
调用例子:|字符串.查找字符串("uuuuabcdefgg","abc")
</example>
</function>


<!--根据给出的字符的位置,在字符串中找到对应的字符-->
<function name="返回字符">
<!--返回值:返回找到字符的ASCII码-->
<returntype>整型</returntype>
<!--参数:字符串,位置-->
<pram>(字符型 字符串,整型 位置)</pram>
<example>
函数原型:|整型 字符串.返回字符(字符型 字符串,整型 位置)|
函数说明:|返回字符|
调用例子:|字符串.返回字符("abcdefghijklmn",6)
</example>
</function>


<!--2个字符串都截取前面几个字符的进行比较-->
<function name="定长比较">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->
<returntype>整型</returntype>
<!--参数:字符串1，字符串2,截取多少位-->
<pram>(字符型 字符串1,字符型 字符串2,整型 截取多少位)</pram>
<example>
函数原型:|整型 字符串.定长比较(字符型 字符串1,字符型 字符串2,整型 截取多少位)|
函数说明:|定长比较|
调用例子:|
字符串.定长比较("aaaaaaa","abcdefgh",5)
</example>
</function>

<!--格式化字符串-->
<function name="格式化">
<!--返回值:返回格式化之后的字符串-->
<returntype>字符型</returntype>
<!--参数: 字符串 格式-->
<pram>(字符型 字符串)</pram>
<example>
函数原型:|字符型 字符串.格式化(字符型 字符串,...)|
函数说明:|格式化字符串|
调用例子:|
字符型 格式字符=字符串.格式化("%d%s",3,"bbb")
辅助.消息框(格式字符)
</example>
</function>

<!--判断字符串是否整型-->
<function name="是否整型">
<!--返回值:比较结果-->
<returntype>逻辑型</returntype>
<!--参数:要判断的字符串-->
<pram>(字符型 字符串,整型 类型)</pram>
<example>
函数原型:|逻辑型 字符串.是否整型(字符型 字符串,整型 类型)|
函数说明:|判断字符串是否整型,类型=0:表示判断十进制整型字符串,1:表示判断十六进制整型字符串|
调用例子:|
如果(字符串.是否整型("1234",0))
辅助.消息框("字串是整型")
如果结束
</example>
</function>

<!--判断字符串是否浮点型-->
<function name="是否浮点型">
<!--返回值:比较结果-->
<returntype>逻辑型</returntype>
<!--参数:要判断的字符串-->
<pram>(字符型 字符串)</pram>
<example>
函数原型:|逻辑型 字符串.是否浮点型(字符型 字符串)|
函数说明:|判断字符串是否浮点型|
调用例子:|
如果(字符串.是否浮点型("1234.0"))
辅助.消息框("字串是浮点型")
如果结束
</example>
</function>

<!--字符串倒序-->
<function name="倒序">
<!--返回值:返回倒序后的字符串-->
<returntype>字符型</returntype>
<!--参数:str字符串-->
<pram>(字符型 字串)</pram>
<example>
函数原型:|字符型 字符串.倒序(字符型 字串)|
函数说明:|字符串倒序|
调用例子:|辅助.消息框(字符串.倒序("abc"))
</example>
</function>

<!--字符串替换-->
<function name="替换">
<!--返回值:返回倒序后的字符串-->
<returntype>字符型</returntype>
<!--参数:str字符串-->
<pram>(字符型 字串1,字符型 字串2,字符型 字串3)</pram>
<example>
函数原型:|字符型 字符串.替换(字符型 字串1,字符型 字串2,字符型 字串3)|
函数说明:|字符串替换,查找并替换字符串中指定子串,1=需要替换的源字符串 2=需要被替换的字串 3=用于替换的子串|
调用例子:|
辅助.消息框(字符串.替换("a1b1c1","1","2"))
</example>
</function>

<!--字符串分割-->
<function name="分割">
<!--返回值:返回倒序后的字符串-->
<returntype>逻辑型</returntype>
<!--参数:str字符串-->
<pram>(字符型 源串,字符型 分割串,字符型[] 返回字串)</pram>
<example>
函数原型:|逻辑型 字符串.分割(字符型 源串,字符型 分割串,字符型[] 返回串)|
函数说明:|字符串分割,根据分隔符把源串分割,返回给第三个参数(字符串数组)|
调用例子:|
字符型[] 返回值=字符型[1]  //需要先初始化一次
字符型 源串="AB:CD:EF:GH:JK",分隔符=":"
逻辑型 是否成功=字符串.分割(源串,分隔符,返回值)

</example>
</function>

</namespace>


<!--类型转换空间(中文)-->
<namespace name="转换">

<!--双精度浮点转字符串-->
<function name="浮点型转字符型">
<!--返回值:返回字符串-->
<returntype>字符型</returntype>
<!--参数:浮点型值-->
<pram>(浮点型 浮点型值)</pram>
<example>
函数原型:|字符型 转换.浮点型转字符型(浮点型 浮点型值)|
函数说明:|双精度浮点转字符型|
调用例子:|
浮点型 双精度浮点数=333.333
字符型 字符串=转换.浮点型转字符型(双精度浮点数)
</example>
</function>


<!--字符串转双精度浮点数-->
<function name="字符型转浮点型">
<!--返回值:返回双精度浮点-->
<returntype>浮点型</returntype>
<!--参数:字符串 要转换为双精度浮点数的字符串-->
<pram>(字符型 字符串)</pram>
<example>
函数原型:|浮点型 转换.字符型转浮点型(字符型 字符串)|
函数说明:|字符型转双精度浮点数|
调用例子:|
字符型 字符串值="123.5"
浮点型 双精度浮点数=转换.字符型转浮点型(字符串值)
</example>
</function>


<!--整型转字符串-->
<function name="整型转字符型">
<!--返回值:返回字符串-->
<returntype>字符型</returntype>
<!--参数:整形数 i要转换为字符串的整形数-->
<pram>(整型 整形数)</pram>
<example>
函数原型:|字符型 转换.整型转字符型(整型 整形数)|
函数说明:|整型转字符型|
调用例子:|
整型 整型数=333
字符型 字符串=转换.整型转字符型(333)
</example>
</function>


<!--字符串转整型-->
<function name="字符型转整型">
<!--返回值:返回整形-->
<returntype>整型</returntype>
<!--参数:字符串 要转为整型数的字符串-->
<pram>(字符型 字符串值,整型 类型=0)</pram>
<example>
函数原型:|整型 转换.字符型转整型(字符型 字符串值,整型 类型=0)|
函数说明:|字符型转整型,类型=0:表示传入十进制整型字符串,1:表示传入十六进制整型字符串,转换后数据为十进制整型|
调用例子:|
字符型 字符串值="123"
整型 整型数据=转换.字符型转整型(字符串值,0)
</example>
</function>


<!--浮点型转整型-->
<function name="浮点型转整型">
<!--返回值:返回整型-->
<returntype>整型</returntype>
<!--参数:浮点型数 要转为整型的浮点型数据-->
<pram>(浮点型 浮点型数)</pram>
<example>
函数原型:|整型 转换.浮点型转整型(浮点型 浮点型数)|
函数说明:|双精度转整型|
调用列子:|
整型 整型值=转换.浮点型转整型(123.333)
</example>
</function>

</namespace>



<!--图像空间-->

<namespace name="图像">
<!--在当前活动窗口区域内找色-->
<function name="区域找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像,返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值 颜色16进制数,检索方式,返回x坐标,返回y坐标-->
<pram>(整型 左上角的x坐标,整型 左上角的y坐标,整型 右下角的x坐标,整型 右下角的y坐标,整型 颜色值,整型 检索方式,整型 返回x坐标,整型 返回y坐标)</pram>
<example>
函数原型:|逻辑型  图像.区域找色(整型 左上角的x坐标,整型 左上角的y坐标,整型 右下角的x坐标,整型 右下角的y坐标,整型 颜色值,整型 检索方式,整型 返回x坐标,整型 返回y坐标)|
函数说明:|在当前活动窗口区域内找色|
调用列子:|
整型 x,y
逻辑型 是否找到=图像.区域找色(10,10,500,600,#1252E0,0,x,y)
</example>
</function>


<!--抓取当前活动窗口指定坐标点的图像-->
<function name="坐标点取色">
<!--返回值:返回的是颜色值的十六进制字符型数据-->
<returntype>整型</returntype>
<!--参数:点的x坐标，点的y坐标-->
<pram>(整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|整型 图像.坐标点取色(整型 x坐标,整型 y坐标)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|
整型 图像值=图像.坐标点取色(300,300)
</example>
</function>


<!--在当前活动窗口区域内模糊找色-->
<function name="模糊找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像点,如果找到在参数里返回,否则返回空-->
<returntype>逻辑型</returntype>
<!--参数:左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,颜色值 颜色16进制数,,检索方式返回x坐标,返回y坐标-->
<pram>(整型 左上角x坐标,整型 左上角y坐标,整型 右下角x坐标,整型 右下角y坐标,整型 颜色值,浮点型 相似度,整型 检索方式,整型 返回的x坐标,整型 返回的y坐标)</pram>
<example>
函数原型:|逻辑型  图像.模糊找色(整型 左上角的x坐标,整型 左上角的y坐标,整型 右下角的x坐标,整型 右下角的y坐标,整型 颜色值,浮点型 相似度,整型 检索方式,整型 返回的x坐标,整型 返回的y坐标)|
函数说明:|在当前活动窗口区域内模糊找图像点,找到图像点,坐标值保存在返回的x坐标和返回的y坐标 变量里。未找到则返回的x坐标和返回的y坐标这2个变量的值为-1|
调用列子:|
//相似度的值规定范围(0.5-1.0),推荐使用0.8
整型 x,y
逻辑型 是否找到=图像.模糊找色(10,10,500,600,#1E3C04,0.8,0,x,y)
</example>
</function>



<!--在当前活动窗口区域内找图-->
<function name="找图">
<!-- 返回值:找到则返回的是图片的相应序号,未找到则返回0--> 
<returntype>整型</returntype> 
<!-- 参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径,色偏,相似度,检索方式,返回找到的x坐标,y坐标--> 
<pram>(整型 left,整型 top,整型 right,整型 buttom,字符型 path,整型 色偏,浮点型 相似度,整型 检索方式,整型 x,整型 y)</pram> 
<example>
函数原型:|整型 图像.找图(整型 left,整型 top,整型 right,整型 buttom,字符型 path,整型 色偏,浮点型 相似度,整型 检索方式,整型 x,整型 y)| 
函数说明:|在当前活动窗口区域内找图| 
调用列子:|
//说明:支持多张图片(图片与图片中间使用 竖线隔开)和根据四角的颜色判断是否为透明图|
整型 图片X坐标,图片Y坐标,图像序号
图像序号=图像.找图(0,0,1440,900,"d:\\111.bmp",#102030,1.0,0,图片X坐标,图片Y坐标)
</example> 
</function>


<!--16进制颜色值的字符串转10进制整型-->
<function name="颜色值转10进制">
<!--返回值:返回的是颜色值的十进制整型数据-->
<returntype>整型</returntype>
<!--参数:16进制颜色值-->
<pram>(字符型 16进制颜色值)</pram>
<example>
函数原型:|整型 图像.颜色值转10进制(字符型 16进制颜色值)|
函数说明:|16进制颜色值的字符串转10进制整型|
调用列子:|整型 图像值=图像.颜色值转10进制("BBEEFF")
</example>
</function>


<!--16进制颜色值得到R G B值的-->
<function name="颜色值转RGB值">
<!--返回值:把16进制的颜色值转换为RGB值,分别以R值的十进制值,G值的十进制值,B值的十进制值进行返回。-->
<returntype>逻辑型</returntype>
<!--参数:16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值-->
<pram>(整型 16进制的颜色值,整型 R值的十进制值,整型 G值的十进制值,整型 B值的十进制值)</pram>
<example>
函数原型:|逻辑型 图像.颜色值转RGB值(整型 16进制的颜色值,整型 R值的十进制值,整型 G值的十进制值,整型 B值的十进制值)|
函数说明:|把16进制的颜色值转换为RGB值|
调用列子:|
整型 R,G,B
逻辑型 转换=图像.颜色值转RGB值(#BBEEFF,R,G,B)
</example>
</function>

<!--根据R G B的值获取16进制颜色值-->
<function name="RGB值转颜色值">
<!--返回值:返回的是颜色值的十六进制字符型数据-->
<returntype>整型</returntype>
<!--参数:R值的十进制值,G值的十进制值,B值的十进制值-->
<pram>(整型 R值的十进制值,整型 G值的十进制值,整型 B值的十进制值)</pram>
<example>
函数原型:|整型 图像.RGB值转颜色值(整型 R值的十进制值,整型 G值的十进制值,整型 B值的十进制值)|
函数说明:|根据R G B的值获取16进制颜色值|
调用列子:|
整型 颜色值=图像.RGB值转颜色值(50,100,150)
</example>
</function>

<!--找多点颜色值-->
<function name="多点找色">
<!--返回值:返回真或者是假-->
<returntype>逻辑型</returntype>
<!--参数:参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,第一点色,偏移点组,相似度,检索方式,返回找到的x坐标,y坐标-->
<pram>(整型 left,整型 top,整型 right,整型 buttom,整型 第一点色,字符型 偏移点组,浮点型 相似度,整型 检索方式,整型 x,整型 y)</pram>
<example>
函数原型:|逻辑型 图像.多点找色(整型 left,整型 top,整型 right,整型 buttom,整型 第一点色,字符型 偏移点组,浮点型 相似度,整型 检索方式,整型 x,整型 y)|
函数说明:|多点找色,先得到第一个颜色的坐标,之后根据偏移点组的数据判断各个点的颜色,如果条件全部符合,返回第一个颜色的坐标|
调用列子:|详情请看帮助文档
</example>
</function>

</namespace>



<!--进程命名空间(中文)-->
<namespace name="进程">

<!--打开进程-->
<function name="打开">
<!--返回值:返回进程的句柄-->
<returntype>整型</returntype>
<!--参数:进程路径-->
<pram>(字符型 路径)</pram>
<example>
函数原型:|整型 进程.打开(字符型 路径)|
函数说明:|打开一个进程|
调用例子:|
整型 进程句柄=进程.打开("d:\\MF\\wow.exe")
</example>
</function>

<!--读进程:读取BYTE数值 -->
<function name="读byte">
<!--返回值:执行成功返回的数据，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 进程句柄,内存地址 要读的数据的内存地址-->
<pram>(整型 进程句柄,整型 内存地址)</pram>
<example>
函数原型:|整型 进程.读byte(整型 进程句柄,整型 进程的内存地址)|
函数说明:|读进程中一个内存地址的一个byte位数据|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
整型 数据=进程.读byte(进程句柄,#4FC000)
</example>
</function>

<!--读进程:读取16位数值(整型 )针对2个字节整形-->
<function name="读2byte">
<!--返回值:执行成功返回读到的数据，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要读取内容的进程句柄,进程内存地址 要读取的内存地址-->
<pram>(整型 进程句柄,整型 内存地址)</pram>
<example>
函数原型:|整型 进程.读2byte(整型 进程句柄,整型 内存地址)|
函数说明:|在一个进程的内存中读取16位数值(整型)2个字节的整形|
调用例子:|
整型 进程句柄,短整形数
进程句柄=进程.打开("D:\\MF\\Wow.exe")
短整形数=进程.读2byte(进程句柄,#4FC000)
</example>
</function>

<!--读进程:读取32位整形数值 整型-->
<function name="读4byte">
<!--返回值:执行成功返回读到的数据，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要读取内容的进程句柄,内存地址 要读取的内存地址-->
<pram>(整型 进程句柄,整型 内存地址)</pram>
<example>
函数原型:|整型 进程.读4byte(整型 进程句柄,整型 内存地址)|
函数说明:|读进程一个内存地址的32位整形数值|
调用例子:|
整型 进程句柄,整形数据
进程句柄=进程.打开("D:\\MF\\Wow.exe")
整形数据=进程.读4byte(进程句柄,#4FC000)
</example>
</function>


<!--读进程:根据地址读取指定长度的字符串,用于ASCII编码的进程,count表示字符串的长度-->
<function name="读string">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>字符型</returntype>
<!--参数:进程句柄,内存地址,字符个数-->
<pram>(整型 进程句柄,整型 内存地址,整型 字符个数)</pram>
<example>
函数原型:|字符型 进程.读string(整型 进程句柄,整型 内存地址,整型 字符个数)|
函数说明:|根据地址读取一个进程指定长度的ascii字符串|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
字符型 读取内容=进程.读string(进程句柄,#4FC000,7)
</example>
</function>


<!--读进程:读取64位浮点值浮点型-->
<function name="读double">
<!--返回值:执行成功返回读取到的数据,否则返回0-->
<returntype>浮点型</returntype>
<!--参数:进程句柄 要读取的内存的进程句柄,内存地址 要读的内存地址-->
<pram>(整型 进程句柄,整型 内存地址)</pram>
<example>
函数原型:|浮点型 进程.读double(整型 进程句柄,整型 内存地址)|
函数说明:|读取进程的指定的内存地址的浮点型数值|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
浮点型 浮点数据=进程.读double(进程句柄,#4FC000)
</example>
</function>


<!--读进程:读取32位浮点数值 float-->
<function name="读float">
<!--返回值:执行成功返回读取到的数据,否则返回0-->
<returntype>浮点型</returntype>
<!--参数:进程句柄 要读取的内存的进程句柄,内存地址 要读的内存地址-->
<pram>(整型 进程句柄,整型 内存地址)</pram>
<example>
函数原型:|浮点型 进程.读float(整型 进程句柄,整型 内存地址)|
函数说明:|读进程的指定的内存地址的float型数值存放到doulbe变量中|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
浮点型 浮点数据=进程.读float(进程句柄,#4FC000)
</example>
</function>


<!--读进程:根据地址读取指定长度的字符串,用于unicode编码的进程-->
<function name="读stringunicode">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>字符型</returntype>
<!--参数:进程句柄 要读取的进程句柄,内存地址 要读取的内存地址,字符个数 要读取的字符串的个数-->
<pram>(整型 进程句柄,整型 内存地址,整型 字符个数)</pram>
<example>
函数原型:|字符型 进程.读stringunicode(整型 进程句柄,整型 内存地址,整型 字符个数)|
函数说明:|根据地址读取一个进程指定长度的字符串|
调用例子:|
整型 进程句柄=进程.打开("D:\\Test.exe")
字符型 读取内容=进程.读stringunicode(进程句柄,#4FC000,7)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="找byte">
<!--返回值:返回找到第一个匹配byte值的数据地址,否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要查找数据的进程句柄,数值,起始地址,结束地址-->
<pram>(整型 进程句柄,整型 数值,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.找byte(整型 进程句柄,整型 数值,整型 起始地址,整型 结束地址)|
函数说明:|搜索指定一个字节位的整型型值并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
整型 地址=进程.找byte(进程句柄,5,#4FC000,#7fffffff)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="找2byte">
<!--返回值:返回找到第一个匹配内存里面的2个字节的整型值的数据地址,否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要查找数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(整型 进程句柄,整型 数值,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.2byte(整型 进程句柄,整型 数值,整型 起始地址,整型 结束地址)|
函数说明:|搜索指定2个字节型值并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
整型 地址=进程.找2byte(进程句柄,5,#4FC000,#7fffffff)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="找4byte">
<!--返回值:返回找到第一个匹配整型整形值的数据地址，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要查找数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(整型 进程句柄,整型 数据,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.找4byte(整型 进程句柄,整型 数据,整型 起始地址,整型 结束地址)|
函数说明:|搜索指定4个字节数据值并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
整型 地址=进程.找4byte(进程句柄,1234,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址(针对的是ansi码)-->
<function name="找string">
<!--返回值:返回找到第一个匹配ascii类型的字符型字符串数据地址，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄, 寻找的字符串,起始地址,结束地址-->
<pram>(整型 进程句柄,字符型 寻找的字符串,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.找string(整型 进程句柄,字符型 寻找的字符串,整型 起始地址,整型 结束地址)|
函数说明:|搜索指定ascii型字符串值并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\wow.exe")
整型 地址=进程.找string(进程句柄,"login",#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="找double">
<!--返回值:返回找到第一个匹配数据地址的浮点型值，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要查找的数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(整型 进程句柄,浮点型 数值,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.找double(整型 进程句柄,浮点型 数值,整型 起始地址,整型 结束地址)|
函数说明:|搜索指定浮点型型值并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
整型 地址=进程.找double(进程句柄,8.15,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="找float">
<!--返回值:返回找到第一个匹配数据地址的float值，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要查找的数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(整型 进程句柄,浮点型 数值,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.找float(整型 进程句柄,浮点型 数值,整型 起始地址,整型 结束地址)|
函数说明:|搜索指定float型值并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
整型 地址=进程.找float(进程句柄,8.15,#4FC000,#7fffffff)
</example>
</function>


<!--读进程:根据地址读取指定长度的字符串,用于unicode编码的进程-->
<function name="找stringunicode">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>整型</returntype>
<!--参数:进程句柄 要查找的数据的进程句柄,查找的字符串,起始地址,结束地址-->
<pram>(整型 进程句柄,字符型 查找的字符串,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.找stringunicode(整型 进程句柄,字符型 查找的字符串,整型 起始地址,整型 结束地址)|
函数说明:| 搜索指定字符串值并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\Test.exe")
整型 地址=进程.找stringunicode(进程句柄,"abcdefg",#4FC000,#7fffffff)
</example>
</function>


<!--等待窗口初始化完成--> 
<function name="等待初始化">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>整型</returntype>
<!--参数:进程句柄,最常等待秒-->
<pram>(整型 进程句柄,整型 最常等待秒)</pram>
<example>
函数原型:|整型 进程.窗口初始化(整型进程句柄,整型 最常等待秒)
如果time 为-1,则是为无限等待|
函数说明:|等待窗口初始化完成|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
进程.等待初始化(进程句柄,10000)
</example>
</function>

<!--通过窗口名获取进程的句柄--> 
<function name="获取进程句柄">
<!--返回值:执行成功返回进程句柄，否则返回0-->
<returntype>整型</returntype>
<!--参数:应用进程的窗口名-->
<pram>(字符型 窗口名)</pram>
<example>
函数原型:|整型 进程.获取进程句柄(字符型 窗口名)|
函数说明:|通过窗口名获取进程的句柄|
调用例子:|
整型 进程句柄=进程.获取进程句柄("大话西游")
</example>
</function>

<!--通过进程句柄关闭指定进程--> 
<function name="关闭进程">
<!--返回值:指定进程成功关闭返回为真，否则返回为假-->
<returntype>逻辑型</returntype>
<!--参数:进程句柄-->
<pram>(整型 进程句柄)</pram>
<example>
函数原型:|逻辑型 进程.关闭进程(整型 进程句柄)|
函数说明:|通过进程句柄关闭指定进程|
调用例子:|
整型 进程句柄=进程.获取进程句柄("大话西游")
逻辑型 是否关闭=进程.关闭进程(进程句柄)
</example>
</function>

<!--搜索字节数组并返回该值地址-->
<function name="找字节数组">
<!--返回值:返回找到第一个匹配整型整形值的数据地址，否则返回0-->
<returntype>整型</returntype>
<!--参数:进程句柄 要查找数据的进程句柄, 字节数组,起始地址,结束地址-->
<pram>(整型 进程句柄,字符型 字节数组,整型 起始地址,整型 结束地址)</pram>
<example>
函数原型:|整型 进程.找字节数组(整型 进程句柄,字符型 字节数组,整型 起始地址,整型 结束地址)|
函数说明:|搜索指定字节数组数据并返回第一次找到该值的地址|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
整型 地址=进程.找字节数组(进程句柄,"10 F0 A0 04",#4FC000,#7fffffff)
</example>
</function>

<!--扩展打开进程-->
<function name="扩展打开">
<!--返回值:返回进程的句柄-->
<returntype>整型</returntype>
<!--参数:进程路径-->
<pram>(字符型 路径,字符型 参数)</pram>
<example>
函数原型:|整型 进程.扩展打开(字符型 路径,字符型 参数)|
函数说明:|打开一个进程,如不需使用第二参数,第二参数可为空字符|
调用例子:|
整型 进程句柄=进程.扩展打开("rc:B.exe","我是参数")
</example>
</function>

<!--获取进程参数-->
<function name="获取参数">
<!--返回值:返回进程的句柄-->
<returntype>字符型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|字符型 进程.获取参数()|
函数说明:|获取进程.扩展打开()打开进程传入的参数(必须在被打开进程中调用,才能正确获取)|
调用例子:|
字符型 参数值=进程.获取参数()
</example>
</function>

<!-- 读取字节数组 -->
<function name="读字节数组">
<!--返回值: 读取的值-->
<returntype>字符型</returntype>
<!--参数:进程句柄 起始地址,个数 -->
<pram>(整型 进程句柄,整型 起始地址,整型 个数)</pram>
<example>
函数原型:|字符型 进程.读字节数组(整型 进程句柄,整型 起始地址,整型 个数)|
函数说明:|从指定的内存地址开始读取指定个数的字节数据|
调用例子:|
整型 进程句柄=进程.打开("D:\\MF\\Wow.exe")
// 读取的字符型数据格式为"23 3F 5A" 全是16进制数据，以空格符隔开
字符型 数据=进程.读字节数组(进程句柄,#4FC000,4)
</example>
</function>

</namespace>



<!--辅助命名空间-(中文)-->
<namespace name="辅助">

<!--等待-->
<function name="等待">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:毫秒 窗口延时多少毫秒-->
<pram>(整型 毫秒)</pram>
<example>
函数原型:|逻辑型 辅助.等待(整型 毫秒)|
函数说明:|窗口延时多少毫秒|
调用例子:|辅助.等待(5000)
</example>
</function>


<!--消息对话框-->
<function name="消息框">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:内容 对话框的内容-->
<pram>(字符型 内容)</pram>
<example>
函数原型:|逻辑型 辅助.消息框(字符型 内容)|
函数说明:|弹出消息对话框|
调用例子:|辅助.消息框("这是消息框")
</example>
</function>


<!--写入剪切板-->
<function name="写入剪切板">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:内容 剪切板的内容-->
<pram>(字符型 内容)</pram>
<!--举列:辅助.写入剪切板("aaa")-->
<example>
函数原型:|逻辑型 辅助.写入剪切板(字符型 内容)|
函数说明:|读取剪切板|
调用例子:|
辅助.写入剪切板("aaa")
字符型 内容=辅助.读取剪切板()
辅助.消息框(内容)
</example>
</function>


<!--读取剪切板内容-->
<function name="读取剪切板">
<!--返回值:返回剪切板的内容-->
<returntype>字符型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|字符型 辅助.读取剪切板()|
函数说明:|读取剪切板|
调用例子:|
辅助.写入剪切板("aaa")
字符型 内容=辅助.读取剪切板()
辅助.消息框(内容)
</example>
</function>


<!--播放mp3音乐-->
<function name="播放">
<!--返回值:设备句柄-->
<returntype>整型</returntype>
<!--参数: 路径 mp3音乐路径-->
<pram>(字符型 路径)</pram>
<example>
函数原型:|整型 辅助.播放(字符型 路径)|
函数说明:|播放音乐,该函数由线程方法实现,所以不能再写入线程调用|
调用例子:|
整型 ID = 辅助.播放("d:\\测试歌曲.mp3")
辅助.等待(15000)
辅助.停止播放(ID)
</example>
</function>

<!--停止播放mp3音乐-->
<function name="停止播放">
<!--返回值:设备句柄-->
<returntype>逻辑型</returntype>
<!--参数: 路径 mp3音乐路径-->
<pram>(整型 ID)</pram>
<example>
函数原型:|逻辑型 辅助.停止播放(整型 ID)|
函数说明:|停止播放音乐|
调用例子:|
整型 ID = 辅助.播放("d:\\测试歌曲.mp3")
辅助.等待(15000)
辅助.停止播放(ID)
</example>
</function>

<!--输入框--> 
<function name="输入框">
<!--返回值:成功返回true,失败返回false-->
<returntype>整型</returntype>
<!--参数:托盘名称-->
<pram>(字符型 标题,字符型 提示内容,字符型 返回字串)</pram>
<example>
函数原型:|整型 辅助.输入框(字符型 标题,字符型 提示内容,字符型 返回字串)|
函数说明:|弹出输入框让用户输入数据,并返回用户输入|
调用例子:|
字符型 返回字串
整型 返回值=辅助.输入框("TChello","请输入内容",返回字串)
辅助.消息框(返回字串)
</example>
</function>


<!-- 当前窗口截图 --> 
<function name="截图">
<!-- 返回值:截图成功返回真,否则返回假--> 
<returntype>逻辑型</returntype> 
<!-- 参数:x左上角,y右上角,右下角x坐标,右下角y坐标--> 
<pram>(整型 左上角x坐标,整型 左上角y坐标,整型 右下角x坐标,整型 右下角y坐标,字符型 存放路径)</pram> 
<!-- 举列:辅助.窗口截图(10,10,200,300,"c://aa.bmp")--> 
<example>
函数原型:|逻辑型 辅助.截图(整型 左上角x坐标,整型 左上角y坐标,整型 右下角x坐标,整型 右下角y坐标,字符型 路径)|
函数说明:|指定区域截图|
调用例子:|辅助.截图(10,10,200,300,"c:\\aa.bmp")
</example>
</function>


<!--确认对话框-->
<function name="对话框">
<!--返回值:0:终止, 1:取消, 2:继续, 3:忽略, 4:否, 5:确定, 6:重试, 7:是-->
<returntype>整型</returntype>
<!--参数:内容 确认对话框的内容-->
<pram>(字符型 内容,字符型 标题,整型 类型,逻辑型 置顶)</pram>
<example>
函数原型:|整型 辅助.对话框(字符型 内容,字符型 标题,整型 类型,逻辑型 置顶)|
函数说明:|弹出对话框,对话框类型:0:确定,1:确定--取消,2:是--否,3:是--否--取消,4:重试--取消,5:取消--重试--继续, 6:终止--重试--忽略 返回值:0:终止,1:取消,2:继续,3:忽略,4:否,5:确定,6:重试,7:是|
调用例子:|
整型 结果=辅助.对话框("这是确认对话框","我是标题",3,true)
</example>
</function>


<!-- 在写配置文件的信息--> 
<function name="写配置">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>逻辑型</returntype> 
<!-- 参数:属性名 配置文件的属性名,属性字段 配置文件属性字段 设置字段内容 设置配置文件属性字段的内容,文件路径 配置文件路径--> 
<pram>(字符型 属性名,字符型 属性字段,字符型 设置字段内容,字符型 文件路径)</pram> 
<example>
函数原型:|逻辑型 辅助.写配置(字符型 配置文件的属性名,字符型 配置文件属性字段,字符型 设置配置文件字段的内容,字符型 配置文件路径)|
函数说明:|在写配置文件的信息|
调用例子:|辅助.写配置("RealmName","East","serverGerman","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!-- 在读配置文件的信息--> 
<function name="读配置">
<!-- 返回值:执行成功返回读出的数据，否则返回空 --> 
<returntype>字符型</returntype> 
<!-- 参数:属性名 配置文件的属性名,字段 配置文件属性字段,配置文件路径--> 
<pram>(字符型 属性名,字符型 字段,字符型 配置文件路径)</pram> 
<example>
函数原型:|字符型  辅助.读配置(字符型 属性名,字符型 字段,字符型 文件路径)|
函数说明:|在读配置文件的信息|
调用例子:|辅助.读配置("RealmName","East","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!--随机函数-->
<function name="随机数">
<!--返回值:返回随机的整形-->
<returntype>整型</returntype>
<!--参数:范围-->
<pram>(整型 开始,整型 结束)</pram>
<example>
函数原型:|整型 辅助.随机数(整型 开始,整型 结束)|
函数说明:|得到一个指定范围内随机函数|
调用例子:|
整型 自定义数字=辅助.随机数(10,30)
</example>
</function>

<!--获取资源路径--> 
<function name="获取资源路径">
<!--返回值:执行成功返回当前路径，否则返回空-->
<returntype>字符型</returntype>
<!--参数:空-->
<pram>(字符型 资源路径)</pram>
<example>
函数原型:|字符型 辅助.获取资源路径(字符型 资源路径)|
函数说明:|获取rc:(资源)路径的真实全路径,支持多路径,用竖线隔开(不会判断文件是否存在,只会转换当前资源路径返回)|
调用例子:|
字符型 路径=辅助.获取资源路径("rc:1.bmp")
辅助.消息框(路径)
</example>
</function>

<!--执行CMD命令--> 
<function name="命令">
<!-- 返回值:执行CMD命令成功返回真--> 
<returntype>逻辑型</returntype> 
<!-- 参数:字符型 命令,逻辑型 是否隐藏--> 
<pram>(字符型 命令, 逻辑型 是否隐藏)</pram> 
<example>
函数原型:|逻辑型 辅助.命令(字符型 命令,逻辑型 是否隐藏)|
函数说明:|执行CMD命令,第一个参数是命令,第二个命名是指是否隐藏窗口|
调用例子:|逻辑型 是否成功=辅助.命令("www.tyuyan.com",false)
</example>
</function>

<!--退出自身进程--> 
<function name="退出">
<!-- 返回值:退出成功返回真--> 
<returntype>逻辑型</returntype> 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|逻辑型 辅助.退出()|
函数说明:|退出自身进程|
调用例子:|
辅助.退出()
</example>

</function>
<!--蜂鸣器--> 
<function name="蜂鸣">
<!-- 返回值:退出成功返回真--> 
<returntype>逻辑型</returntype> 
<!-- 参数:频率--> 
<pram>(整型 频率,整型 时长)</pram> 
<example>
函数原型:|逻辑型 辅助.蜂鸣(整型 频率,整型 时长)|
函数说明:|控制蜂鸣器发音|
调用例子:|
辅助.蜂鸣(1000,1000)
</example>
</function>

<!--判断插件是否注册--> 
<function name="是否注册">
<!-- 返回值:注册成功返回真--> 
<returntype>逻辑型</returntype> 
<!-- 参数:插件接口名--> 
<pram>(字符型 插件接口)</pram> 
<example>
函数原型:|逻辑型 辅助.是否注册(字符型 插件接口)|
函数说明:|通过插件接口,判断插件是否注册|
调用例子:|
逻辑型 是否成功=辅助.是否注册("dm.dmsoft")
如果(是否成功)
辅助.消息框("插件已注册")
如果结束
</example>
</function>


<!--注册插件--> 
<function name="注册插件">
<!-- 返回值:注册成功返回真--> 
<returntype>逻辑型</returntype> 
<!-- 参数:插件接口名--> 
<pram>(字符型 路径,逻辑型 类型)</pram> 
<example>
函数原型:|逻辑型 辅助.注册插件(字符型 路径,逻辑型 类型)|
函数说明:|注册或卸载插件,第二参数为 真 注册插件,为 假 卸载插件|
调用例子:|
逻辑型 是否成功=辅助.注册插件("c:\\dm.dll",真)
如果(是否成功)
辅助.消息框("插件注册成功")
如果结束
</example>
</function>

<!--最小化到托盘--> 
<function name="设置托盘">
<!--返回值:成功返回true,失败返回false-->
<returntype>逻辑型</returntype>
<!--参数:名称-->
<pram>(字符型 托盘名称,逻辑型 最小化状态=真)</pram>
<example>
函数原型:|逻辑型 辅助.设置托盘(字符型 托盘名称,逻辑型 最小化状态=真)|
函数说明:|设置程序托盘化(任务栏右下角创建程序小图标),为真托盘化后不隐藏程序窗口,为假托盘化后隐藏程序窗口|
调用例子:|
辅助.设置托盘("我的托盘",假)
</example>
</function>

</namespace>


<!--网络(中文)-->
<namespace name="网络">

<!--向页面提交内容-->
<function name="url提交内容">
<!--返回值:提交是否成功-->
<returntype>逻辑型</returntype>
<!--参数:提交的web地址-->
<pram>(字符型 提交的web地址-)</pram>
<example>
函数原型:|逻辑型 网络.url提交内容(字符型 提交的web地址)|
函数说明:|向页面提交内容|
调用列子:|网络.url提交内容("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--提交一个页面并读一个页面的内容-->
<function name="url读内容">
<!--返回值:读到的页面内容-->
<returntype>字符型</returntype>
<!--参数:读取的web地址-->
<pram>(字符型 读取的web地址,整型 编码类型=0)</pram>
<example>
函数原型:|字符型 网络.url读内容(字符型 读取的web地址,整型 编码类型=0)|
函数说明:|读取页面的内容,编码类型: 0: 使用UTF-8转换 1: 使用UTF-7转换 2: 符号字符集 3: 当前线程ANSI代码页 4: Macintosh代码页 5: OEM代码页 6: ANSI字符集|
调用列子:|
字符型 web内容=网络.url读内容("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--初始化--> 
<function name="初始化">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|逻辑型 网络.初始化()|
函数说明:|初始化网络环境,使用网络编程函数前需要先用该函数初始化|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--关闭初始化--> 
<function name="关闭">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|逻辑型 网络.关闭()|
函数说明:|网络程序结束后释放网络资源,关闭初始化|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--创建套接字--> 
<function name="套接字">
<!--返回值:整型值-->
<returntype>整型</returntype>
<!--参数:模式-->
<pram>(整型 类型)</pram>
<example>
函数原型:|整型 网络.套接字(整型 类型)|
函数说明:|创建套接字,返回套接字句柄 1:创建流式套接字(TCP) 2:数据报套接字(UDP)|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--关闭套接字--> 
<function name="关闭套接字">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄-->
<pram>(整型 套接字句柄)</pram>
<example>
函数原型:|逻辑型 网络.关闭套接字(整型 套接字句柄)|
函数说明:|网络程序结束后,关闭套接字,释放资源|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--绑定--> 
<function name="绑定">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄,端口-->
<pram>(整型 套接字句柄,整型 端口)</pram>
<example>
函数原型:|逻辑型 网络.绑定(整型 套接字句柄,整型 端口)|
函数说明:|绑定套接字,并开启指定端口|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--监听--> 
<function name="监听">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄,端口-->
<pram>(整型 套接字句柄,整型 连接个数)</pram>
<example>
函数原型:|逻辑型 网络.监听(整型 套接字句柄,整型 连接个数)|
函数说明:|监听套接字,指定可同时连接数|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--接受--> 
<function name="接受">
<!--返回值:新的套接字句柄-->
<returntype>整型</returntype>
<!--参数:套接字句柄,端口-->
<pram>(整型 套接字句柄,字符型 返回IP)</pram>
<example>
函数原型:|整型 网络.接受(整型 套接字句柄,字符型 返回IP)|
函数说明:|接受一个客户端的连接,返回一个新的套接字句柄(程序结束后记得释放该套接字句柄),第二参数返回该客户端的ip地址|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--发送--> 
<function name="发送">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄,端口-->
<pram>(整型 套接字句柄,字符型 发送内容)</pram>
<example>
函数原型:|逻辑型 网络.发送(整型 套接字句柄,字符型 发送内容)|
函数说明:|向一个绑定的套接字发送字符串|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--接收--> 
<function name="接收">
<!--返回值:接收串-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄,端口-->
<pram>(整型 套接字句柄,字符型 接收缓存)</pram>
<example>
函数原型:|逻辑型 网络.接收(整型 套接字句柄,字符型 接收缓存)|
函数说明:|接收一个绑定套接字发送过来的数据|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
字符型 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
整型 客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--连接--> 
<function name="连接">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄,端口-->
<pram>(整型 套接字句柄,字符型 服务器IP,整型 服务器端口)</pram>
<example>
函数原型:|逻辑型 网络.连接(整型 套接字句柄,字符型 服务器IP,整型 服务器端口)|
函数说明:|客户端向服务器发送一个连接(服务器接受连接后即可与服务器通讯),如果没有连接该函数将会等待,直到有连接过来为止|
调用例子:|
网络.初始化() //初始化网络环境
整型 客户端套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.连接(客户端套接字句柄,"127.0.0.1",9999) //这里测试所以连接的是本机
字符型 发送缓存="服务器,你好,我是客户端",接收缓存
网络.接收(客户端套接字句柄,接收缓存) //接收从服务器发送的字串
辅助.消息框(接收缓存) //打印从服务器接收的字串
网络.发送(客户端套接字句柄,发送缓存)//向指定服务器发送一串字符串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--接收来自--> 
<function name="接收来自">
<!--返回值:接收串-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄,地址,端口-->
<pram>(整型 套接字句柄,字符型 接收缓存,整型 接收长度,字符型 返回IP,整型 返回端口)</pram>
<example>
函数原型:|逻辑型 网络.接收来自(整型 套接字句柄,字符型 接收缓存,整型 接收长度,字符型 返回IP,整型 返回端口)|
函数说明:|接收指定地址发送过来的数据(一般用于UDP通讯)|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(2) //创建数据报(UDP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
整型 rPort
字符型 接收缓存,rIP,发送缓存="你好收到我的消息了没"
网络.发送到(服务器套接字句柄,发送缓存,"127.0.0.1",9999) //向指定地址端发送一串字符串
网络.接收来自(服务器套接字句柄,接收缓存,100,rIP,rPort) //接收数据
辅助.消息框(接收缓存) //打印从指定地址接收的字串
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--发送到--> 
<function name="发送到">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(整型 套接字句柄,字符型 发送缓存,字符型 ip,整型 端口)</pram>
<example>
函数原型:|逻辑型 网络.发送到(整型 套接字句柄,字符型 发送缓存,字符型 ip,整型 端口)|
函数说明:|发送字符串到指定地址(一般用于UDP通讯)|
调用例子:|
网络.初始化() //初始化网络环境
整型 服务器套接字句柄=网络.套接字(2) //创建数据报(UDP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
整型 rPort
字符型 接收缓存,rIP,发送缓存="你好收到我的消息了没"
网络.发送到(服务器套接字句柄,发送缓存,"127.0.0.1",9999) //向指定地址端发送一串字符串
网络.接收来自(服务器套接字句柄,接收缓存,100,rIP,rPort) //接收数据
辅助.消息框(接收缓存) //打印从指定地址接收的字串
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--域名解析--> 
<function name="域名解析">
<!--返回值:ip地址-->
<returntype>字符型</returntype>
<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(字符型 IDN)</pram>
<example>
函数原型:|字符型 网络.域名解析(字符型 IDN)|
函数说明:|域名解析,传入域名,返回IP地址|
调用例子:|
字符型 r_ip=网络.域名解析("www.tyuyan.com")
</example>
</function>
 <!--发送文件-->
  <function name="发送文件">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    <returntype>整型</returntype>
    <!--参数:套接字句柄,端口-->
    <pram>(整型 套接字句柄,字符型 发送文件名)</pram>
    <example>
      函数原型:|整型 网络.发送文件(整型 套接字句柄,字符型 发送文件名)|
      函数说明:|发送指定目录下的文件到网络,返回值类型:0 成功,-1 套接字错误,-2 发送文件路径错误,-3 网络异常|
      调用例子:|
      网络.初始化() //初始化网络环境
      整型 套接字句柄=网络.套接字(1) //创建流式(TPC)套接字
      网络.连接(套接字句柄,"127.0.0.1",9999) //这里测试所以连接的是本机
      整型 sendret=网络.发送文件(套接字句柄,"E:\\1.bmp") //发送文件
      如果(0!=sendret)
      辅助.消息框("发送文件失败")
      如果结束
      网络.关闭套接字(套接字句柄) //关闭套接字释放资源
      网络.关闭() //关闭网络环境释放资源
    </example>
  </function>

  <!--接收文件-->
  <function name="接收文件">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    <returntype>整型</returntype>
    <!--参数:套接字句柄,端口-->
    <pram>(整型 套接字句柄,字符型 保存文件名)</pram>
    <example>
      函数原型:|逻辑型 网络.接收文件(整型 套接字句柄,字符型 保存文件名)|
      函数说明:|接收网络文件，并保存带指定目录下的文件返回值类型:0 成功,-1 套接字错误,-2 文件路径错误,-3 网络异常|
      调用例子:|
      网络.初始化() //初始化网络环境
      整型  套接字句柄=网络.套接字(1) //创建流式(TPC)套接字
      网络.绑定(套接字句柄,9999) //开启了计算机的9999端口,供外界连接
      网络.监听(套接字句柄,5) //监听套接字,设置可连接数为5个
      字符型 rIP
      整型 新套接字句柄=网络.接受(套接字句柄,rIP)//这里程序会挂起等待,直到有客户端连接到来
      整型 rRcv=网络.接收文件(新套接字句柄,"E:\\2.bmp") //接收从客户端发送文件并保存到E盘下2.bmp
      如果(0!=rRcv)
      辅助.消息框("接收文件失败")
      如果结束
      网络.关闭套接字(新套接字句柄) //关闭套接字释放资源
      网络.关闭套接字(套接字句柄) //关闭套接字释放资源
      网络.关闭() //关闭网络环境释放资源
    </example>
  </function>

<!--获取错误信息--> 
<function name="获取错误信息">
<!--返回值:错误值-->
<returntype>整型</returntype>
<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>()</pram>
<example>
函数原型:|整型 网络.获取错误信息()|
函数说明:|获得最近一次失败操作的错误情况,错误值详情见帮助文档,|
调用例子:|整型 错误值= 网络.获取错误信息()
</example>
</function>

</namespace>




<!--系统空间(中文)-->
<namespace name="系统">
	
<!--得到当前系统时间-->
<function name="时间">
<!--返回值:返回系统时间-->
<returntype>字符型</returntype>
<!--参数:无-->
<pram>(整型 模式)</pram>
<example>
函数原型:|字符型 系统.时间(整型 模式)|
函数说明:|显示系统时间|
调用列子:|
字符型 当前时间=系统.时间(1)
</example>
</function>


<!--得到当前屏幕分辩率的高度-->
<function name="获得分辨率">
<!--返回值:显示分辨率高度-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>(整型 宽,整型 高)</pram>
<example>
函数原型:|逻辑型 系统.获得分辨率(整型 宽,整型 高)|
函数说明:|获得系统分辨率|
调用列子:|
整型 宽,高
系统.获得分辨率(宽,高)
</example>
</function>


<!--得到当前系统的版本信息-->
<function name="版本">
<!--返回值:版本信息-->
<returntype>字符型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|字符型 系统.版本()|
函数说明:|获得系统版本信息|
调用列子:|
字符型 版本内容=系统.版本()
</example>
</function>


<!--获取当前进程的全路径--> 
<function name="获取程序路径">
<!--返回值:执行成功返回进程路径，否则返回0-->
<returntype>字符型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|字符型 系统.获取程序路径()|
函数说明:|获取当前进程的全路径|
调用例子:|
字符型 路径=系统.获取程序路径()
</example>
</function>


<!--获取操作系统启动到现在所经过的毫秒数--> 
<function name="获取毫秒">
<!-- 返回值:操作系统启动到现在所经过的毫秒数--> 
<returntype>整型</returntype> 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|整型 系统.获取毫秒()|
函数说明:|获取操作系统启动到现在所经过的毫秒数|
调用例子:|整型 time=系统.获取毫秒()
</example>
</function>


<!--设置当前屏幕的分辩率-->
<function name="设置分辨率">
<!--返回值:返回true为修改分辨率成功，false为修改分辨率失败-->
<returntype>逻辑型</returntype>
<!--参数:无-->
<pram>(整型 分辨率宽度,整型 分辨率高度)</pram>
<example>
函数原型:|逻辑型 系统.设置分辨率(分辨率宽度 ,分辨率高度)|
函数说明:|设置当前屏幕的分辩率|
调用列子:|系统.设置分辨率(1024,768)
</example>
</function>

<!--获取当前路径--> 
<function name="获取当前路径">
<!--返回值:执行成功返回当前路径，否则返回0-->
<returntype>字符型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|字符型 系统.获取当前路径()|
函数说明:|获取当前路径|
调用例子:|
字符型 路径=系统.获取当前路径()
</example>
</function>

<!--设置当前路径--> 
<function name="设置路径">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:路径-->
<pram>(字符型 路径)</pram>
<example>
函数原型:|逻辑型 系统.设置路径(字符型 路径)|
函数说明:|设置程序路径|
调用例子:|
系统.设置路径("D:\\")
</example>
</function>

<!--获取系统特殊目录--> 
<function name="获取系统目录">
<!--返回值:执行成功返回当前路径，否则返回0-->
<returntype>字符型</returntype>
<!--参数:空-->
<pram>(整型 类型)</pram>
<example>
函数原型:|字符型 系统.获取系统目录(整型 类型)|
函数说明:|获取系统特殊目录,有0~5六种模式获取6个不同路径,详情见帮助文档|
调用例子:|
字符型 路径=系统.获取系统目录(0)
辅助.消息框(路径)
</example>
</function>

<!--创建注册表项--> 
<function name="注册表创建项">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:模式-->
<pram>(字符型 路径,字符型 名称)</pram>
<example>
函数原型:|逻辑型 系统.注册表创建项(字符型 路径,字符型 名称)|
函数说明:|创建注册表项|
调用例子:|
逻辑型 是否成功=系统.注册表创建项("HKEY_CURRENT_USER\\Software","TC你好")
//在注册表HKEY_CURRENT_USER\Software 路径下创建项,项名称为TC你好
</example>
</function>


<!--创建或修改注册表键值--> 
<function name="注册表创建键值">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:模式-->
<pram>(字符型 路径,字符型 名称,字符型 键值,整型 键值类型)</pram>
<example>
函数原型:|逻辑型 系统.注册表创建键值(字符型 路径,字符型 名称,字符型 键值,整型 键值类型)|
函数说明:|创建,修改注册表键值,如果键值不存在则创建,存在则修改|
调用例子:|
逻辑型 是否成功=系统.注册表创建键值("HKEY_CURRENT_USER\\Software\\TC你好","TC很好","这里是键值的内容",0)
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下创建键值,键名为"TC很好",键值内容为"这里是键值的内容"
</example>
</function>

<!--获取注册表键名对应的键值,并返回--> 
<function name="注册表获取键值">
<!--返回值:键值-->
<returntype>字符型</returntype>
<!--参数:模式-->
<pram>(字符型 路径,字符型 名称)</pram>
<example>
函数原型:|字符型 系统.注册表获取键值(字符型 路径,字符型 名称)|
函数说明:|获取注册表键名对应的键值,并返回|
调用例子:|
字符型 ret|
ret=系统.注册表获取键值("HKEY_CURRENT_USER\\Software\\TC你好","TC很好")
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下查找键名为"TC很好"的键值,并返回键值
辅助.消息框(ret)
</example>
</function>

<!--删除注册表项或键值--> 
<function name="注册表删除">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:模式-->
<pram>(字符型 路径,字符型 名称,整型 类型)</pram>
<example>
函数原型:|逻辑型 系统.注册表删除(字符型 路径,字符型 名称,整型 类型)|
函数说明:|删除注册表项或键值|
调用例子:|
逻辑型 是否成功=系统.注册表删除("HKEY_CURRENT_USER\\Software","TC你好",0)|
//在注册表HKEY_CURRENT_USER\Software 路径下删除项TC你好,模式0为删除项,1为删除键值
</example>
</function>

<!--枚举-->
<function name="枚举">
<!--返回值:返回枚举到的类型值-->
<returntype>字符型</returntype>
<!--参数:窗口名-->
<pram>(字符型 名称,整型 类型)</pram>
<example>
函数原型:|字符型 系统.枚举(字符型 名称,整型 类型)|
函数说明:|根据类型枚举需要的类型,返回枚举后的结果,未找到返回空字符,类型:0:窗口名枚举窗口句柄,1:类名枚举窗口句柄,2:进程名枚举进程句柄,3:父窗口句柄枚举子窗口句柄(参数1为空串"",将以桌面句柄为父窗口句柄)|
调用例子:|
字符型 返回值=系统.枚举("计算器",0)
辅助.消息框(返回值)
</example>
</function>

<!--定时关机-->
<function name="关机">
<!--返回值:返回离关机还差的时间(秒)-->
<returntype>整型</returntype>
<!--参数:sec 具体的几秒后关机-->
<pram>(整型 秒)</pram>
<!--举列:辅助.关机(60)-->
<example>
函数原型:|整型 关机(整型 秒)|
函数说明:|设定几秒后关机|
调用例子:|
系统.关机(60)
</example>
</function>

</namespace>



<!-- 线程的支持函数--> 
<namespace name="线程">

<!-- 线程的开启函数--> 
<function name="开启">
<returntype>整型</returntype> 
<!--参数:线程启动函数-->
<pram>(字符型 线程启动函数,字符型 线程传参)</pram> 
<example>
函数原型:|整型 线程.开启(字符型 线程启动函数,字符型 线程传参)|
函数说明:|线程的开启函数,并将第二参数作为参数传给被调用的函数|
调用列子:|
//先定义一个函数 线程方法
功能 整型 线程方法(字符型 参数) //这里接收线程开启时传入的参数
辅助.消息框("这个是一个线程执行方法 "+ 参数)
返回 0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 逻辑型 开始_点击()
整型 线程句柄=线程.开启("我的程序.线程方法","我是参数")
返回 真
功能结束
</example>
</function>


<!-- 线程的开启函数--> 
<function name="扩展开启">
<returntype>整型</returntype> 
<!--参数:线程启动函数-->
<pram>(字符型 线程启动函数,字符型 开启参数,字符型 线程销毁函数,字符型 销毁参数)</pram> 
<example>
函数原型:|整型 线程.扩展开启(字符型 线程启动函数,字符型 开启参数,字符型 线程销毁函数,字符型 销毁参数)|
函数说明:|线程的扩展开启函数|
调用列子:|
//先定义一个函数 线程方法
功能 整型 线程方法(字符型 参数) //这里接收线程开启时传入的参数
辅助.消息框("这个是一个线程执行方法 "+ 参数)
返回 0
功能结束
//先定义一个函数 销毁操作
功能 整型 销毁操作(字符型 参数) //这里接收线程销毁时传入的参数
辅助.消息框("这里执行线程结束的时候要执行的销毁操作 "+ 参数)
返回 0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 逻辑型 开始_点击()
整型 线程句柄=线程.扩展开启("我的程序.线程方法","我是参数A","我的程序.销毁操作","我是参数B")
返回 真
功能结束
</example>
</function>

<!-- 线程的关闭函数--> 
<function name="关闭">
<returntype>逻辑型</returntype> 
<!--参数:线程句柄-->
<pram>(整型 线程句柄)</pram> 
<example>
函数原型:|逻辑型 线程.关闭(整型 线程句柄)|
函数说明:|线程关闭|
调用列子:|
//先定义一个函数 线程方法
功能 整型 线程方法()
辅助.消息框("这个是一个线程执行方法")
返回 0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 逻辑型 开始_点击()
整型 线程句柄=线程.开启("我的程序.线程方法","")
辅助.等待(2000)
线程.关闭(线程句柄)
返回 真
功能结束
</example>
</function>

<!--单线程的等待-->
<function name="等待">
<!--返回值:返回执行状态的整形-->
<returntype>整型</returntype> 
<!--参数:线程句柄,等待秒数-->
<pram>(整型 线程句柄,整型 等待秒数)</pram> 
<example>
函数原型:|整型 线程.等待(整型 线程句柄,整型 等待秒数)|
函数说明:|线程等待,第二参数小于等于0 时为无限等待模式|
调用列子:|
//先定义一个函数 线程方法
功能  整型 线程方法()
辅助.消息框("这里是一个线程的执行方法")
返回 0
功能结束|
//在这里调用线程方法函数并写入线程等待功能
功能 整型 开始执行()
整型 线程句柄
线程句柄=线程.开启("我的程序.线程方法","")
如果(线程句柄==0)
辅助.消息框("线程开启失败")
如果结束
辅助.等待(2000)
整型 等待
等待=线程.等待(线程句柄,10)
如果(等待==0)
辅助.消息框("等待成功")
如果结束
如果(等待==-1)
辅助.消息框("等待失败")
如果结束
返回  0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 逻辑型 开始_点击()
我的程序.开始执行()
返回 真
功能结束
</example>
</function>

<!--关闭句柄-->
<function name="关闭句柄">
<!--返回值:句柄-->
<returntype>逻辑型</returntype>
<!--参数:句柄-->
<pram>(整型 句柄)</pram>
<example>
函数原型:|逻辑型 线程.关闭句柄(整型 句柄)|
函数说明:|通过句柄,关闭内核对象,释放资源|
调用例子:|
整型 句柄//一般定义成全局句柄
句柄=线程.创建事件(假,真,"新的事件")//设置事件为手动模式,初始时事件可用
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--线程暂停-->
<function name="暂停">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype> 
<!--参数:线程句柄-->
<pram>(整型 线程句柄)</pram> 
<example>
函数原型:|逻辑型 线程.暂停(整型 线程句柄)|
函数说明:|线程暂停|
调用列子:|
//先定义一个函数 线程方法
功能  整型  线程方法()
辅助.消息框("这里是一个线程的执行方法")
返回  0
功能结束|
//在这里调用线程方法函数并写入线程暂停--恢复等功能
功能  整型  开始执行()
整型 线程句柄
逻辑型 是否成功
逻辑型 是否成功2
线程句柄=线程.开启("我的程序.线程方法","")
如果(线程句柄==0)
辅助.消息框("线程开启失败")
否则
辅助.等待(2000)
是否成功2=线程.暂停(线程句柄)
如果(是否成功2)
辅助.消息框("线程暂停")
如果结束
辅助.等待(2000)
是否成功2=线程.恢复(线程句柄)
如果(是否成功2)
辅助.消息框("线程恢复")
如果结束
如果结束
返回  0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 逻辑型 开始_点击()
我的程序.开始执行()
返回 真
</example>
</function>

<!--线程恢复-->
<function name="恢复">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype> 
<!--参数: 线程句柄-->
<pram>(整型  线程句柄)</pram> 
<example>
函数原型:|逻辑型 线程.恢复(整型 线程句柄)|
函数说明:|线程恢复|
调用列子:|
//先定义一个函数 线程方法
功能  整型  线程方法()
辅助.消息框("这里是一个线程的执行方法")
返回  0
功能结束|
//在这里调用线程方法函数并写入线程暂停--恢复等功能
功能  整型  开始执行()
整型 线程句柄
逻辑型 是否成功
逻辑型 是否成功2
线程句柄=线程.开启("我的程序.线程方法","")
如果(线程句柄==0)
辅助.消息框("线程开启失败")
否则
辅助.等待(2000)
是否成功2=线程.暂停(线程句柄)
如果(是否成功2)
辅助.消息框("线程暂停")
如果结束
辅助.等待(2000)
是否成功2=线程.恢复(线程句柄)
如果(是否成功2)
辅助.消息框("线程恢复")
如果结束
如果结束
返回  0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 逻辑型 开始_点击()
我的程序.开始执行()
返回 真
</example>
</function>

<!--创建临界区对象-->
<function name="创建临界区">
<!--返回值:临界区对象句柄-->
<returntype>整型</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|整型 线程.创建临界区()|
函数说明:|创建临界区对象|
调用例子:|
整型 对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>

<!--进入临界区-->
<function name="进入临界区">
<!--返回值:true-->
<returntype>逻辑型</returntype>
<!--参数:句柄-->
<pram>(整型 对象句柄)</pram>
<example>
函数原型:|逻辑型 线程.进入临界区(整型 对象句柄)|
函数说明:|进入临界区,使临界区处于占用状态,让其他想进入临界区的线程挂起等待,直到离开临界区其他线程才能进入|
调用例子:|
整型 对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>

<!--离开临界区-->
<function name="离开临界区">
<!--返回值:true-->
<returntype>逻辑型</returntype>
<!--参数:句柄-->
<pram>(整型 对象句柄)</pram>
<example>
函数原型:|逻辑型 线程.离开临界区(整型 对象句柄)|
函数说明:|离开临界区,使临界区处于空闲状态|
调用例子:|
整型 对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>

<!--删除临界区对象-->
<function name="删除临界区">
<!--返回值:临界区对象句柄-->
<returntype>逻辑型</returntype>
<!--参数:句柄-->
<pram>(整型 对象句柄)</pram>
<example>
函数原型:|逻辑型 线程.删除临界区()|
函数说明:|删除临界区对象|
调用例子:|
整型 对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>


<!--创建事件-->
<function name="创建事件">
<!--返回值:句柄-->
<returntype>整型</returntype>
<!--参数:句柄-->
<pram>(逻辑型 事件自动重置,逻辑型 事件初始状态,字符型 事件名="")</pram>
<example>
函数原型:|整型 线程.创建事件(逻辑型 事件自动重置,逻辑型 事件初始状态,字符型 事件名="")|
函数说明:|创建并返回一个事件对象句柄|
调用例子:|
整型 句柄//一般定义成全局句柄
句柄=线程.创建事件(假,真,"新的事件")//设置事件为手动模式,初始时事件可用
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--设置事件-->
<function name="设置事件">
<!--返回值:句柄-->
<returntype>整型</returntype>
<!--参数:句柄-->
<pram>(整型 句柄)</pram>
<example>
函数原型:|逻辑型 线程.设置事件(整型 句柄)|
函数说明:|设置事件对象可用|
调用例子:|
整型 句柄//一般定义成全局句柄
句柄=线程.创建事件(假,真,"新的事件")//设置事件为手动模式,初始时事件可用
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--打开事件-->
<function name="打开事件">
<!--返回值:句柄-->
<returntype>整型</returntype>
<!--参数:句柄-->
<pram>(字符型 事件名)</pram>
<example>
函数原型:|整型 线程.打开事件(字符型 事件名)|
函数说明:|通过事件名打开事件,事件须存在,可以跨进程打开别的进程中创建的事件|
调用例子:|
整型 句柄//一般定义成全局句柄 程序A中定义
句柄=线程.创建事件(假,真,"新的事件")//设置事件为手动模式,初始时事件可用

整型 打开句柄 //程序B中定义 打开程序A中定义的事件
打开句柄=线程.打开事件("新的事件")
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--获得当前句柄-->
<function name="获得当前句柄">
<!--返回值:句柄-->
<returntype>整型</returntype>
<!--参数:句柄-->
<pram>()</pram>
<example>
函数原型:|整型 线程.获得当前句柄()|
函数说明:|获得当前线程句柄|
调用例子:|
整型 句柄=线程.获得当前句柄()
</example>
</function>

</namespace>



<!--数学命名空间(中文)-->
<namespace name="数学">
<!--开方-->
<function name="开方">
<!--返回值:开方的结果-->
<returntype>浮点型</returntype>
<!--参数:需要开方的数-->
<pram>(浮点型 开方数)</pram>
<example>
函数原型:|浮点型 数学.开方(浮点型 开方数)|
函数说明:|开方|
调用例子:|
浮点型 开方数=数学.开方(9.0)
</example>
</function>

<!--求整型绝对值-->
<function name="绝对值">
<!--返回值:绝对值的结果-->
<returntype>整型</returntype>
<!--参数:需要求绝对值的数-->
<pram>(整型 原数)</pram>
<example>
函数原型:|整型 数学.绝对值(整型 原数)|
函数说明:|求绝对值|
调用例子:|
整型 dword=数学.绝对值(-1)
</example>
</function>


<!--求正弦值-->
<function name="正弦值">
<!--返回值:正弦值的结果-->
<returntype>浮点型</returntype>
<!--参数:需要求角度数的正弦值-->
<pram>(浮点型 角度数)</pram>
<example>
函数原型:|浮点型 数学.正弦值(浮点型 角度数)|
函数说明:|求正弦值|
调用例子:|
浮点型 dword=数学.正弦值(55.5)
</example>
</function>

<!--求余弦值-->
<function name="余弦值">
<!--返回值:余弦值的结果-->
<returntype>浮点型</returntype>
<!--参数:需要求角度数的余弦值-->
<pram>(浮点型 角度数)</pram>
<example>
函数原型:|浮点型 数学.余弦值(浮点型 角度数)|
函数说明:|求余弦值|
调用例子:|
浮点型 dword=数学.余弦值(55.5)
</example>
</function>


<!--求正切值-->
<function name="正切值">
<!--返回值:正切值的结果-->
<returntype>浮点型</returntype>
<!--参数:需要求角度数的正切值-->
<pram>(浮点型 角度数)</pram>
<example>
函数原型:|浮点型 数学.正切值(浮点型 角度数)|
函数说明:|求正切值|
调用例子:|
浮点型 dword=数学.正切值(55.5)
</example>
</function>

<!--求反正弦值-->
<function name="反正弦值">
<!--返回值:反正弦值的结果-->
<returntype>浮点型</returntype>
<!--参数:需要求角度数的反正弦值-->
<pram>(浮点型 角度数)</pram>
<example>
函数原型:|浮点型 数学.反正弦值(浮点型 角度数)|
函数说明:|求反正弦值|
调用例子:|
浮点型 dword=数学.反正弦值(0.5)
</example>
</function>

<!--求反余弦值-->
<function name="反余弦值">
<!--返回值:反余弦值的结果-->
<returntype>浮点型</returntype>
<!--参数:需要求角度数的反余弦值-->
<pram>(浮点型 角度数)</pram>
<example>
函数原型:|浮点型 数学.反余弦值(浮点型 角度数)|
函数说明:|求反余弦值|
调用例子:|
浮点型 dword=数学.反余弦值(0.5)
</example>
</function>


<!--求反正切值-->
<function name="反正切值">
<!--返回值:正切值的结果-->
<returntype>浮点型</returntype>
<!--参数:需要求角度数的反正切值-->
<pram>(浮点型 角度数)</pram>
<example>
函数原型:|浮点型 数学.反正切值(浮点型 角度数)|
函数说明:|求反正切值|
调用例子:|
浮点型 dword=数学.反正切值(0.5)
</example>
</function>

<!--求浮点型绝对值-->
<function name="浮点绝对值">
<!--返回值:绝对值的结果-->
<returntype>浮点型</returntype>
<!--参数:需要求绝对值的数-->
<pram>(浮点型 原数)</pram>
<example>
函数原型:|浮点型 数学.浮点绝对值(浮点型 原数)|
函数说明:|求绝对值|
调用例子:|
浮点型 dword=数学.浮点绝对值(-1.0)
</example>
</function>

</namespace>



<!--超级鼠标空间(中文)-->
<namespace name="超级鼠标">

<!--超级鼠标移动坐标-->
<function name="移动">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:x 鼠标绝对坐标X,y 鼠标绝对坐标Y-->
<pram>(整型 x坐标,整型 y坐标)</pram>
<example>
函数原型:|逻辑型 超级鼠标.移动(整型 x坐标,整型 y坐标)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|超级鼠标.移动(100,200)
</example>
</function>


<!--鼠标左键按下-->
<function name="左键按下">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|逻辑型 超级鼠标.左键按下()|
函数说明:|左键按下|
调用例子:|
超级鼠标.左键按下()
</example>
</function>


<!--鼠标右键按下-->
<function name="右键按下">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|逻辑型 超级鼠标.右键按下()|
函数说明:|右键按下|
调用例子:|
超级鼠标.右键按下()
</example>
</function>


<!--鼠标中间键按下-->
<function name="中键按下">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|逻辑型 超级鼠标.中键按下()|
函数说明:|中键按下|
调用例子:|
超级鼠标.中键按下()
</example>
</function>


<!--鼠标左键弹起-->
<function name="左键弹起">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|逻辑型 超级鼠标.左键弹起()|
函数说明:|左键弹起|
调用例子:|
超级鼠标.左键弹起()
</example>
</function>


<!--鼠标右键弹起-->
<function name="右键弹起">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|逻辑型 超级鼠标.右键弹起()|
函数说明:|右键弹起|
调用例子:|
超级鼠标.右键弹起()
</example>
</function>


<!--鼠标中间键弹起-->
<function name="中键弹起">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|逻辑型 超级鼠标.中键弹起()|
函数说明:|中键弹起|
调用例子:|
超级鼠标.中键弹起()
</example>
</function>


<!--超级鼠标左键单击-->
<function name="左键单击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:单击次数 鼠标左键单击的次数-->
<pram>(整型 单击次数)</pram>
<example>
函数原型:|逻辑型 超级鼠标.左键单击(整型 单击次数)|
函数说明:|鼠标左键单击|
调用例子:|超级鼠标.左键单击(10)
</example>
</function>

<!--超级鼠标右键单击-->
<function name="右键单击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:单击次数 鼠标右键单击次数-->
<pram>(整型 单击次数)</pram>
<example>
函数原型:|逻辑型 超级鼠标.右键单击(整型 单击次数)|
函数说明:|鼠标右键单击|
调用例子:|超级鼠标.右键单击(10)
</example>
</function>


<!--超级鼠标中键单击-->
<function name="中键单击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:单击次数 鼠标单击次数-->
<pram>(整型 单击次数)</pram>
<example>
函数原型:|逻辑型 超级鼠标.中键单击(整型 单击次数)|
函数说明:|鼠标中键单击|
调用例子:|超级鼠标.中键单击(10)
</example>
</function>

<!--超级鼠标左键双击-->
<function name="左键双击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:双击次数 鼠标左键双击的次数-->
<pram>(整型 双击次数)</pram>
<example>
函数原型:|逻辑型 超级鼠标.左键双击(整型 双击次数)|
函数说明:|鼠标左键双击|
调用例子:|超级鼠标.左键双击(10)
</example>
</function>

<!--超级鼠标右键双击-->
<function name="右键双击">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:双击次数 鼠标右键双击的次数-->
<pram>(整型 双击次数)</pram>
<example>
函数原型:|逻辑型 超级鼠标.右键双击(整型 双击次数)|
函数说明:|鼠标右键双击|
调用例子:|超级鼠标.右键双击(10)
</example>
</function>

<!--鼠标移动相对坐标-->
<function name="相对移动">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:x 鼠标相对坐标X,y 鼠标相对坐标Y-->
<pram>(整型 x相对坐标,整型 y相对坐标)</pram>
<example>
函数原型:|逻辑型 超级鼠标.相对移动(整型 x坐标,整型 y坐标)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|超级鼠标.相对移动(100,200)
</example>
</function>

</namespace>



<!--超级键盘空间(中文)-->
<namespace name="超级键盘">
<!--键盘按下-->
<function name="按下">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:要模拟按下的键码（注：如是模拟按键的键位是字母，请输入字母的大小）-->
<pram>(整型 要模拟按下的键码)</pram>
<example>
函数原型:|逻辑型 超级键盘.按下(整型 要模拟按下的键码)|
函数说明:|以超级模式模拟按键，按下|
调用例子:|
超级键盘.按下(32)
</example>
</function>

<!--键盘弹起-->
<function name="弹起">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数: 要模拟键盘弹起的键码（注：如是模拟按键的键位是字母，请输入字母的大小）-->
<pram>(整型 要模拟键盘弹起的键码)</pram>
<example>
函数原型:|逻辑型 超级键盘.弹起(整型 要模拟键盘弹起的键码)|
函数说明:|以超级模式模拟按键，弹起|
调用例子:|
超级键盘.弹起(32)
</example>
</function>

<!--键盘:按键-->
<function name="按键">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数:键码, 按键的次数-->
<pram>(整型 键码,整型 按键的次数)</pram>
<example>
函数原型:|逻辑型 超级键盘.按键(整型 键码,整型 弹起的次数)|
函数说明:|以超级模式模拟按键，按键|
调用例子:|
超级键盘.按键(65,10)
</example>
</function>

<!--模拟字符串-->
<function name="发送字符串">
<!--返回值:函数执行成功,返回真-->
<returntype>逻辑型</returntype>
<!--参数: 要模拟键盘输入的字符串-->
<pram>(字符型 要模拟键盘输入的字符串,整型 发送延时=50)</pram>
<example>
函数原型:|逻辑型 超级键盘.发送字符串(字符型 要模拟键盘输入的字符串,整型 发送延时=50)|
函数说明:|以超级模式模拟按键，发送字符串|
调用例子:|
超级键盘.发送字符串("abcd")
</example>
</function>

</namespace>


<!--会员(中文)-->
<namespace name="会员">
	
<!--验证注册码-->
<function name="验证注册码">
<!--返回值:大于0，表示返回这个注册码的剩余小时时间。返回值小于0，是相应的错误信息。-->
<returntype>整型</returntype>
<!--参数:用户名 注册码-->
<pram>(字符型 注册码账号,字符型 注册码,字符型 项目名,字符型 返回信息)</pram>
<example>
函数原型:|整型 会员.验证注册码(字符型 注册码账号,字符型 注册码,字符型 项目名,字符型 返回信息)|
函数说明:|验证注册码有效期,如注册码与账号均有效,将注册码与账号绑定,并返回一个整型值,该值大于0表示注册码有效期(单位小时),小于0为错误信息,错误信息详情见帮助文档,(注:该功能会员登陆可用)|
调用例子:|
字符型 返回信息
会员.验证注册码("注册码账号","VVWR4ZXYVI820YK7UTN7LFS082","自动任务",返回信息)
//注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
辅助.消息框(返回信息)
</example>
</function>

<!--解绑注册码-->
<function name="解绑注册码">
<!--返回值:真 或 假-->
<returntype>逻辑型</returntype>
<!--参数:用户名 注册码-->
<pram>(字符型 注册码账号,字符型 注册码)</pram>
<example>
函数原型:|逻辑型 会员.解绑注册码(字符型 注册码账号,字符型 注册码)|
函数说明:|注册码解绑(注:该功能会员登陆可用)|
调用例子:|
会员.解绑注册码("注册码账号","VVWR4ZXYVI820YK7UTN7LFS082")
//注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
</example>
</function>

<!--aes加密--> 
<function name="aes加密">
<!--返回值:加密后字串-->
<returntype>字符型</returntype>
<!--参数:源数据,密钥-->
<pram>(字符型 源数据,字符型 密钥)</pram>
<example>
函数原型:|字符型 会员.aes加密(字符型 源数据,字符型 密钥)|
函数说明:|通过AES加密算法加密传入源数据字串,密钥为自定义,解密需要用到(注:该功能vip会员登陆可用)|
调用例子:|
字符型 加密字串,源数据="TChello",密钥="qwer",解密后数据
加密字串=会员.aes加密(源数据,密钥)
辅助.消息框(加密字串)
解密后数据=会员.aes解密(加密字串,密钥)
辅助.消息框(解密后数据) //成功解密输出"TChello"
</example>
</function>

<!--aes解密--> 
<function name="aes解密">
<!--返回值:解密后字串-->
<returntype>字符型</returntype>
<!--参数:源数据,密钥-->
<pram>(字符型 源数据,字符型 密钥)</pram>
<example>
函数原型:|字符型 会员.aes解密(字符型 源数据,字符型 密钥)|
函数说明:|通过AES解密算法解密数据,需要用于加密的密钥(注:该功能vip会员登陆可用)|
调用例子:|
字符型 加密字串,源数据="TChello",密钥="qwer",解密后数据
加密字串=会员.aes加密(源数据,密钥)
辅助.消息框(加密字串)
解密后数据=会员.aes解密(加密字串,密钥)
辅助.消息框(解密后数据) //成功解密输出"TChello"
</example>
</function>

<!--md5加密--> 
<function name="md5">
<!--返回值:加密后字串-->
<returntype>字符型</returntype>
<!--参数:源数据-->
<pram>(字符型 源数据)</pram>
<example>
函数原型:|字符型 会员.md5(字符型 源数据)|
函数说明:|通过MD5加密算法加密传入源数据字串,该加密算法无解密算法(注:该功能vip会员登陆可用)|
调用例子:|
字符型 加密字串,源数据="TChello"
加密字串=会员.md5(源数据)
辅助.消息框(加密字串)
</example>
</function>

<!--邮件--> 
<function name="邮件">
<!--返回值:真或假-->
<returntype>逻辑型</returntype>
<!--参数:(发件人邮箱,收件人邮箱,标题,内容-->
<pram>(字符型 发件人邮箱,字符型 收件人邮箱,字符型 标题,字符型 内容)</pram>
<example>
函数原型:|逻辑型 会员.邮件(字符型 发件人邮箱,字符型 收件人邮箱,字符型 标题,字符型 内容)|
函数说明:|发送邮件(注:该功能vip会员登陆可用)|
调用例子:|
会员.邮件("test1@tc.com","test2@tc.com","测试","这是一封测试邮件")
</example>
</function>

<!--数据库--> 
<function name="数据库">
<!--返回值:错误代码-->
<returntype>整型</returntype>
<!--参数:(连接字串,SQL语句,模式,查询项,返回二维数组-->
<pram>(字符型 连接字串,字符型 SQL语句,整型 返回影响行数,字符型[][] 返回的表,字符型 返回错误信息)</pram>
<example>
函数原型:|整型 会员.数据库(字符型 连接字串,字符型 SQL语句,整型 返回影响行数,字符型[][] 返回的表,字符型 返回错误信息)|
函数说明:|连接数据库,执行一条SQL语句,支持ACCESS,MSSQL,MYSQL(注:该功能vip会员登陆可用)|
调用例子:|
字符型 连接字串="Driver=SQL SERVER;Server=127.0.0.1,1731;Database=mymssql;UID=sa;PWD="  //登陆语句,不同类型数据库略有不同,请根据自己数据库实际情况填写
字符型 SQL语句="SELECT  name, old, id ,data FROM mymssql.dbo.users"  //sql语句 每种数据库略有不同
字符型 返回错误信息
字符型[][] 返回的表
整型 返回影响行数
会员.数据库(连接字串,SQL语句,返回影响行数,返回的表,返回错误信息)
</example>
</function>

<!--文件加密--> 
<function name="文件加密">
<!--返回值:加密后字串-->
<returntype>逻辑型</returntype>
<!--参数:源数据,密钥-->
<pram>(字符型 要加密文件路径,字符型 加密后文件路径,字符型 密钥)</pram>
<example>
函数原型:|逻辑型 会员.文件加密(字符型 要加密文件路径,字符型 加密后文件路径,字符型 密钥)|
函数说明:|通过密钥,加密指定文件,并保存加密后文件到指定目录(注:该功能vip会员登陆可用)|
调用例子:|
会员.文件加密("D:\\源文件.txt","D:\\加密后文件.txt","123")
会员.文件解密("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
</example>
</function>

<!--文件解密--> 
<function name="文件解密">
<!--返回值:加密后字串-->
<returntype>逻辑型</returntype>
<!--参数:源数据,密钥-->
<pram>(字符型 加密后文件路径,字符型 解密后文件路径,字符型 密钥)</pram>
<example>
函数原型:|逻辑型 会员.文件解密(字符型 加密后文件路径,字符型 解密后文件路径,字符型 密钥)|
函数说明:|通过密钥,解密指定文件,并保存解密后文件到指定目录(注:该功能vip会员登陆可用)|
调用例子:|
会员.文件加密("D:\\源文件.txt","D:\\加密后文件.txt","123")
会员.文件解密("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
</example>
</function>

</namespace>

</dll>

<dll name="控件列表" path="matchDll.dll">

<!--控件空间(中文)-->
<namespace name="标签">
<!--得到标签的文本-->
<function name="获得文本">
<!--返回值:得到标签的文本-->
<returntype>字符型</returntype>
<!--参数:名称 标签名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 标签.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定标签的文本|
调用例子:|标签.获得文本("标签0")
</example>
</function>

<!--设置标签的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 标签名称,内容 标签内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 标签.设置文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定标签的内容|
调用例子:|标签.设置文本("标签0","标签内容")
</example>
</function>
</namespace>



<!--控件空间(中文)-->
<namespace name="编辑框">
<!--得到编辑框的文本-->
<function name="获得文本">
<!--返回值:得到编辑框的文本-->
<returntype>字符型</returntype>
<!--参数:名称 编辑框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 编辑框.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定编辑框的文本|
调用例子:|编辑框.获得文本("编辑框0")
</example>
</function>


<!--设置编辑框的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 编辑框名称,内容 标签内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 编辑框.设置文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定编辑框的内容|
调用例子:|编辑框.设置文本("编辑框0","内容")
</example>
</function>

</namespace>

<!--控件空间(中文)-->
<namespace name="单选框">
<!--得到单选框的文本-->
<function name="获得文本">
<!--返回值:得到单选框的文本-->
<returntype>字符型</returntype>
<!--参数:名称 标签名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 单选框.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定单选框的文本|
调用例子:|字符型 内容=单选框.获得文本("单选框0")
</example>
</function>

<!--得到单选框的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 单选框名称,内容 标签内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 单选框.设置文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定单选框的内容|
调用例子:|单选框.设置文本("单选框0","单选框内容")
</example>
</function>

<!--得到单选框的选中状态-->
<function name="获得状态">
<!--返回值:选中返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 单选框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 单选框.获得状态(字符型 名称,字符型 父窗口名称="")|
函数说明:|得到指定单选框的选中状态|
调用例子:|单选框.获得状态("单选框0")
</example>
</function>

<!--设置单选框的选中状态-->
<function name="选中">
<!--返回值:选中返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 单选框名称,状态 是否选中-->
<pram>(字符型 名称,逻辑型 选中,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 单选框.选中(字符型 名称,逻辑型 选中,字符型 父窗口名称="")|
函数说明:|设置指定单选框的选中状态|
调用例子:|单选框.选中("单选框0",真)
</example>
</function>

</namespace>

<!--复选框 命名空间-->
<namespace name="复选框">
<!--得到复选框的文本-->
<function name="获得文本">
<!--返回值:得到复选框的文本-->
<returntype>字符型</returntype>
<!--参数:名称 标签名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 复选框.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定复选框的文本|
调用例子:|字符型 内容=复选框.获得文本("复选框0")
</example>
</function>
<!--得到复选框的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 复选框名称,内容 标签内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 复选框.设置文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定复选框的内容|
调用例子:|复选框.设置文本("复选框0","复选框内容")
</example>
</function>
<!--得到复选框的选中状态-->
<function name="获得状态">
<!--返回值:选中返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 复选框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 复选框.获得状态(字符型 名称,字符型 父窗口名称="")|
函数说明:|得到指定复选框的状态|
调用例子:|复选框.获得状态("复选框0")
</example>
</function>
<!--设置复选框的选中状态-->
<function name="选中">
<!--返回值:选中返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 复选框名称,状态 是否选中-->
<pram>(字符型 名称,逻辑型 选中,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 复选框.选中(字符型 名称,逻辑型 选中,字符型 父窗口名称="")|
函数说明:|设置指定复选框的选中状态|
调用例子:|复选框.选中("复选框0",真)
</example>
</function>
</namespace>

<!--浏览框按钮 命名空间-->
<namespace name="浏览框">
<!--得到浏览框的文本-->
<function name="获得">
<!--返回值:得到浏览框的文本-->
<returntype>字符型</returntype>
<!--参数:名称 浏览框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 浏览框.获得(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定浏览框的文本|
调用例子:|字符型 内容=浏览框.获得("浏览框0")
</example>
</function>
<!--设置浏览框的内容-->
<function name="设置">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 浏览框名称,内容浏览框内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 浏览框.设置(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定浏览框的内容|
调用例子:|浏览框.设置("浏览框0","浏览框内容")
</example>
</function>
</namespace>

<!--下拉框 命名空间-->
<namespace name="下拉框">
<!--得到指定下拉框当前的选项-->
<function name="得到选项">
<!--返回值:选项的ID号-->
<returntype>整型</returntype>
<!--参数:名称 下拉框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 下拉框.得到选项(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得选中下拉框的编号|
调用例子:|整型 选项=下拉框.得到选项("下拉框0")
</example>
</function>
<!--设置指定下拉框当前的选项-->
<function name="设置选项">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(字符型 名称,整型 选项,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 下拉框.设置选项(字符型 名称,整型 选项,字符型 父窗口名称="")|
函数说明:|设置指定下拉框当前显示内容为下拉列表中的第几项选项|
调用例子:|下拉框.设置选项("下拉框0",1)
</example>
</function>
<!--得到下拉框指定序号的内容-->
<function name="获得内容">
<!--返回值:得到下拉框指定序号的内容-->
<returntype>字符型</returntype>
<!--参数:名称 下拉框名称, 选项编号-->
<pram>(字符型 名称,整型 选项编号,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 下拉框.获得内容(字符型 名称,整型 选项编号,字符型 父窗口名称="")|
函数说明:|得到下拉框指定选项编号的内容|
调用例子:|字符型 内容=下拉框.获得内容("下拉框0",1)
</example>
</function>

<!--得到下拉框选项的个数-->
<function name="得到个数">
<!--返回值:下拉框选项的长度-->
<returntype>整型</returntype>
<!--参数:名称  下拉框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 下拉框.得到个数(字符型 名称,字符型 父窗口名称="")|
函数说明:|得到下拉框的个数|
调用例子:|整型 个数=下拉框.得到个数("下拉框0")
</example>
</function>

<!--清空下拉框的所有内容-->
<function name="清空">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:名称  下拉框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 下拉框.清空(字符型 名称,字符型 父窗口名称="")|
函数说明:|清空下拉框的所有内容|
调用例子:|下拉框.清空("下拉框0")
</example>
</function>

<!--在下拉框最后项增加内容-->
<function name="增加文本">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:名称  下拉框名称 内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 下拉框.增加文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|在下拉框最后项增加内容|
调用例子:|下拉框.增加文本("下拉框0","TC")
</example>
</function>

<!--删除下拉框指定位置的文本内容-->
<function name="删除文本">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:名称  下拉框名称 位置 -->
<pram>(字符型 名称,整型 位置,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 下拉框.删除文本(字符型 名称,整型 位置,字符型 父窗口名称="")|
函数说明:|删除下拉框指定位置的文本内容|
调用例子:|下拉框.删除文本("下拉框0",4)
</example>
</function>

<!--得到下拉框的文本内容-->
<function name="获得文本">
<!--返回值:得到列表框的文本内容-->
<returntype>字符型</returntype>
<!--参数:名称 列表框名称  序号-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 下拉框.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得下拉框当前输入的文本内容|
调用例子:|下拉框.获得文本("下拉框0")
</example>
</function>

</namespace>

<!--分组框控件空间(中文)-->
<namespace name="分组框">
<!--得到分组框的标题文本-->
<function name="获得文本">
<!--返回值:得到控件的标题文本-->
<returntype>字符型</returntype>
<!--参数:名称 分组框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 分组框.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定分组框的标题文本内容|
调用例子:|分组框.获得文本("分组框0")
</example>
</function>

<!--设置分组框的标题-->
<function name="设置文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 分组框名称,标题 分组框内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 分组框.设置文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定分组框的标题文本内容|
调用例子:|分组框.设置文本("分组框0","分组框标题")
</example>
</function>
</namespace>

<!--列表框控件空间(中文)-->
<namespace name="列表框">

<!--得到列表框的文本内容-->
<function name="获得文本">
<!--返回值:得到列表框的文本内容-->
<returntype>字符型</returntype>
<!--参数:名称 列表框名称  序号-->
<pram>(字符型 名称,整型 序号,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 列表框.获得文本(字符型 名称,整型 序号,字符型 父窗口名称="")|
函数说明:|获得指定列表框的文本内容|
调用例子:|列表框.获得文本("列表框0",1)
</example>
</function>


<!--追加列表框的文本内容-->
<function name="增加文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 列表框名称,内容 列表框内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 列表框.增加文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|追加指定列表框的文本内容|
调用例子:|列表框.增加文本("列表框0","李四")
</example>
</function>


<!--得到列表框的选中文本-->
<function name="得到选中文本">
<!--返回值:得到列表框的选中文本-->
<returntype>字符型</returntype>
<!--参数:名称 列表框名称 -->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 列表框.得到选中文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|得到列表框的选中文本|
调用例子:|列表框.得到选中文本("列表框0")
</example>
</function>


<!--得到列表框选中内容的序号-->
<function name="得到选项">
<!--返回值:得到列表框选中内容的序号-->
<returntype>整型</returntype>
<!--参数:名称 列表框名称 -->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 列表框.得到选项(字符型 名称,字符型 父窗口名称="")|
函数说明:|得到列表框选中内容的序号|
调用例子:|整型 序号=列表框.得到选项("列表框0")
</example>
</function>


<!--得到列表框的文本个数-->
<function name="得到个数">
<!--返回值:返回列表框中内容的个数-->
<returntype>整型</returntype>
<!--参数:名称 列表框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 列表框.得到个数(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定列表框的中内容的个数|
调用例子:|列表框.得到个数("列表框0")
</example>
</function>


<!--清空列表框的所有内容-->
<function name="清空">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:名称  列表框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 列表框.清空(字符型 名称,字符型 父窗口名称="")|
函数说明:|清空列表框的所有内容|
调用例子:|列表框.清空("列表框0")
</example>
</function>

<!--删除列表框的指定位置内容-->
<function name="删除文本">
<!--返回值:成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数:名称  列表框名称 位置-->
<pram>(字符型 名称,整型 位置,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 列表框.删除文本(字符型 名称,整型 位置,字符型 父窗口名称="")|
函数说明:|删除列表框的指定位置内容|
调用例子:|列表框.删除文本("列表框0",5)
</example>
</function>

<!--设置指定列表框当前的选项-->
<function name="设置选项">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(字符型 名称,整型 选项,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 列表框.设置选项(字符型 名称,整型 选项,字符型 父窗口名称="")|
函数说明:|设置下拉框当前选中第几项|
调用例子:|列表框.设置选项("列表框0",1)
</example>
</function>

<!--插入文本-->
<function name="插入文本">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,内容,序号-->
<pram>(字符型 名称,字符型 文本,整型 序号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 列表框.插入文本(字符型 名称,字符型 文本,整型 序号,字符型 父窗口名称="")|
函数说明:|指定序号插入文本|
调用例子:|
列表框.插入文本("列表框0","TC简单开发",1)
</example>
</function>

</namespace>




<!--日期框控件空间(中文)-->
<namespace name="日期框">
<!--得到日期框的文本-->
<function name="获得文本">
<!--返回值:得到控件的文本-->
<returntype>字符型</returntype>
<!--参数:名称 日期框名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 日期框.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定日期框的日期文本内容|
调用例子:|日期框.获得文本("日期框0")
</example>
</function>

<!--设置日期框的内容-->
<function name="设置文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 日期框控件名称,标题 日期框内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 日期框.设置文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定日期框控件的文本内容|
调用例子:|日期框.设置文本("日期框0","2011-5-5")
</example>
</function>
</namespace>

<!--图片框控件空间(中文)-->
<namespace name="图片框">
<!--设置图片框控件的图片-->
<function name="设置图片">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 图片框控件名称,图片路径 -->
<pram>(字符型 名称,字符型 路径,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 图片框.设置图片(字符型 名称,字符型 路径,字符型 父窗口名称="")|
函数说明:|设置指定图片框控件的图片|
调用例子:|图片框.设置图片("图片框0","D:\\test.bmp")
</example>
</function>
</namespace>

<!--进度条控件空间(中文)-->
<namespace name="进度条">
<!--得到进度条的进度-->
<function name="获得进度">
<!--返回值:得到进度条的进度-->
<returntype>整型</returntype>
<!--参数:名称进度条名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 进度条.获得进度(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定进度条的进度|
调用例子:|进度条.获得进度("进度条0")
</example>
</function>

<!--设置进度条的进度-->
<function name="设置进度">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 进度条控件名称,进度-->
<pram>(字符型 名称,整型 进度,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 进度条.设置进度(字符型 名称,整型 进度,字符型 父窗口名称="")|
函数说明:|设置指定进度条的进度|
调用例子:|进度条.设置进度("进度条0",10)
//进度的值不能小于0和大于99
</example>
</function>
</namespace>


<!--按钮空间(中文)-->
<namespace name="按钮">
<!--得到标签的文本-->
<function name="获得文本">
<!--返回值:得到按钮的文本-->
<returntype>字符型</returntype>
<!--参数:名称 标签名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 按钮.获得文本(字符型 名称,字符型 父窗口名称="")|
函数说明:|获得指定按钮的文本|
调用例子:|按钮.获得文本("按钮0")
</example>
</function>

<!--设置按钮的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>逻辑型</returntype>
<!--参数:名称 按钮名称,内容 按钮内容-->
<pram>(字符型 名称,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 按钮.设置文本(字符型 名称,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置指定按钮的内容|
调用例子:|按钮.设置文本("按钮0","按钮内容")
</example>
</function>
</namespace>

<!--控件通用空间(中文)-->
<namespace name="控件">
<!--设置控件是否有效-->
<function name="有效">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 控件名称,逻辑型 真假,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 控件.有效(字符型 控件名称,逻辑型 真假,字符型 父窗口名称="")|
函数说明:|设置指定控件是否有效,真为有效,假则为无效|
调用例子:|
控件.有效("按钮0",真)
</example>
</function>

<!--设置控件是否可见-->
<function name="可见">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 控件名称,逻辑型 真假,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 控件.可见(字符型 控件名称,逻辑型 真假,字符型 父窗口名称="")|
函数说明:|设置指定控件是否可见,真为可见,假则为不可见|
调用例子:|
控件.可见("按钮0",真)
</example>
</function>

<!--设置控件位置-->

<function name="设置位置">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 控件名称,整型 x,整型 y,整型 宽度,整型 高度,整型 类型,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 控件.设置位置(字符型 控件名称,整型 x,整型 y,整型 宽度,整型 高度,整型 类型,字符型 父窗口名称="")|
函数说明:|设置控件位置及大小,type:0:设置位置与大小,1:只设置位置(忽略大小参数),2:只设置大小(忽略位置参数)|
调用例子:|
逻辑型 是否移动=控件.设置位置("按钮0",100,200,50,80,1)
</example>
</function>

<!--创建控件-->
<function name="创建">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 控件类型,字符型 控件ID,字符型 文本,整型 x,整型 y,整型 宽度,整型 高度,字符型 属性,字符型 事件,整型  父窗口句柄=0)</pram>
<example>
函数原型:|逻辑型 控件.创建(字符型 控件类型,字符型 控件ID,字符型 文本,整型 x,整型 y,整型 宽度,整型 高度,字符型 属性,字符型 事件,整型  父窗口句柄=0)|
函数说明:|动态创建控件,动态参数较多详细举例见帮助文档
调用例子:|逻辑型 是否成功=控件.创建("标签","标签999","我的控件",10,170,65,28,"背景颜色:14215660","点击:空间名.事件响应函数")
</example>
</function>


<!--打开窗口-->
<function name="打开窗口">
<!--返回值:成功或失败-->
<returntype>整型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 窗口名称,逻辑型 是否可见=真)</pram>
<example>
函数原型:|整型 控件.打开窗口(字符型 窗口名称,逻辑型 是否可见=真)|
函数说明:|打开窗口,返回窗口句柄|
调用例子:|整型 子界面句柄=控件.打开窗口("子界面")

</example>
</function>

<!--关闭窗口-->
<function name="关闭窗口">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 窗口名称,整型 点击类型)</pram>
<example>
函数原型:|逻辑型 控件.关闭窗口(字符型 窗口名称,整型 点击类型)|
函数说明:|关闭窗口,点击类型,模态窗口模式下才用得到:用户自定义的数值(系统保留 0 右上角关闭按钮 -1 已打开,-2 错误的ID,-3 主窗口不能模态创建)|
调用例子:|
//主界面
整型 返回值=控件.模态窗口("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
如果(返回值==1)
//你要执行的操作
如果结束
如果(返回值==2)
//你要执行的操作
如果结束

//子界面
//按钮1
逻辑型 是否成功=控件.关闭窗口("子界面",1)//点击这个按钮会关闭窗口
//按钮2
逻辑型 是否成功=控件.关闭窗口("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--模态窗口-->
<function name="模态窗口">
<!--返回值:成功或失败-->
<returntype>整型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 窗口名称)</pram>
<example>
函数原型:|整型 控件.模态窗口(字符型 窗口名称)|
函数说明:|打开一个模态窗口(模态窗口:指除非采取有效的关闭手段,用户的鼠标焦点或者输入光标将一直停留在其上的对话框),调用该函数后程序会挂起,直到它打开的窗口被关闭|
调用例子:|
//主界面
整型 返回值=控件.模态窗口("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
如果(返回值==1)
//你要执行的操作
如果结束
如果(返回值==2)
//你要执行的操作
如果结束

//子界面
//按钮1
逻辑型 是否成功=控件.关闭窗口("子界面",1)//点击这个按钮会关闭窗口
//按钮2
逻辑型 是否成功=控件.关闭窗口("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--获得句柄-->
<function name="获得句柄">
<!--返回值:成功或失败-->
<returntype>整型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 窗口名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 控件.获得句柄(字符型 窗口名称,字符型 父窗口名称="")|
函数说明:|获得控件句柄|
调用例子:|整型 句柄=控件.获得句柄("标签0")
</example>
</function>

</namespace>

<!--选项卡空间(中文)-->
<namespace name="选项卡">
<!--激活指定的Tab控件-->
<function name="激活">
<!-- 返回值：成功或者失败-->
<returntype>逻辑型</returntype>
<!--参数：选项卡的名称,Tab序号-->
<pram>(字符型 名称,整型 序号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 选项卡.激活(字符型 名称,整型 序号,字符型 父窗口名称="")|
函数说明:|设置指定的选项卡那个Tab页面被激活|
调用例子:|
//激活选项卡0的第2个tab页面
选项卡.激活("选项卡0",1)
</example>
</function>

<!--得到选项卡当前选中选项的索引-->
<function name="得到选项">
<!-- 返回值：成功或者失败-->
<returntype>整型</returntype>
<!--参数：选项卡的名称,Tab序号-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 选项卡.得到选项(字符型 名称,字符型 父窗口名称="")|
函数说明:|得到选项卡当前选中选项的索引|
调用例子:|
整型 索引值=选项卡.得到选项("选项卡0")
辅助.消息框(转换.整型转字符型(索引值))
</example>
</function>

<!--得到选项卡当前分页框个数-->
<function name="得到个数">
<!-- 返回值：成功或者失败-->
<returntype>整型</returntype>
<!--参数：选项卡的名称,Tab序号-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 选项卡.得到个数(字符型 名称,字符型 父窗口名称="")|
函数说明:|得到选项卡当前分页框个数|
调用例子:|
整型 个数=选项卡.得到个数("选项卡0")
辅助.消息框(转换.整型转字符型(个数))
</example>
</function>

<!--获得句柄-->
<function name="获得分页句柄">
<!--返回值:成功或失败-->
<returntype>整型</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(字符型 名称,整型 索引,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 选项卡.获得分页句柄(字符型 名称,整型 索引,字符型 父窗口名称="")|
函数说明:|获得选项卡分页句柄|
调用例子:|整型 句柄=选项卡.获得分页句柄("选项卡0",0) //获得主窗口上"选项卡0"的第一个分页句柄
</example>
</function>

</namespace>

<!--定时器空间(中文)-->
<namespace name="定时器">
<!--注册一个定时器-->
<function name="注册">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称 毫秒时间-->
<pram>(字符型 控件名称,整型 毫秒,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 定时器.注册(字符型 控件名称,整型 毫秒,字符型 父窗口名称="")|
函数说明:|注册一个指定的定时器,每隔多少毫秒执行一次定时器的方法|
调用例子:|
//定时器1每隔1秒执行一次
定时器.注册("定时器0",1000)
</example>
</function>

<!--销毁定时器-->
<function name="销毁">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称-->
<pram>(字符型 控件名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 定时器.销毁(字符型 控件名称,字符型 父窗口名称="")|
函数说明:|销毁一个指定的定时器|
调用例子:|
定时器.销毁("定时器0")
</example>
</function>
</namespace>

<!--热键空间(中文)-->
<namespace name="热键">
<!--注册一个热键-->
<function name="注册">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称 -->
<pram>(字符型 控件名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 热键.注册(字符型 控件名称,字符型 父窗口名称="")|
函数说明:|注册一个指定的热键|
调用例子:|
热键.注册("热键0")
</example>
</function>

<!--销毁热键-->
<function name="销毁">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称-->
<pram>(字符型 控件名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 热键.销毁(字符型 控件名称,字符型 父窗口名称="")|
函数说明:|销毁一个指定的热键|
调用例子:|
热键.销毁("热键0")
</example>
</function>

<!--获得热键-->
<function name="获得">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称-->
<pram>(字符型 控件名称,整型 返回键码,整型 返回热键,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 热键.获得(字符型 控件名称,整型 返回键码,整型 返回功能键,字符型 父窗口名称="")|
函数说明:|获得指定热键当前生效的热键键值组合,键码包括(键盘上一些数字和字母或方向键的按键码),功能键包括(Shift,Ctrl,Alt)
调用例子:|
整型 返回键码,返回功能键
逻辑型 是否成功1=热键.获得("热键0",返回键码,返回功能键)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用热键.设置
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用热键.设置 达到保存用户上次设置热键的效果
逻辑型 是否成功2=热键.设置("热键0",返回键码,返回功能键)
</example>
</function>

<!--设置热键-->
<function name="设置">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称-->
<pram>(字符型 控件名称,整型 键码,整型 热键,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 热键.设置(字符型 控件名称,整型 键码,整型 功能键,字符型 父窗口名称="")|
函数说明:|设置热键
调用例子:|
整型 返回键码,返回功能键
逻辑型 是否成功1=热键.获得("热键0",返回键码,返回功能键)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用热键.设置
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用热键.设置 达到保存用户上次设置热键的效果
逻辑型 是否成功2=热键.设置("热键0",返回键码,返回功能键)
</example>
</function>

</namespace>

<!--滑块空间(中文)-->
<namespace name="滑块">
<!--设置滑块的位置-->
<function name="设置位置">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:名称 控件名称  位置-->
<pram>(字符型 控件名称,整型 位置,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 滑块.设置位置(字符型 控件名称,整型 位置,字符型 父窗口名称="")|
函数说明:|设置滑块的位置|
调用例子:|
滑块.设置位置("滑块0",12)
</example>
</function>

<!--得到滑块的位置-->
<function name="得到位置">
<!--返回值:成功或失败-->
<returntype>整型</returntype>
<!--参数:名称 控件名称 -->
<pram>(字符型 控件名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 滑块.得到位置(字符型 控件名称,字符型 父窗口名称="")|
函数说明:|得到滑块的位置|
调用例子:|
整型 位置=滑块.得到位置("滑块0")
</example>
</function>
</namespace>


<!-- 网页 -->
<namespace name="网页">

<!--打开网页-->
<function name="转到">
<!--返回值:真：成功 假：失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  url 网页链接-->
<pram>(字符型 id,字符型 url,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.转到(字符型 id,字符型 url,字符型 父窗口名称="")|
函数说明:|打开一个URL网页链接|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
</example>
</function>

<!-- 判断网页是否加载完成 -->
<function name="加载完成">
<!--返回值:真：成功 假：失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称 -->
<pram>(字符型 id,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.加载完成(字符型 id,字符型 父窗口名称="")|
函数说明:|判断当前网页是否加载完成|
调用列子:|
网页.加载完成("浏览器0")
</example>
</function>

<!-- 获取当前页的标题 -->
<function name="得到标题">
<!--返回值:字符型 : 标题-->
<returntype>字符型</returntype>
<!--参数: id:  控件名称  -->
<pram>(字符型 id,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 网页.得到标题(字符型 id,字符型 父窗口名称="")|
函数说明:|获取当前页的标题|
调用列子:|
字符型 标题 = 网页.得到标题("浏览器0")
</example>
</function>

<!-- 网页前进 -->
<function name="前进">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称 -->
<pram>(字符型 id,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.前进(字符型 id,字符型 父窗口名称="")|
函数说明:|当前标签页网页前进一步|
调用列子:|
网页.前进("浏览器0")
</example>
</function>

<!-- 网页后退 -->
<function name="后退">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称 -->
<pram>(字符型 id,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.后退(字符型 id,字符型 父窗口名称="")|
函数说明:|当前标签页网页后退一步|
调用列子:|
网页.后退("浏览器0")
</example>
</function>

<!-- 网页刷新 -->
<function name="刷新">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称 -->
<pram>(字符型 id,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.刷新(字符型 id,字符型 父窗口名称="")|
函数说明:|刷新当前的网页|
调用列子:|
网页.刷新("浏览器0")
</example>
</function>

<!-- 鼠标移动消息 -->
<function name="移动">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  x 窗口x坐标  y：窗口y坐标-->
<pram>(字符型 id,整型 x,整型 y,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.移动(字符型 id,整型 x,整型 y,字符型 父窗口名称="")|
函数说明:|向当前标签的网页发送一个鼠标移动消息|
调用列子:|
网页.移动("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键按下 -->
<function name="左键按下">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称   x x坐标 y y坐标 -->
<pram>(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.左键按下(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")|
函数说明:|向当前网页发送一个鼠标左键按下消息|
调用列子:|
网页.左键按下("浏览器0",10,20)
</example>
</function>

<!-- 鼠标左键弹起 -->
<function name="左键弹起">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  x x坐标 y y坐标 -->
<pram>(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.左键弹起(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")|
函数说明:|向当前网页发送一个鼠标左键弹起消息|
调用列子:|
网页.左键弹起("浏览器0",10,20)
</example>
</function>

<!-- 左键单击事件 -->
<function name="左键单击">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称 x x坐标 y y坐标  -->
<pram>(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.左键单击(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")|
函数说明:|向当前的网页发送一个左键单击消息|
调用列子:|
网页.左键单击("浏览器0",10,20)
</example>
</function>

<!-- 鼠标左键双击 -->
<function name="左键双击">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  x x坐标 y y坐标 -->
<pram>(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.左键双击(字符型 id,整型 x坐标,整型 y坐标,字符型 父窗口名称="")|
函数说明:|向当前网页发送一个鼠标左键双击消息|
调用列子:|
网页.左键双击("浏览器0",10,20)
</example>
</function>

<!-- 键盘按下消息 -->
<function name="按下">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  keycode 键码-->
<pram>(字符型 id,整型 keycode,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.按下(字符型 id,整型 keycode,字符型 父窗口名称="")|
函数说明:|向当前的网页发送一个键盘按下消息|
调用列子:|
网页.按下("浏览器0",66)
</example>
</function>

<!-- 键盘弹起消息 -->
<function name="弹起">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  keycode 键码-->
<pram>(字符型 id,整型 keycode,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.弹起(字符型 id,整型 keycode,字符型 父窗口名称="")|
函数说明:|向当前标签的网页发送一个键盘弹起消息|
调用列子:|
网页.弹起("浏览器0",66)
</example>
</function>

<!-- 键盘按键消 -->
<function name="按键">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  keycode 键码-->
<pram>(字符型 id,整型 keycode,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.按键(字符型 id,整型 keycode,字符型 父窗口名称="")|
函数说明:|向当前标签网页发送一个按键消息|
调用列子:|
网页.按键("浏览器0",66)
</example>
</function>

<!--  发送文本内容 -->
<function name="发送字符串">
<!--返回值:逻辑型：true 成功  false 失败-->
<returntype>逻辑型</returntype>
<!--参数:id:  控件名称  keystring 文本消息-->
<pram>(字符型 id,字符型 keystring,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.发送字符串(字符型 id,字符型 keystring,字符型 父窗口名称="")|
函数说明:|向当前标签网页发送字符串文本消息|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
网页.发送字符串("浏览器0","TC简单开发")
</example>
</function>

<!-- 获取网页元素指定属性的信息 -->
<function name="获取元素信息">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>字符型</returntype>
<!-- 参数:id:  控件名称  type:网页元素属性类型 sub:网页元素特征字符串 -->
<pram>(字符型 id,字符型 type,字符型 sub,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 网页.获取元素信息(字符型 id,字符型 type,字符型 sub,字符型 父窗口名称="")|
函数说明:|获取网页元素指定属性的信息,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 frame:框架 text:文本,多个特征用&amp;隔开|
调用列子:|
//详细介绍请查看帮助文档
网页.转到("浏览器0","www.tyuyan.com")
字符型 text=网页.获取元素信息("浏览器0","value","id:su")
辅助.消息框(text)
</example>
</function>

<!-- 点击网页中指定特征的按钮或链接 -->
<function name="点击元素">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>逻辑型</returntype>
<!-- 参数:id:  控件名称  sub:网页元素特征字符串 -->
<pram>(字符型 id,字符型 sub,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.点击元素(字符型 id,字符型 sub,字符型 父窗口名称="")|
函数说明:|点击网页中指定特征的按钮或链接,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
网页.点击元素("浏览器0","id:su")
</example>
</function>

<!-- 向网页中指定特征的文本框输入内容 -->
<function name="输入元素文本">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>逻辑型</returntype>
<!-- 参数:id:  控件名称  text:文本内容  sub:网页元素特征字符串 -->
<pram>(字符型 id,字符型 text,字符型 sub,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.输入元素文本(字符型 id,字符型 text,字符型 sub,字符型 父窗口名称="")|
函数说明:|向网页中指定特征的文本框输入内容,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
网页.输入元素文本("浏览器0","TC简单开发","id:kw")
网页.点击元素("浏览器0","id:su")
</example>
</function>

<!-- 选择网页中的下拉框 -->
<function name="选择元素">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>逻辑型</returntype>
<!-- 参数:id:  控件名称  seltext:需要选中的下拉选项的值  sub:网页元素特征字符串 -->
<pram>(字符型 id,字符型 seltext,字符型 sub,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.选择元素(字符型 id,字符型 seltext,字符型 sub,字符型 父窗口名称="")|
函数说明:|选择网页中的下拉框,支持的特征有 id:标示符 name:名称 tag:标签 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
网页.选择元素("浏览器0","北京","id:省份")
</example>
</function>

<!-- 选择/清除网页中的单选框或复选框 -->
<function name="选中元素">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>逻辑型</returntype>
<!-- 参数:id:  控件名称  ischeck:选中或不选中  sub:网页元素特征字符串 -->
<pram>(字符型 id,逻辑型 ischeck,字符型 sub,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 网页.选中元素(字符型 id,逻辑型 ischeck,字符型 sub,字符型 父窗口名称="")|
函数说明:|选择/清除网页中的单选框或复选框,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
网页.选中元素("浏览器0",真,"id:tc")
</example>
</function>

<!-- 得到当前网页的地址 -->
<function name="得到链接">
<!--返回值:字符串类型 :网页的地址-->
<returntype>字符型</returntype>
<!-- 参数:id:  控件名称   -->
<pram>(字符型 id,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 网页.得到链接(字符型 id,字符型 父窗口名称="")|
函数说明:|得到当前网页的地址|
调用列子:|
字符型 url = 网页.得到链接("浏览器0")|
辅助.消息框(url)
</example>
</function>

<!-- 得到当前网页的句柄 -->
<function name="得到窗口句柄">
<!--返回值:整型 窗口句柄-->
<returntype>整型</returntype>
<!-- 参数:id:  控件名称   -->
<pram>(字符型 id,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 网页.得到窗口句柄(字符型 id,字符型 父窗口名称="")|
函数说明:|得到当前网页的句柄|
调用列子:|
整型 句柄 = 网页.得到窗口句柄("浏览器0")
</example>
</function>

<!-- 删除IE临时文件 -->
<function name="删除临时文件">
<!--返回值:真：成功   假：失败-->
<returntype>逻辑型</returntype>
<!-- 参数:  -->
<pram>()</pram>
<example>
函数原型:|逻辑型 网页.删除临时文件()|
函数说明:|删除IE临时文件|
调用列子:|
网页.删除临时文件()
</example>
</function>

<!-- 删除IE的Cookie -->
<function name="删除cookie">
<!--返回值:真：成功   假：失败-->
<returntype>逻辑型</returntype>
<!-- 参数: -->
<pram>()</pram>
<example>
函数原型:|逻辑型 网页.删除cookie()|
函数说明:|删除IE的Cookie|
调用列子:|
网页.删除cookie()
</example>
</function>

<!-- 在当前网页中执行一段JS脚本 -->
<function name="执行js">
<!--返回值:字符型 -->
<returntype>字符型</returntype>
<!-- 参数: 控件名 js脚本-->
<pram>(字符型 id,字符型 js脚本,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 网页.执行js(字符型 id,字符型 js脚本,字符型 父窗口名称="")|
函数说明:|在当前网页中执行一段JS脚本,获取返回值|
调用列子:|
字符型 返回值 = 网页.执行js("浏览器0","var t=document.title;return t;")
</example>
</function>

</namespace>


<!--表格控件-->
<namespace name="表格">
<!--表格大小-->
<function name="大小">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,返回行.返回列-->
<pram>(字符型 名称,整型 返回行,整型 返回列,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.大小(字符型 名称,整型 返回行,整型 返回列,字符型 父窗口名称="")|
函数说明:|获取表格大小(行,列的个数)|
调用例子:|
整型 r_row, r_col
表格.大小("表格0",r_row, r_col)
</example>
</function>

<!--设置大小-->
<function name="设置大小">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,长.宽-->
<pram>(字符型 名称,整型 行,整型 列,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置大小(字符型 名称,整型 行,整型 列,字符型 父窗口名称="")|
函数说明:|设置表格大小(行,列的个数)|
调用例子:|
表格.设置大小("表格0",100,100)
</example>
</function>

<!--固定项大小-->
<function name="固定项大小">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,返回长.返回宽-->
<pram>(字符型 名称,整型 返回行,整型 返回列,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.固定项大小(字符型 名称,整型 返回行,整型 返回列,字符型 父窗口名称="")|
函数说明:|获得固定项大小(行,列的个数)|
调用例子:|
整型 r_row, r_col
表格.固定项大小("表格0",r_row, r_col)
</example>
</function>

<!--设置固定项大小-->
<function name="设置固定项大小">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,长.宽-->
<pram>(字符型 名称,整型 行数,整型 列数,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置固定项大小(字符型 名称,整型 行数,整型 列数,字符型 父窗口名称="")|
函数说明:|设置固定项大小(行,列的个数)|
调用例子:|
表格.设置固定项大小("表格0",100,100)
</example>
</function>

<!--获得内容-->
<function name="获得内容">
<!--返回值:内容-->
<returntype>字符型</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(字符型 名称,整型 行号,整型 列号,字符型 父窗口名称="")</pram>
<example>
函数原型:|字符型 表格.获得内容(字符型 名称,整型 行号,整型 列号,字符型 父窗口名称="")|
函数说明:|获得表格某一项的数据内容|
调用例子:|
字符型 内容
内容=表格.获得内容("表格0",1,1)
辅助.消息框(内容)
</example>
</function>

<!--设置内容-->
<function name="设置内容">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(字符型 名称,整型 行号,整型 列号,字符型 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置内容(字符型 名称,整型 行号,整型 列号,字符型 内容,字符型 父窗口名称="")|
函数说明:|设置表格某一项的数据内容|
调用例子:|
表格.设置内容("表格0",1,1,"TC简单开发")
</example>
</function>

<!--获得类型-->
<function name="获得类型">
<!--返回值:获得的类型-->
<returntype>整型</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(字符型 名称,整型 行号,整型 列号,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 表格.获得类型(字符型 名称,整型 行号,整型 列号,字符型 父窗口名称="")|
函数说明:|获得表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|
整型 类型
类型=表格.获得类型("表格0",1,1)
</example>
</function>

<!--设置类型-->
<function name="设置类型">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行号.列号,类型-->
<pram>(字符型 名称,整型 行号,整型 列号,整型 类型,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置类型(字符型 名称,整型 行号,整型 列号,整型 类型,字符型 父窗口名称="")|
函数说明:|设置表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|
表格.设置类型("表格0",1,1,1)
</example>
</function>

<!--插入行-->
<function name="插入行">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,内容,行号-->
<pram>(字符型 名称,字符型 内容,整型 行号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.插入行(字符型 名称,字符型 内容,整型 行号,字符型 父窗口名称="")|
函数说明:|插入行|
调用例子:|
表格.插入行("表格0","TC简单开发",1)
</example>
</function>

<!--清空-->
<function name="清空">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.清空(字符型 名称,字符型 父窗口名称="")|
函数说明:|清空表格控件所有项|
调用例子:|
表格.清空("表格0")
</example>
</function>

<!--删除行-->
<function name="删除行">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行号-->
<pram>(字符型 名称,整型 行号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.删除行(字符型 名称,整型 行号,字符型 父窗口名称="")|
函数说明:|删除行|
调用例子:|
表格.删除行("表格0",1)
</example>
</function>

<!--删除列-->
<function name="删除列">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行号-->
<pram>(字符型 名称,整型 列号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.删除列(字符型 名称,整型 列号,字符型 父窗口名称="")|
函数说明:|删除列|
调用例子:|
表格.删除列("表格0",1)
</example>
</function>

<!--删除非固定行-->
<function name="删除非固定行">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.删除非固定行(字符型 名称,字符型 父窗口名称="")|
函数说明:|删除非固定行|
调用例子:|
表格.删除非固定行("表格0")
</example>
</function>

<!--获得复选框状态-->
<function name="获得复选框状态">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(字符型 名称,整型 行号,整型 列号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.获得复选框状态(字符型 名称,整型 行号,整型 列号,字符型 父窗口名称="")|
函数说明:|获得复选框状态,返回 真 为选中,返回 假 为未选中|
调用例子:|
逻辑型 是否选中
是否选中=表格.获得复选框状态("表格0",1,1)
</example>
</function>

<!--设置复选框状态-->
<function name="设置复选框状态">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行号.列号,状态-->
<pram>(字符型 名称,整型 行号,整型 列号,逻辑型 是否选中,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置复选框状态(字符型 名称,整型 行号,整型 列号,逻辑型 是否选中,字符型 父窗口名称="")|
函数说明:|设置复选框状态,参数4 设置 真 为选中,返回 假 为未选中|
调用例子:|
表格.设置复选框状态("表格0",1,1,真)
</example>
</function>

<!--设置下拉框内容-->
<function name="设置下拉框内容">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行号.内容-->
<pram>(字符型 名称,整型 行号,整型 列号,字符型[] 内容,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置下拉框内容(字符型 名称,整型 行号,整型 列号,字符型[] 内容,字符型 父窗口名称="")|
函数说明:|设置表格中下拉框的内容|
调用例子:|
字符型[] 内容=字符型[2]
内容[0]="TC"
内容[1]="简单开发"
表格.设置下拉框内容("表格0",1,1,内容)
</example>
</function>

<!--获取焦点项-->
<function name="焦点项">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,返回长.返回宽-->
<pram>(字符型 名称,整型 返回行数,整型 返回列数,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.焦点项(字符型 名称,整型 返回行数,整型 返回列数,字符型 父窗口名称="")|
函数说明:|获得表格焦点项(焦点:当前光标所在的位置)|
调用例子:|
整型 r_row,r_col
表格.焦点项("表格0",r_row,r_col)
</example>
</function>

<!--获得行高-->
<function name="获得行高">
<!--返回值:行高-->
<returntype>整型</returntype>
<!--参数:控件名称,行-->
<pram>(字符型 名称,整型 行,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 表格.获得行高(字符型 名称,整型 行,字符型 父窗口名称="")|
函数说明:|获得行高(注:该功能vip会员登陆可用|
调用例子:|
整型 行高=表格.获得行高("表格0",1)
</example>
</function>

<!--设置行高-->
<function name="设置行高">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行,高-->
<pram>(字符型 名称,整型 行,整型 高,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置行高(字符型 名称,整型 行,整型 高,字符型 父窗口名称="")|
函数说明:|设置行高|
调用例子:|
表格.设置行高("表格0",1,50)
</example>
</function>

<!--获得列宽-->
<function name="获得列宽">
<!--返回值:列宽-->
<returntype>整型</returntype>
<!--参数:控件名称,列-->
<pram>(字符型 名称,整型 列,字符型 父窗口名称="")</pram>
<example>
函数原型:|整型 表格.获得列宽(字符型 名称,整型 列,字符型 父窗口名称="")|
函数说明:|获得列宽|
调用例子:|
整型 列宽=表格.获得列宽("表格0",1)
</example>
</function>

<!--设置列宽-->
<function name="设置列宽">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,列,宽-->
<pram>(字符型 名称,整型 列,整型 宽,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置列宽(字符型 名称,整型 列,整型 宽,字符型 父窗口名称="")|
函数说明:|设置列宽|
调用例子:|
表格.设置列宽("表格0",1,50)
</example>
</function>

<!--设置项背景颜色-->
<function name="设置项背景颜色">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行,列,颜色值-->
<pram>(字符型 名称,整型 行,整型 列,整型 颜色,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置项背景颜色(字符型 名称,整型 行,整型 列,整型 颜色,字符型 父窗口名称="")|
函数说明:|设置表格某一项的背景颜色|
调用例子:|
表格.设置项背景颜色("表格0",1,1,123456)
</example>
</function>

<!--设置项文本颜色-->
<function name="设置项文本颜色">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行,列,颜色值-->
<pram>(字符型 名称,整型 行,整型 列,整型 颜色,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置项文本颜色(字符型 名称,整型 行,整型 列,整型 颜色,字符型 父窗口名称="")|
函数说明:|设置表格某一项的文本颜色|
调用例子:|
表格.设置项文本颜色("表格0",1,1,123456)
</example>
</function>

<!--填充-->
<function name="填充">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行,列-->
<pram>(字符型 名称,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.填充(字符型 名称,字符型 父窗口名称="")|
函数说明:|以表格外围边框为边界将表格项填充到整个边界,此时滚动条将消失|
调用例子:|
表格.填充("表格0")
</example>
</function>

<!--获得选中范围-->
<function name="获得选中范围">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行,列-->
<pram>(字符型 名称,整型 返回开始行号,整型 返回开始列号,整型 返回结束行号,整型 返回结束列号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.获得选中范围(字符型 名称,整型 返回开始行号,整型 返回开始列号,整型 返回结束行号,整型 返回结束列号,字符型 父窗口名称="")|
函数说明:|获得选中范围|
调用例子:|
整型 r_beginRow,r_beginCol,r_endRow,r_end_Col
表格.获得选中范围("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>

<!--设置选中范围-->
<function name="设置选中范围">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行,列-->
<pram>(字符型 名称,整型 开始行号,整型 开始列号,整型 结束行号,整型 结束列号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.设置选中范围(字符型 名称,整型 开始行号,整型 开始列号,整型 结束行号,整型 结束列号,字符型 父窗口名称="")|
函数说明:|设置选中范围|
调用例子:|
表格.设置选中范围("表格0",0,0,10,10)
</example>
</function>

<!--获得可见范围-->
<function name="获得可见范围">
<!--返回值:成功或失败-->
<returntype>逻辑型</returntype>
<!--参数:控件名称,行,列-->
<pram>(字符型 名称,整型 返回开始行号,整型 返回开始列号,整型 返回结束行号,整型 返回结束列号,字符型 父窗口名称="")</pram>
<example>
函数原型:|逻辑型 表格.获得可见范围(字符型 名称,整型 返回开始行号,整型 返回开始列号,整型 返回结束行号,整型 返回结束列号,字符型 父窗口名称="")|
函数说明:|获得非固定项可见范围|
调用例子:|
整型 r_beginRow,r_beginCol,r_endRow,r_end_Col
表格.获得可见范围("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>


</namespace>
</dll>


<dll name="funlist" path="matchDll.dll">


<!--鼠标空间-->
<namespace name="mouse">

<!--鼠标移动绝对坐标-->
<function name="mousemove">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:nx 鼠标绝对坐标X,ny 鼠标绝对坐标Y-->
<pram>(int x,int y)</pram>
<example>
函数原型:|bool mouse.mousemove(int x,int y)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|mouse.mousemove(100,200)
</example>
</function>

<!--鼠标移动相对坐标-->
<function name="moverelative">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:nx 鼠标坐标X,ny 鼠标坐标Y-->
<pram>(int x,int y)</pram>
<example>
函数原型:|bool mouse.moverelative(int x,int y)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|mouse.moverelative(100,200)
</example>
</function>

<!--鼠标中键单击-->
<function name="middleclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标中键单击次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool mouse.middleclick(int ncount)|
函数说明:|鼠标中键单击|
调用例子:|mouse.middleclick(10)
</example>
</function>

<!--鼠标中键按下-->
<function name="middledown">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool mouse.middledown()|
函数说明:|鼠标中键按下|
调用例子:|mouse.middledown()
</example>
</function>

<!--鼠标中键弹起-->
<function name="middleup">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool mouse.middleup(int ncount)|
函数说明:|鼠标中键弹起|
调用例子:|mouse.middleup()
</example>
</function>


<!--鼠标右键单击-->
<function name="rightclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标右键单击次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool mouse.rightclick(int ncount)|
函数说明:|鼠标右键单击|
调用例子:|mouse.rightclick(10)
</example>
</function>

<!--鼠标右键双击-->
<function name="rightdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标右键双击按下的次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool mouse.rightdoubleclick(int count)|
函数说明:|鼠标右键双击|
调用例子:|mouse.rightdoubleclick(10)
</example>
</function>


<!--鼠标左键单击-->
<function name="leftclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标左键单击按下的次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool mouse.leftclick(int ncount)|
函数说明:|鼠标左键单击|
调用例子:|mouse.leftclick(10)
</example>
</function>


<!--鼠标左键双击-->
<function name="leftdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标左键双击的次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool mouse.leftdoubleclick(int ncount)|
函数说明:|鼠标左键双击|
调用例子:|mouse.leftdoubleclick(10)
</example>
</function>


<!--鼠标左键按下-->
<function name="leftdown">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool mouse.leftdown()|
函数说明:|鼠标左键按下|
调用例子:|mouse.leftdown()
</example>
</function>


<!--鼠标右键按下-->
<function name="rightdown">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool mouse.rightdown()|
函数说明:|鼠标右键按下|
调用例子:|mouse.rightdown()
</example>
</function>


<!--鼠标左键弹起-->
<function name="leftup">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool mouse.leftup()|
函数说明:|鼠标左键弹起|
调用例子:|mouse.leftup()
</example>
</function>


<!--鼠标右键弹起-->
<function name="rightup">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool mouse.rightup()|
函数说明:|鼠标右键弹起|
调用例子:|mouse.rightup()
</example>
</function>


<!--鼠标中键向上移动-->
<function name="mousewheelup">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标中键向上移动的值-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool mouse.mousewheelup(int ncount)|
函数说明:|鼠标中键上滚|
调用例子:|mouse.mousewheelup(10)
</example>
</function>


<!--鼠标中键向下移动-->
<function name="mousewheeldown">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标中键向下移动的值-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool mouse.mousewheeldown(int ncount)|
函数说明:|鼠标中键向下移动|
调用例子:|mouse.mousewheeldown(10)
</example>
</function>


<!--保存鼠标当前坐标-->
<function name="savemousepos">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|bool mouse.savemousepos()|
函数说明:|保存鼠标当前坐标|
调用例子:|mouse.savemousepos()
</example>
</function>

<!--恢复鼠标上一次坐标-->
<function name="restoremousepos">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|bool mouse.restoremousepos()|
函数说明:|恢复鼠标上一次坐标|
调用例子:|mouse.restoremousepos()
</example>
</function>

<!--锁住当前鼠标-->
<function name="lockmouse">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|bool mouse.lockmouse()|
函数说明:|锁住当前鼠标|
调用例子:|mouse.lockmouse()
</example>
</function>

<!--解锁当前鼠标-->
<function name="unlockmouse">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|bool mouse.unlockmouse()|
函数说明:|解锁当前鼠标|
调用例子:|mouse.unlockmouse()
</example>
</function>


<!--获取当前鼠标的当前位置坐标-->
<function name="getmousepoint">
<!--返回值:执行成功返回当前鼠标位置坐标字符串，字符串X坐标和Y坐标以逗号隔开！例:(100,200)-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>(int x,int y)</pram>
<example>
函数原型:|bool mouse.getmousepoint(int x,int y)|
函数说明:|获取当前鼠标的当前位置坐标|
调用例子:|int x|int y|mouse.getmousepoint(x,y)
</example>
</function>


<!--获取当前鼠标句柄-->
<function name="mousehandle">
<!--返回值:返回当前鼠标句柄-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int mouse.mousehandle()|
函数说明:|获取当前鼠标句柄|
调用例子:|mouse.mousehandle()
</example>
</function>

<!--获取当前鼠标特征码-->
<function name="getmouseshape">
<!--返回值:返回当前鼠标特征码-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int mouse.getmouseshape()|
函数说明:|获取当前鼠标特征码|
调用例子:|
int mouseshape|
mouseshape=mouse.getmouseshape()|
</example>
</function>

<!-- 等待点击 -->
<function name="waitclick">
<!--返回值:返回当前鼠标动作代码-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int mouse.waitclick()|
函数说明:|等待鼠标任意点击动作，并返回鼠标点击动作代码|
调用例子:|
int mousecode=mouse.waitclick()
</example>
</function>
</namespace>




<!--键盘空间-->
<namespace name="keyboard">

<!--按键:按下-->
<function name="keydown">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:bkeydown 键码-->
<pram>(int bkeydown)</pram>
<example>
函数原型:|bool keyboard.keydown(int bkeydown)|
函数说明:|模拟键盘按下动作|
调用例子:|keyboard.keydown(65)
</example>
</function>


<!--按键:按下弹起-->
<function name="keypress">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:bkeydown 键码,ncount 按键的次数-->
<pram>(int bkeydown,int ncount)</pram>
<example>
函数原型:|bool keyboard.keypress(int bkeydown,int ncount)|
函数说明:|模拟键盘按键(按下+弹起)动作|
调用例子:|keyboard.keypress(65,10)
</example>
</function>


<!--按键:弹起-->
<function name="keyup">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:bkeydown 键码-->
<pram>(int bkeydown)</pram>
<example>
函数原型:|bool keyboard.keyup(int bkeydown)|
函数说明:|模拟键盘弹起动作|
调用例子:|keyboard.keyup(65)
</example>
</function>

<!--按键:按下一串连续的字符-->
<function name="sendkeystring">
<!-- 返回值:执行成功返回真，否则返回假 --> 
<returntype>bool</returntype> 
<!--参数:连续的字符串-->
<pram>(string str,int delay=50)</pram> 
<example>
函数原型:|bool keyboard.sendkeystring(string str,int delay=50)|
函数说明:|模拟键盘弹起动作发送一连串字符串|
调用例子:|keyboard.sendkeystring("hello world")
</example>
</function>



<!--按键:暂停程序等待任意按键后继续-->
<function name="waitkey">
<!-- 返回值:执行成功返回真，否则返回假 --> 
<returntype>int</returntype> 
<!--参数:-->
<pram>()</pram> 
<example>
函数原型:|int keyboard.waitkey()|
函数说明:|暂停程序等待任意按键后继续|
调用例子:|
int keycode=keyboard.waitkey()
</example>
</function>

</namespace>



<!--窗口命名空间-->
<namespace name="window">

<!--找到窗口-->
<function name="findwindow">
<!--返回值:执行成功返回找到窗口句柄的整形值,否则返回0-->
<returntype>int</returntype>
<!--参数:窗口名-->
<pram>(string windowname,string classname="")</pram>
<example>
函数原型:|int window.findwindow(string windowname,string classname="")|
函数说明:|根据窗口名称或窗口类名返回窗口句柄|
调用例子:| 
int hwnd=window.findwindow("World of Warcraft")
</example>
</function>


<!--设置窗口最大化-->
<function name="setwindowmax">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.setwindowmax(int hwnd)|
函数说明:|设置窗口最大化|
调用例子:| 
int hwnd=window.findwindow("World of Warcraft")
window.setwindowmax(hwnd)
</example>
</function>

<!--设置窗口最小化-->
<function name="setwindowmin">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.setwindowmin(int hwnd)|
函数说明:|设置窗口最大化|
调用例子:| 
int hwnd=window.findwindow("World of Warcraft")
window.setwindowmin(hwnd) 
</example>
</function>


<!--设置窗口标题-->
<function name="setwindowcaption">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值,windowcaption 窗口要更改的名字-->
<pram>(int hwnd,string windowcaption)</pram>
<example>
函数原型:|bool window.setwindowcaption(int hwnd,string windowcaption)|
函数说明:|设置窗口标题|
调用例子:| 
int hwnd=window.findwindow("World of Warcraft")
window.setwindowcaption(hwnd,"wow")  
</example>
</function>

<!--设置窗口为置前窗口-->
<function name="setwindowtop">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd,bool iftop)</pram>
<example>
函数原型:|bool window.setwindowtop(int hwnd,bool iftop)|
函数说明:|设置窗口永久置顶,第二参数,真为置顶,假为取消置顶|
调用例子:| 
int hwnd=window.findwindow("World of Warcraft")
window.setwindowtop(hwnd,true)
</example>
</function>


<!--设置窗口的位置-->
<function name="setwindowpos">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:x 坐标X,y 坐标Y-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.setwindowpos(int hwnd,int x,int y)|
函数说明:|设置窗口的位置|
调用例子:| 
int hwnd=window.findwindow("World of Warcraft")
window.setwindowpos(hwnd,100,500)  
</example>
</function>


<!--窗口隐藏-->
<function name="hidewindow">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.hidewindow(int hwnd)|
函数说明:|窗口隐藏|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.hidewindow(hwnd)
</example>
</function>

<!--显示窗口-->
<function name="showwindow">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.showwindow(int hwnd)|
函数说明:|显示窗口|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.showwindow(hwnd)
</example>
</function>


<!--还原窗口-->
<function name="restorewnd">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.restorewnd(int hwnd)|
函数说明:|窗口还原|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.restorewnd(hwnd)
</example>
</function>


<!--关闭窗口-->
<function name="closewnd">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.closewnd(int hwnd)|
函数说明:|窗口关闭|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.closewnd(hwnd)
</example>
</function>


<!--得到窗口标题-->
<function name="getwindowcaption">
<!--返回值:string 窗口标题-->
<returntype>string</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|string window.getwindowcaption(int hwnd)|
函数说明:|得到窗口标题|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
string caption=window.getwindowcaption(hwnd)
</example>
</function>


<!--判断窗口是否存在-->
<function name="iswindow">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.iswindow(int hwnd)|
函数说明:|判断窗口是否存在|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")|
bool bret=window.iswindow(hwnd)
</example>
</function>

<!--得到窗口类型(窗口类名)-->
<function name="getwindowtype">
<!--返回值:string 窗口类型-->
<returntype>string</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|string window.getwindowtype(int hwnd)|
函数说明:|得到窗口类名|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
string strclass=window.getwindowtype(hwnd)
</example>
</function>


<!--得到当前窗口句柄-->
<function name="getactivewindowhwnd">
<!--返回值:hwnd 窗口句柄整形值-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int window.getactivewindowhwnd()|
函数说明:|得到当前窗口句柄|
调用例子:|
int hwnd=window.getactivewindowhwnd()
</example>
</function>

<!--得到鼠标移动的窗口句柄-->
<function name="getmousemovewndhand">
<!--返回值:hwnd 窗口句柄整形值-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int window.getmousemovewndhand()|
函数说明:|得到当前鼠标移动的窗口句柄|
调用例子:|
int hwnd=window.getmousemovewndhand()
</example>
</function>

<!--得到当前可以发送按键消息的窗口,获取当前键盘焦点的窗口句柄-->
<function name="getfoucswndhand">
<!--返回值:hwnd 窗口句柄整形值-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int window.getfoucswndhand()|
函数说明:|获取当前键盘焦点的窗口句柄|
调用例子:|
int hwnd=window.getfoucswndhand()
</example>
</function>


<!--向窗口按键:按键-弹起消息-->
<function name="sendkeypress">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(int hwnd,int key)</pram>
<example>
函数原型:|bool window.sendkeypress(int hwnd,int key)|
函数说明:|向窗口发送一个按键(按下+弹起)消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.sendkeypress(hwnd,13)
</example>
</function>

<!--向窗口按键:弹起消息-->
<function name="sendkeyup">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(int hwnd,int key)</pram>
<example>
函数原型:|bool window.sendkeyup(int hwnd,int key)|
函数说明:|向窗口发送一个弹起消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.sendkeyup(hwnd,13)
</example>
</function>

<!--向窗口按键:按下消息-->
<function name="sendkeydown">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(int hwnd,int key)</pram>
<!--举列:window.sendkeydown(6553,13)-->
<example>
函数原型:|bool window.sendkeydown(int hwnd,int key)|
函数说明:|向窗口发送一个按下消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.sendkeydown(hwnd,13)
</example>
</function>

<!--向窗口按下字符消息-->
<function name="sendchar">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(int hwnd,int key)</pram>
<!--举列:window.sendchar(6553, 65)-->
<example>
函数原型:|bool window.sendchar(int hwnd,int key)|
函数说明:|向窗口发送一个字符消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.sendchar(hwnd,65)
</example>
</function>

<!--向窗口按下字符消息-->
<function name="sendstring">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值, str 字符串消息-->
<pram>(int hwnd,string str)</pram>
<example>
函数原型:|bool window.sendstring(int hwnd,string str)|
函数说明:|向窗口发送一个连续按下字符串消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.sendstring(hwnd,"hello world")
</example>
</function>


<!-- 向窗口按键:按键-弹起消息--> 
<function name="postkeypress">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>bool</returntype> 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(int hwnd,int key)</pram> 
<example>
函数原型:|bool window.postkeypress(int hwnd,int key)|
函数说明:|向窗口后台提交按键(按下+弹起)消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.postkeypress(hwnd,13)
</example>
</function>


<!-- post向窗口按键:弹起消息--> 
<function name="postkeyup">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>bool</returntype> 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(int hwnd,int key)</pram> 
<example>
函数原型:|bool window.postkeyup(int hwnd,int key)|
函数说明:|向窗口后台提交弹起消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")|
window.postkeyup(hwnd,13)
</example>
</function>



<!-- post向窗口按键:按下消息--> 
<function name="postkeydown">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>bool</returntype> 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(int hwnd,int key)</pram> 
<example>
函数原型:|bool window.postkeydown(int hwnd,int key)|
函数说明:|向窗口后台提交弹起消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.postkeydown(hwnd,13)
</example>
</function>

<!-- post向窗口按下字符消息--> 
<function name="postchar">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>bool</returntype> 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(int hwnd,int key)</pram> 
<example>
函数原型:|bool window.postchar(int hwnd,int key)|
函数说明:|向窗口后台提交按键字符消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.postchar(hwnd,65)
</example>
</function>


<!-- post向窗口按下字符消息--> 
<function name="poststring">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>bool</returntype> 
<!-- 参数:hwnd 窗口句柄整形值, str 字符串消息--> 
<pram>(int hwnd,string str)</pram> 
<example>
函数原型:|bool window.poststring(int hwnd,string str)|
函数说明:|向窗口后台提交按下一连串字符串消息|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.poststring(hwnd,"hello world")
</example>
</function>


<!--设置窗口的位置大小-->
<function name="setwindowsize">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:width 窗口的宽,height 窗口的高-->
<pram>(int hwnd,int width,int height)</pram>
<example>
函数原型:|bool window.setwindowsize(int hwnd,int width,int height)|
函数说明:|设置窗口大小|
调用例子:| 
int hwnd=window.findwindow("World of Warcraft")
window.setwindowsize(hwnd,500,500)  
</example>
</function>


<!--获取窗口的位置-->
<function name="getwindowpos">
<!--返回值:执行成功返回真，将窗口位置的X坐标，Y坐标返回-->
<returntype>bool</returntype>
<!--参数:x 坐标X,y 坐标Y-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.getwindowpos(int hwnd,int x,int y)|
函数说明:|获取窗口的位置|
调用例子:|
int x,y,hwnd
hwnd=window.findwindow("World of Warcraft")
window.getwindowpos(hwnd,x,y)  
</example>
</function>


<!--获取窗口的大小-->
<function name="getwindowsize">
<!--返回值:执行成功返回真，将窗口宽和将窗口高返回-->
<returntype>bool</returntype>
<!--参数:int hwnd,width 窗口的宽,height 窗口的高-->
<pram>(int hwnd,int width,int height)</pram>
<example>
函数原型:|bool window.getwindowsize(int hwnd,int width,int height)|
函数说明:|获取窗口的大小|
调用例子:| 
int width,height,hwnd
hwnd=window.findwindow("World of Warcraft")
window.getwindowsize(hwnd,width,height)  
</example>
</function>


<!--根据窗口类名得到窗口句柄-->
<function name="findwndclass">
<!--返回值:int 窗口句柄-->
<returntype>int</returntype>
<!--参数:wndclass 要得到的窗口句柄的类名-->
<pram>(string wndclass)</pram>
<example>
函数原型:|int window.findwndclass(string wndclass)|
函数说明:|根据窗口类名得到窗口句柄|
调用例子:|
int hwnd=window.findwndclass("GxWindowClassD3d")
</example>
</function>


<!--窗口坐标转屏幕坐标-->
<function name="clienttoscreen">
<!--返回值:bool 成功或者失败-->
<returntype>bool</returntype>
<!--参数窗口句柄,窗口x坐标, 窗口y坐标, 返回屏幕x坐标, 返回屏幕y坐标-->
<pram>(int hwnd,int wndx,int wndy,int scrx,int scry)</pram>
<example>
函数原型:|bool window.clienttoscreen(int hwnd,int wndx,int wndy,int scrx,int scry)|
函数说明:|窗口坐标转屏幕坐标|
调用列子:|
bool ret
int scrx,scry,hwnd
hwnd=window.findwindow("TC帮助文档")
ret=window.clienttoscreen(hwnd,10,200,scrx,scry)
</example>
</function> 

<!--屏幕坐标转窗口坐标-->
<function name="screentoclient">
<!--返回值:bool 成功或者失败-->
<returntype>bool</returntype>
<!--参数窗口句柄,屏幕x坐标, 屏幕y坐标, 返回窗口x坐标, 返回窗口y坐标-->
<pram>(int hwnd,int scrx,int scry,int wndx,int wndy)</pram>
<example>
函数原型:|bool window.screentoclient(int hwnd,int scrx,int scry,int wndx,int wndy)|
函数说明:|屏幕坐标转窗口坐标|
调用列子:|
bool ret
int  wndx,wndy,hwnd
hwnd=window.findwindow("TC帮助文档")
ret=window.screentoclient(hwnd,10,200,wndx,wndy)
</example>
</function> 

<!--得到父窗口句柄-->
<function name="getparent">
<!--返回值:整型 父窗口句柄-->
<returntype>int</returntype>
<!--参数窗口句柄-->
<pram>(int hwnd)</pram>
<example>
函数原型:|int window.getparent(int hwnd)|
函数说明:|得到父窗口句柄|
调用列子:|
int phwnd,hwnd
hwnd=window.findwindow("World of Warcraft")
phwnd= window.getparent(hwnd)
</example>
</function> 

<!--后台发送鼠标-->
<function name="mousemove">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.mousemove(int hwnd,int x,int y)|
函数说明:|发送鼠标到窗口x,y坐标位置|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.mousemove(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键按下-->
<function name="leftdown">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.leftdown(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键按下|
调用例子:|
int hwnd
hwnd=window.findwindow("World of Warcraft")
window.leftdown(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键弹起-->
<function name="leftup">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.leftup(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键弹起|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.leftup(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键单击-->
<function name="leftclick">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.leftclick(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键单击|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.leftclick(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键双击-->
<function name="leftdoubleclick">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.leftdoubleclick(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键单击|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.leftdoubleclick(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键按下-->
<function name="rightdown">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.rightdown(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键按下|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.rightdown(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键弹起-->
<function name="rightup">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.rightup(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键弹起|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.rightup(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键单击-->
<function name="rightclick">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.rightclick(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键单击|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.rightclick(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键双击-->
<function name="rightdoubleclick">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.rightdoubleclick(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键双击|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.rightdoubleclick(hwnd,50,20)
</example>
</function>


<!--后台发送鼠标中键按下-->
<function name="middledown">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.middledown(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键按下|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.middledown(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标中键弹起-->
<function name="middleup">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.middleup(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键弹起|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.middleup(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标中键单击-->
<function name="middleclick">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(int hwnd,int x,int y)</pram>
<example>
函数原型:|bool window.middleclick(int hwnd,int x,int y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键单击|
调用例子:|
int hwnd=window.findwindow("World of Warcraft")
window.middleclick(hwnd,50,20)
</example>
</function>

<!--得到自身窗口句柄-->
<function name="getmyhwnd">
<!--返回值:hwnd 窗口句柄整形值-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int window.getmyhwnd()|
函数说明:|得到自身窗口句柄|
调用例子:|
int hwnd=window.getmyhwnd()
</example>
</function>

<!--通过句柄获取路径-->
<function name="getpath">
<!--返回值:path 程序路径-->
<returntype>string</returntype>
<!--参数:无-->
<pram>(int hwnd)</pram>
<example>
函数原型:|string window.getpath(int hwnd)|
函数说明:|通过句柄获取路径|
调用例子:|
int hwnd=window.getmyhwnd()
string path=window.getpath(hwnd)
help.messagebox(path)
</example>
</function>


<!--设置窗口为置前窗口-->
<function name="activate">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:hwnd 窗口句柄整形值-->
<pram>(int hwnd)</pram>
<example>
函数原型:|bool window.activate(int hwnd)|
函数说明:|激活窗口,并置顶一次|
调用例子:| 
int hwnd=window.findwindow("TC帮助文档")
window.activate(hwnd)
</example>
</function>

<!--获取窗口客户区大小-->
<function name="getclinetrect">
<!--返回值:执行成功返回真失败返回假-->
<returntype>bool</returntype>
<!--参数:整型 窗口句柄,窗口的宽,窗口的高-->
<pram>(int hwnd,int rCX,int rCY,int rwidth,int rheight)</pram>
<example>
函数原型:|bool window.getclinetrect(int hwnd,int rCX,int rCY,int rwidth,int rheight)|
函数说明:|获取窗口的位置及客户区大小(不包含标题栏大小)|
调用列子:|
int hwnd,rCX,rCY,rwidth,rheight
hwnd=window.findwindow("World of Warcraft")
window.getclinetrect(hwnd,rCX,rCY,rwidth,rheight)
</example>
</function>

<!--抓取当前活动窗口指定坐标点的图像-->
<function name="getpixelcolor">
<!--返回值:返回的是颜色值的十六进制字符型数据-->
<returntype>int</returntype>
<!--参数:窗口句柄, 点的x坐标, 点的y坐标-->
<pram>(int hwnd,int x坐标,int y坐标)</pram>
<example>
函数原型:|int window.getpixelcolor(int hwnd,int x,int y)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|
int hwnd,intcolor
hwnd=window.findwindow("World of Warcraft")
intcolor=window.getpixelcolor(hwnd,300,300)
</example>
</function>

<!--在当前活动窗口区域内找色-->
<function name="findrectpixelcolor">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像,返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值 颜色16进制数,检索方式,返回x坐标,返回y坐标-->
<pram>(int 窗口句柄,int 左上角的x坐标,int 左上角的y坐标,int 右下角的x坐标,int 右下角的y坐标,int 颜色值,int dir,int 返回x坐标,int 返回y坐标)</pram>
<example>
函数原型:|bool  window.findrectpixelcolor(int 窗口句柄,int 左上角的x坐标,int 左上角的y坐标,int 右下角的x坐标,int 右下角的y坐标,int 颜色值,int dir,int 返回x坐标,int 返回y坐标)|
函数说明:|在当前活动窗口区域内找色|
调用列子:|
int hwnd,x,y
bool isfind
hwnd=window.findwindow("World of Warcraft")
isfind=window.findrectpixelcolor(hwnd,10,10,500,600,#1E3C04,0,x,y)
</example>
</function>

<!--在当前活动窗口区域内模糊找色-->
<function name="findrectpixelcolorex">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像点,如果找到在参数里返回,否则返回空-->
<returntype>bool</returntype>
<!--参数:窗口句柄,左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,颜色值 颜色16进制数,相似度,检索方式,返回x坐标,返回y坐标-->
<pram>(int 窗口句柄,int 左上角的x坐标,int 左上角的y坐标,int 右下角的x坐标,int 右下角的y坐标,int 颜色值,double 相似度,int dir,int 返回x坐标,int 返回y坐标)</pram>
<example>
函数原型:|bool  window.findrectpixelcolorex(int 窗口句柄,int 左上角的x坐标,int 左上角的y坐标,int 右下角的x坐标,int 右下角的y坐标,int 颜色值,double 相似度,int dir,int 返回x坐标,int 返回y坐标)|
函数说明:|在当前活动窗口区域内模糊找图像点,找到图像点,坐标值保存在返回的x坐标和返回的y坐标 变量里。未找到则返回的x坐标和返回的y坐标这2个变量的值为-1|
调用列子:|
//相似度的值规定范围(0.5-1.0),推荐使用0.8|
int hwnd,x,y
bool isfind
hwnd=window.findwindow("World of Warcraft")
isfind=window.findrectpixelcolorex(hwnd,10,10,500,600,#1E3C04,0.8,0,x,y)
</example>
</function>

<!--后台找图功能-->
<function name="findpic">
<!-- 返回值:找到则返回相应图片的序号,未找到则返回0--> 
<returntype>int</returntype> 
<!-- 参数:窗口句柄 左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径,色偏,相似度,检索方式,返回找到的x坐标,y坐标--> 
<pram>(int hwnd,int left,int top,int right,int buttom,string path,int offset,double sim,int dir,int x,int y)</pram> 
<example>
函数原型:|int window.findpic(int hwnd,int left,int top,int right,int buttom,string path,int offset,double sim,int dir,int x,int y)| 
函数说明:|后台找图功能| 
调用列子:|
//说明:支持多张图片(图片与图片中间使用 竖线隔开)和根据四角的颜色判断是否为透明图|
int x,y,picindex,hwnd
hwnd=window.findwindow("World of Warcraft")
picindex=window.findpic(hwnd,0,0,1440,900,"d:\\111.bmp",#101010,1.0,1,x,y)
</example> 
</function>

</namespace>



<!--文件命名空间-->
<namespace name="file">

<!--打开文件,判断文件是否存在 -->
<function name="openfile">
<!--返回值:执行成功返回文件句柄,否则返回0-->
<returntype>int</returntype>
<!--参数:path文件名以及文件路径-->
<pram>(string path,string attribute="")</pram>
<!--举列:file.openfile("d:\\1.txt")-->
<example>
函数原型:|int file.openfile(string path,string attribute="")|
函数说明:|打开文件判断文件是否存在,默认属性有(rw,OPEN_EXISTING,FILE_SHARE_READ,FILE_SHARE_WRITE),更多属性见帮助文档|
调用例子:|
int handle=file.openfile("d:\\1.txt")
help.sleep(5000)
file.closefile(handle)
</example>
</function>


<!--关闭文件-->
<function name="closefile">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:handle文件句柄-->
<pram>(int handle)</pram>
<example>
函数原型:|bool file.closefile(int handle)|
函数说明:|关闭文件|
调用例子:|
int handle=file.openfile("d:\\1.txt")
help.sleep(5000)
file.closefile(handle)
</example>
</function>


<!--创建文件-->
<function name="createfile">
<!--返回值:执行成功返回文件句柄，否则返回0-->
<returntype>int</returntype>
<!--参数:path文件名以及文件路径,attribute 属性-->
<pram>(string path,string attribute)</pram>
<example>
函数原型:|int file.createfile(string path,string attribute)|
函数说明:|创建文件,,默认属性有("创建文件"),默认创建为ascii编码文件,创建unicode编码文件请在属性中加入的unicode或UNICODE,更多属性见帮助文档|
调用例子:|
file.createfile("d:\\1.txt","rw")
</example>
</function>


<!--写文件ascii-->
<function name="writefile">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:handle文件句柄的整形值,inputstr要写入文件的内容-->
<pram>(int handle,string inputstr)</pram>
<example>
函数原型:|bool file.writefile(int handle,string inputstr)|
函数说明:|在文件中当前位置写入指定的内容|
调用例子:|
int handle=file.openfile("d:\\1.txt")
file.writefile(handle,"aaaaa")
</example>
</function>


<!--在文件当前写入一行内容ascii-->
<function name="writefileline">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:filehandle文件句柄,str字符串-->
<pram>(int filehandle,string str)</pram>
<example>
函数原型:|bool file.writefileline(int filehandle,string str)|
函数说明:|写入一行内容|
调用例子:|
int handle=file.openfile("d:\\1.txt")
file.writefileline(handle,"aaaaaa")
</example>
</function>


<!--写文件末尾-->
<function name="writefileend">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:handle文件句柄,inputstr要写入文件的内容-->
<pram>(int handle,string inputstr)</pram>
<example>
函数原型:|bool file.writefileend(int handle,string inputstr)|
函数说明:|在文件末尾写入内容|
调用例子:|
int handle=file.openfile("d:\\1.txt")
file.writefileend(handle,"aaaa")
</example>
</function>


<!--读文件ascii-->
<function name="readfile">
<!--返回值:返回读出的内容-->
<returntype>string</returntype>
<!--参数:handle文件句柄,readSize 具体的读出多少字节-->
<pram>(int handle,int readSize)</pram>
<example>
函数原型:|string file.readfile(int handle,int readSize)|
函数说明:|读出文件指定个数的内容|
调用例子:|
int handle=file.openfile("d:\\1.txt")
string read=file.readfile(handle,10)
</example>
</function>


<!--根据文件的当前读写位置读一行内容ascii-->
<function name="readfileline">
<!--返回值:读出的内容-->
<returntype>string</returntype>
<!--参数:filehandle 文件句柄-->
<pram>(int filehandle)</pram>
<example>
函数原型:|string file.readfileline(int filehandle)|
函数说明:|读一行内容|
调用例子:|
int handle=file.openfile("d:\\1.txt")
string read=file.readfileline(handle)
</example>
</function>


<!--移动文件-->
<function name="movefile">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:formpath要被移动的文件名和路径,topath要移动到具体的文件位置以及移动后更改的文件名-->
<pram>(string formpath,string topath)</pram>
<example>
函数原型:|bool file.movefile(string formpath,string topath)|
函数说明:|移动文件|
调用例子:|
file.movefile("e:\\2.txt","d:\\1.txt")
</example>
</function>


<!--拷贝文件-->
<function name="copyfile">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:oldname要被拷贝的文件名,newname拷贝的文件名-->
<pram>(string oldname,string newname)</pram>
<example>
函数原型:|bool file.copyfile(string oldname,string newname)|
函数说明:|拷贝文件|
调用例子:|
file.copyfile("d:\\bb.txt","d:\\aa.txt")
</example>
</function>


<!--重命名文件-->
<function name="renamefile">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:oldname要被更改的文件名,newname新的文件名-->
<pram>(string  oldname,string newname)</pram>
<example>
函数原型:|bool file.renamefile(string  oldname,string newname)|
函数说明:|重命名文件|
调用例子:|
file.renamefile("d:\\aa.txt","d:\\bb.txt")
</example>
</function>


<!--删除文件-->
<function name="deletefile">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:path文件名以及文件路径-->
<pram>(string  path)</pram>
<!--举列:file.deletefile("d:\\1.txt")-->
<example>
函数原型:|bool file.deletefile(string  path)|
函数说明:|删除文件|
调用例子:|
file.deletefile("d:\\1.txt")
</example>
</function>


<!--得到文件的长度-->
<function name="getfilelength">
<!--返回值:返回文件的长度-->
<returntype>int</returntype>
<!--参数:path 设置文件的路径和文件夹名-->
<pram>(int fileHwnd)</pram>
<!--举列:file.getfilelength(fileHwnd)-->
<example>
函数原型:|int file.getfilelength(int fileHwnd)|
函数说明:|得到长度|
调用例子:|
int handle=file.openfile("d:\\1.txt")
int len=file.getfilelength(handle)
</example>
</function>




<!--创建文件夹-->
<function name="createfolder">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:path文件夹的路径和文件夹名-->
<pram>(string path)</pram>
<!--举列:file.createfolder("d:\\bb")-->
<example>
函数原型:|bool file.createfolder(string path)|
函数说明:|创建文件夹|
调用例子:|
file.createfolder("d:\\bb")
</example>
</function>


<!--复制文件夹-->
<function name="copyfolder">
<!--返回值:执行成功返回0值,否则返回非0值-->
<returntype>bool</returntype>
<!--参数:oldname传进要被拷贝的文件名,newname复制新的文件名-->
<pram>(string oldname,string newname)</pram>
<example>
函数原型:|bool file.copyfolder(string oldname,string newname)|
函数说明:|复制文件夹|
调用例子:|file.copyfolder("d:\\bbb\\*.*","d:\\aaa")
</example>
</function>


<!--重命名文件夹-->
<function name="renamefolder">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:newname新文件夹名,oldname要被更改的文件夹名-->
<pram>(string newname,string oldname)</pram>
<example>
函数原型:|int file.renamefolder(string newname,string oldname)|
函数说明:|重命名文件夹|
调用例子:|file.renamefolder("d:\\bb","d:\\aa")
</example>
</function>


<!--删除文件夹-->
<function name="deletefolder">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:path文件夹的路径和文件夹名-->
<pram>(string path)</pram>
<example>
函数原型:|int file.deletefolder(string path)|
函数说明:|删除文件夹|
调用例子:|
file.deletefolder("d:\\bb")
</example>
</function>


<!--设置文件属性-->
<function name="setfileattribute">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:handle文件句柄,attribute文件属性-->
<pram>(string path,string attribute)</pram>
<example>
函数原型:|bool file.setfileattribute(string path,string attribute)|
函数说明:|设置文件属性|
调用例子:|file.setfileattribute("d:\\bb.txt","wr")
</example>
</function>


<!--设置文件的读写的位置-->
<function name="setfilepostion">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:filehand 文件句柄的整形值,pos 位置-->
<pram>(int filehand,string pos)</pram>
<example>
函数原型:|bool file.setfilepostion(int filehand,string pos)|
函数说明:|设置文件读写位置|
调用例子:|
int handle=file.openfile("d:\\1.txt")
file.setfilepostion(handle,"begin")
file.setfilepostion(handle,"end")
</example>
</function>

<!--判断文件或文件夹是否存在-->
<function name="exist">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:文件句柄,位置-->
<pram>(string path)</pram>
<example>
函数原型:|bool file.exist(string path)|
函数说明:|判断文件或文件夹是否存在|
调用例子:|
bool ret=file.exist("c:\\1.txt")
if(ret)
help.messagebox("文件存在")
else
help.messagebox("文件不存在")
endif
</example>
</function>

<!--读文件-->
<function name="readfileex">
<!--返回值:返回读出的内容-->
<returntype>string</returntype>
<!--参数:文件路径-->
<pram>(string path)</pram>
<example>
函数原型:|string file.readfileex(string path)|
函数说明:|根据路径读文件,返回文件内容字符串|
调用例子:|
help.messagebox(file.readfileex("d:\\1.txt"))
</example>
</function>

<!--遍历-->
<function name="traverse">
<!--返回值:返回读出的内容-->
<returntype>bool</returntype>
<!--参数:真或假-->
<pram>(string path,string[] rFolder,string[] rFile)</pram>
<example>
函数原型:|bool file.traverse(string path,string[] rFolder,string[] rFile)|
函数说明:|遍历指定路径中的文件夹及文件|
调用例子:|
string[] rFolder,rFile
file.traverse("D:\\test",rFolder,rFile)
</example>
</function>

</namespace>



<!--字符串命名空间-->
<namespace name="str">

<!--2个字符串的连接-->
<function name="strcat">
<!--返回值:返回字符串-->
<returntype>string</returntype>
<!--参数:str1 连接字符串1，str2 连接字符串2-->
<pram>(string str1,string str2)</pram>
<example>
函数原型:|string str.strcat(string str1,string str2)|
函数说明:|连接字符串|
调用例子:|help.messagebox(str.strcat("aaa","bbb"))
</example>
</function>


<!--字符串小写-->
<function name="strlowercase">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:str 要改成小写的字符串-->
<pram>(string str1)</pram>
<example>
函数原型:|string str.strlowercase(string str1)|
函数说明:|字符串小写|
调用例子:|help.messagebox(str.strlowercase("ABC"))
</example>
</function>

<!--字符串大写-->
<function name="struppercase">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:str 要改成大写的字符串-->
<pram>(string str1)</pram>
<example>
函数原型:|string str.struppercase(string str1)|
函数说明:|字符串大写|
调用例子:|help.messagebox(str.struppercase("abc"))
</example>
</function>


<!--2个字符串的比较-->
<function name="strcompare">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->
<returntype>int</returntype>
<!--参数:str1字符串1，str2字符串2-->
<pram>(string str1,string str2)</pram>
<example>
函数原型:|int str.strcompare(string str1,string str2)|
函数说明:|2个字符串的比较|
调用例子:|str.strcompare("aaa","bbb")
</example>
</function>


<!--去掉字符串头尾指定字符-->
<function name="strtrim">
<!--返回值:返回排除了要比较的字符串-->
<returntype>string</returntype>
<!--参数:compstr要比较字符串,sourcestr 源数据-->
<pram>(string compstr,string sourcestr)</pram>
<example>
函数原型:|string str.strtrim(string compstr,string sourcestr)|
函数说明:|去掉字符串头尾指定字符|
调用例子:|help.messagebox(str.strtrim("abcdefgabcdefgabc","abc"))
</example>
</function>


<!--移除前几位或后几位字符串-->
<function name="strcut">
<!--返回值:返回已砍掉几位的字符串-->
<returntype>string</returntype>
<!--参数:str 字符串,int 从前头砍掉的几位,bool 前后-->
<pram>(string str,int ncount,bool beginOrend)</pram>
<example>
函数原型:|string str.strcut(string str,int ncount,bool beginOrend)|
函数说明:|移除前几位或后几位字符串|
调用例子:|help.messagebox(str.strcut("abcdefghijiklnm",5,false))
</example>
</function>


<!--字符串中截取指定区域的字符串-->
<function name="strsub">
<!--返回值:返回截取到的指定区域的字符串-->
<returntype>string</returntype>
<!--参数:str字符串,begin 截取的开头位置,end 截取的末尾的位置-->
<pram>(string str,int begin,int end)</pram>
<example>
函数原型:|string str.strsub(string str,int begin,int end)|
函数说明:|字符串中截取指定区域的字符串|
调用例子:|help.messagebox(str.strsub("abcdefghijklmn",2,5))
</example>
</function>


<!--得到字符串长度-->
<function name="strleng">
<!--返回值:返回整形-->
<returntype>int</returntype>
<!--参数:str 求出长度信息的字符串-->
<pram>(string str)</pram>
<example>
函数原型:|int str.strleng(string str)|
函数说明:|得到字符串长度|
调用例子:|str.strleng("abdcdef")
</example>
</function>


<!--字符串中加字符-->
<function name="addchar">
<!--返回值:返回字符串-->
<returntype>string</returntype>
<!--参数:str字符串,key 字符ascii值-->
<pram>(string str,int key)</pram>
<example>
函数原型:|string str.addchar(string str,int key)|
函数说明:|字符串中加字符|
调用例子:|help.messagebox(str.addchar("abcdefghijklmn",13))
</example>
</function>


<!--字符串中找字符-->
<function name="findchar">
<!--返回值:返回找到字符的位置-->
<returntype>int</returntype>
<!--参数:str字符串,key 字符ascii值-->
<pram>(string str,int key)</pram>
<example>
函数原型:|int str.findchar(string str,int key)|
函数说明:|字符串中找字符|
调用例子:|str.findchar("abcdefghijklmn",65)
</example>
</function>


<!--在第一个字符串查找第一个字符串,并返回第一次出现该字符的位置-->
<function name="findstr">
<!--返回值:返回第一次出现该字符串的位置-->
<returntype>int</returntype>
<!--参数:compstr要比较字符串,sourcestr 源数据-->
<pram>(string compstr,string sourcestr)</pram>
<example>
函数原型:|int str.findstr(string compstr,string sourcestr)|
函数说明:|在第一个字符串查找第二个字符串,并返回第一次出现该字符串的位置|
调用例子:|str.findstr("uuuuabcdefgg","abc")
</example>
</function>


<!--根据给出的字符的位置,在字符串中找到对应的字符-->
<function name="strgetat">
<!--返回值:返回找到字符的ASCII码-->
<returntype>int</returntype>
<!--参数:str字符串,pos 要找到字符的位置-->
<pram>(string str,int post)</pram>
<example>
函数原型:|int str.strgetat(string str,int post)|
函数说明:|返回找到字符的ASCII码|
调用例子:|str.strgetat("abcdefghijklmn",6)
</example>
</function>


<!--2个字符串都截取前面几个字符的进行比较-->
<function name="strcompcnt">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->
<returntype>int</returntype>
<!--参数:str1字符串1，str2字符串2,count 截取多少位-->
<pram>(string str1,string str2,int count)</pram>
<example>
函数原型:|int str.strcompcnt(string str1,string str2,int count)|
函数说明:|2个字符串都截取前面几个字符的进行比较|
调用例子:|str.strcompcnt("abcdefg","bcdefghi",5)
</example>
</function>

<!--格式化字符串-->
<function name="format">
<!--返回值:返回格式化之后的字符串-->
<returntype>string</returntype>
<!--参数: 字符串 格式-->
<pram>(string str)</pram>
<example>
函数原型:|string str.format(string 字符串,...)|
函数说明:|格式化字符串|
调用例子:|
string str=str.format("%d%s%f",3,"bbb",1.223)
help.messagebox(str)
</example>
</function>


<!--判断字符串是否整型-->
<function name="isint">
<!--返回值:比较结果-->
<returntype>bool</returntype>
<!--参数:要判断的字符串-->
<pram>(string str,int type)</pram>
<example>
函数原型:|bool str.isint(string str,int type)|
函数说明:|判断字符串是否整型,type=0:表示判断十进制整型字符串,1:表示判断十六进制整型字符串|
调用例子:|
if(str.isint("1234",0))
help.messagebox("字串是整型")
endif
</example>
</function>

<!--判断字符串是否浮点型-->
<function name="isdouble">
<!--返回值:比较结果-->
<returntype>bool</returntype>
<!--参数:要判断的字符串-->
<pram>(string str)</pram>
<example>
函数原型:|bool str.isdouble(string str)|
函数说明:|判断字符串是否浮点型|
调用例子:|
if(str.isdouble("1234.0"))
help.messagebox("字串是浮点型")
endif
</example>
</function>

<!--字符串倒序-->
<function name="reverse">
<!--返回值:返回倒序后的字符串-->
<returntype>string</returntype>
<!--参数:str字符串-->
<pram>(string str)</pram>
<example>
函数原型:|string str.reverse(string str)|
函数说明:|字符串倒序|
调用例子:|help.messagebox(str.reverse("abc"))
</example>
</function>

<!--字符串替换-->
<function name="replace">
<!--返回值:返回倒序后的字符串-->
<returntype>string</returntype>
<!--参数:str字符串-->
<pram>(string str1,string str2,string str3)</pram>
<example>
函数原型:|string str.replace(string str1,string str2,string str3)|
函数说明:|字符串替换,查找并替换字符串中指定子串,1=需要替换的源字符串 2=需要被替换的字串 3=用于替换的子串|
调用例子:|
help.messagebox(str.replace("a1b1c1","1","2"))
</example>
</function>

<!--字符串分割-->
<function name="split">
<!--返回值:返回倒序后的字符串-->
<returntype>bool</returntype>
<!--参数:str字符串-->
<pram>(string sourcestr,string splitstr,string[] rstr)</pram>
<example>
函数原型:|bool str.split(string sourcestr,string splitstr,string[] rstr)|
函数说明:|字符串分割,根据分隔符把源串分割,返回给第三个参数(字符串数组)|
调用例子:|
string[] rstr=string[1]  //需要先初始化一次
string sourcestr="AB:CD:EF:GH:JK",splitstr=":"
bool isok=str.split(sourcestr,splitstr,rstr)
</example>
</function>

</namespace>

<!--类型转换空间-->
<namespace name="convert">

<!--双精度浮点转字符串-->
<function name="doubletostr">
<!--返回值:返回字符串-->
<returntype>string</returntype>
<!--参数:tostr要转换为字符串的双精度浮点数-->
<pram>(double tostr)</pram>
<example>
函数原型:|string convert.doubletostr(double tostr)|
函数说明:|双精度浮点转字符串|
调用例子:|
double number=333.333
string str=convert.doubletostr(number)
</example>
</function>

<!--字符串转双精度浮点数-->
<function name="strtodouble">
<!--返回值:返回双精度浮点-->
<returntype>double</returntype>
<!--参数:todouble要转换为双精度浮点数的字符串-->
<pram>(string todouble)</pram>
<example>
函数原型:|double convert.strtodouble(string todouble)|
函数说明:|字符串转双精度浮点数|
调用例子:|
string str="123"
double number=convert.strtodouble(str)
</example>
</function>

<!--整形转字符串-->
<function name="inttostr">
<!--返回值:返回字符串-->
<returntype>string</returntype>
<!--参数:inttostr要转换为字符串的整形数-->
<pram>(int tostr)</pram>
<example>
函数原型:|string convert.inttostr(int tostr)|
函数说明:|整型转字符串|
调用例子:|
int number=333
string str=convert.inttostr(333)
</example>
</function>

<!--字符串转整形-->
<function name="strtoint">
<!--返回值:返回整形-->
<returntype>int</returntype>
<!--参数:toint要转为整形数的字符串-->
<pram>(string toint,int type=0)</pram>
<example>
函数原型:|int convert.strtoint(string toint,int type=0)|
函数说明:|字符型转整型,type=0:表示传入十进制整型字符串,1:表示传入十六进制整型字符串,转换后数据为十进制整型|
调用例子:|
string str="123"
int number=convert.strtoint(str,0)
</example>
</function>

<!--double转int-->
<function name="doubletoint">
<!--返回值:返回int-->
<returntype>int</returntype>
<!--参数:toint要转为整形-->
<pram>(double toint)</pram>
<example>
函数原型:|int convert.doubletoint(double toint)|
函数说明:|双精度转int|
调用列子:|
int number=convert.doubletoint(123.333)
</example>
</function>

</namespace>



<!--颜色空间-->
<namespace name="color">

<!--在当前活动窗口区域内找色-->
<function name="findrectpixelcolor">
<!--返回值:给出的颜色值如果是当前活动窗口区域指定坐标点的颜色,返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:x 左上角的x坐标,y 左上角的y坐标,righbottomx 右下角的x坐标,righbottomy 右下角的y坐标, color 颜色的16进制值,dir 检索方式,返回的x坐标,返回的y坐标-->
<pram>(int x,int y,int righbottomx,int righbottomy,int color,int dir,int returnx,int returny)</pram>
<example>
函数原型:|bool color.findrectpixelcolor(int x,int y,int righbottomx,int righbottomy,int color,int dir,int returnx,int returny)|
函数说明:|在当前活动窗口区域内找颜色点|
调用列子:|
int x,y
color.findrectpixelcolor(10,10,500,600,#12EC3D,1,x,y)
</example>
</function>


<!--抓取当前活动窗口指定坐标点的颜色-->
<function name="getpixelcolor">
<!--返回值:返回颜色信息值字符串-->
<returntype>int</returntype>
<!--参数:点的x坐标，点的y坐标-->
<pram>(int x,int y)</pram>
<example>
函数原型:|int color.getpixelcolor(int x坐标,int y坐标)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|
int strcolor=color.getpixelcolor(300,300)
</example>
</function>


<!--在当前活动窗口区域内模糊找色点-->
<function name="findrectpixelcolorex">
<!--返回值:给出的颜色值如果是当前活动窗口区域指定坐标点的颜色点,找到以字符串形式返回颜色点的X坐标和Y坐标,并以分号区分开,否则返回空-->
<returntype>bool</returntype>
<!--参数:x 左上角的x坐标,y 左上角的y坐标,righbottomx 右下角的x坐标,righbottomy 右下角的y坐标,color 颜色的16进制值,相似度, dir 检索方式,返回的x坐标,返回的y坐标-->
<pram>(int x,int y,int righbottomx,int righbottomy,int color,double likes,int dir,int returnx,int returny)</pram>
<example>
函数原型:|bool color.findrectpixelcolorex(int x,int y,int righbottomx,int righbottomy,int color,double likes,int dir,int returnx,int returny)|
函数说明:|在当前活动窗口区域内模糊找颜色点|
调用列子:|
int x,y
color.findrectpixelcolorex(10,10,500,600,#12EC3D,0.8,1,x,y)
</example>
</function>


<!--在当前活动窗口区域内找图-->
<function name="findpic">
<!-- 返回值:图像格式正确返回true，错误返回false--> 
<returntype>int</returntype> 
<!-- 参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径,色偏,相似度,检索方式,返回找到的x坐标,y坐标--> 
<pram>(int left,int top,int right,int buttom,string path,int offset,double sim,int dir,int x,int y)</pram> 
<example>
函数原型:|int color.findpic(int left,int top,int right,int buttom,string path,int offset,double sim,int dir,int x,int y)|
函数说明:|在当前活动窗口区域内找图,返回的x,y为找到图的左上角坐标| 
调用列子:|
int isfind,x,y
isfind=color.findpic(0,0,1440,900,"d:\\111.bmp",#101010,1.0,0,x,y)|
</example> 
</function>


<!--16进制颜色值的字符串转10进制整型-->
<function name="hextoint">
<!--返回值:返回的是颜色值的十进制整型数据-->
<returntype>int</returntype>
<!--参数:16进制颜色值-->
<pram>(string 16进制颜色值)</pram>
<example>
函数原型:|int color.hextoint(string 16进制颜色值)|
函数说明:|16进制颜色值的字符串转10进制整型|
调用列子:|
int intcolor=color.hextoint("BBEEFF")
</example>
</function>

<!--16进制颜色值得到R G B值的-->
<function name="hextorgb">
<!--返回值:把16进制的颜色值转换为RGB值,分别以R值的十进制值,G值的十进制值,B值的十进制值进行返回。-->
<returntype>bool</returntype>
<!--参数:16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值-->
<pram>(int 16进制的颜色值,int R值的十进制值,int G值的十进制值,int B值的十进制值)</pram>
<example>
函数原型:|bool color.hextorgb(int 16进制的颜色值,int R值的十进制值,int G值的十进制值,int B值的十进制值)|
函数说明:|16进制颜色值得到R G B值的|
调用列子:|
int R,G,B
bool boolcolor=color.hextorgb(#BBEEFF,R,G,B)
</example>
</function>


<!--根据R G B的值获取16进制颜色值-->
<function name="rgbtohex">
<!--返回值:返回的是颜色值的十六进制字符型数据-->
<returntype>int</returntype>
<!--参数:R值的十进制值，G值的十进制值，B值的十进制值-->
<pram>(int R值的十进制值,int G值的十进制值,int B值的十进制值)</pram>
<example>
函数原型:|int color.rgbtohex(int R值的十进制值,int G值的十进制值,int B值的十进制值)|
函数说明:|根据R G B的值获取16进制颜色值-|
调用列子:|
int color=color.rgbtohex(50,100,150)
</example>
</function>

<!--找多点颜色值-->
<function name="findmutilcolor">
<!--返回值:返回真或者是假-->
<returntype>bool</returntype>
<!--参数:参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,第一点色,偏移点组,相似度,检索方式,返回找到的x坐标,y坐标-->
<pram>(int left,int top,int right,int buttom,int Color,string OffsetPoint,double sim,int dir,int x,int y)</pram>
<example>
函数原型:|bool color.findmutilcolor(int left,int top,int right,int buttom,int Color,string OffsetPoint,double sim,int dir,int x,int y)|
函数说明:|多点找色,先得到第一个颜色的坐标,之后根据偏移点组的数据判断各个点的颜色,如果条件全部符合,返回第一个颜色的坐标|
调用列子:|详情请看帮助文档
</example>
</function>

</namespace>


<!--进程命名空间-->
<namespace name="process">

<!--打开进程-->
<function name="openprocess">
<!--返回值:返回进程句柄-->
<returntype>int</returntype>
<!--参数:进程路径-->
<pram>(string path)</pram>
<example>
函数原型:|int process.openprocess(string path)|
函数说明:|打开一个进程|
调用例子:|
process.openprocess("d:\\MF\\wow.exe")
</example>
</function>


<!--读进程:读取一个字节的int数值 -->
<function name="readbyte">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(int inputhandle,int lpBaseAddress)</pram>
<example>
函数原型:|int process.readbyte(int inputhandle,int lpBaseAddress)|
函数说明:|读进程,读取1字节的内存的int值|
调用例子:|
int handle,read
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.readbyte(handle,#4FC000)
</example>
</function>


<!--读进程:读取16位数值(int)针对2个字节的整形-->
<function name="read2byte">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(int inputhandle,int lpBaseAddress)</pram>
<example>
函数原型:|int process.read2byte(int inputhandle,int lpBaseAddress)|
函数说明:|读进程,读取16位数值(int)针对2个字节整形|
调用例子:|
int handle,read
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.read2byte(handle,#4FC000)
</example>
</function>


<!--读进程:读取32位整形数值 int-->
<function name="read4byte">
<!--返回值:执行成功返回读到的数据，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(int inputhandle,int lpBaseAddress)</pram>
<example>
函数原型:|int process.read4byte(int inputhandle,int lpBaseAddress)|
函数说明:|读程序一个内存地址的位整形数值|
调用例子:|
int handle,read
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.read4byte(handle,#4FC000)
</example>
</function>


<!--读进程:根据地址读取指定长度的字符串,count表示字符串的长度-->
<function name="readstring">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址,count读出具体字符-->
<pram>(int inputhandle,int lpBaseAddress,int count)</pram>
<example>
函数原型:|string process.readstring(int inputhandle,int lpBaseAddress,int count)|
函数说明:|读进程,根据地址读取指定长度的字符|
调用例子:|
int handle=process.openprocess("D:\\Test.exe")
string read=process.readstring(handle,#4FC000,7)
</example>
</function>


<!--读进程:读取64位浮点值double-->
<function name="readdouble">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>double</returntype>
<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(int inputhandle,int lpBaseAddress)</pram>
<example>
函数原型:|double process.readdouble(int inputhandle,int lpBaseAddress)|
函数说明:|读进程:读取32位浮点数值|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
double read=process.readdouble(handle,#4FC000)
</example>
</function>


<!--读进程:读取32位浮点数值 float-->
<function name="readfloat">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>double</returntype>
<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(int inputhandle,int lpBaseAddress)</pram>
<example>
函数原型:|double process.readfloat(int inputhandle,int lpBaseAddress)|
函数说明:|读进程:读取32位浮点数值|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
double read=process.readfloat(handle,#4FC000)
</example>
</function>


<!--读进程:根据地址读取指定长度的字符串,用于unicode编码的程序,count表示字符串的长度-->
<function name="readstringunicode">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址,count 读出具体字符-->
<pram>(int inputhandle,int lpBaseAddress,int count)</pram>
<example>
函数原型:|string process.readstringunicode(int inputhandle,int lpBaseAddress,int count)|
函数说明:|读进程,根据地址读取指定长度的字符|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
string read=process.readstringunicode(handle,#4FC000,7)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="findbyte">
<!--返回值:返回找到第一个匹配数据地址的一个字节的int值，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(int handle,int number,int lpbegin,int lpend)</pram>
<example>
函数原型:|int process.findbyte(int handle,int number,int lpbegin,int lpend)|
函数说明:| 搜索指定值并返回该值地址|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
int address=process.findbyte(handle,5,#4FC000,#7fffffff)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="find2byte">
<!--返回值:返回找到第一个匹配数据地址的int值，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(int handle,int number,int lpbegin,int lpend)</pram>
<example>
函数原型:|int process.find2byte(int handle,int number,int lpbegin,int lpend)|
函数说明:|搜索指定值并返回该值地址|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
int address=process.find2byte(handle,5,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="find4byte">
<!--返回值:返回找到第一个匹配数据地址的整形值，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(int handle,int number,int lpbegin,int lpend)</pram>
<example>
函数原型:|int process.find4byte(int handle,int number,int lpbegin,int lpend)|
函数说明:| 搜索指定值并返回该值地址|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
int address=process.find4byte(handle,5,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="findstring">
<!--返回值:返回找到第一个匹配数据地址的string字符串，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄, str传进去的字符串,lpbegin起始地址,lpend结束地址-->
<pram>(int handle,string str,int lpbegin,int lpend)</pram>
<example>
函数原型:|int process.findstring(int handle,string str,int lpbegin,int lpend)|
函数说明:| 搜索指定字符串并返回该值地址|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
int address=process.findstring(handle,"abcdefg",#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="finddouble">
<!--返回值:返回找到第一个匹配数据地址的double值，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(int handle,double number,int lpbegin,int lpend)</pram>
<example>
函数原型:|int process.finddouble(int handle,double number,int lpbegin,int lpend)|
函数说明:| 搜索指定值并返回该值地址|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
int address=process.finddouble(handle,8.15,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="findfloat">
<!--返回值:返回找到第一个匹配数据地址的float值，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(int handle,double number,int lpbegin,int lpend)</pram>
<example>
函数原型:|int process.findfloat(int handle,double number,int lpbegin,int lpend)|
函数说明:| 搜索指定值并返回该值地址|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
int address=process.findfloat(handle,8.15,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址(针对的是unicodei码)-->
<function name="findstringunicode">
<!--返回值:返回找到第一个匹配数据地址的string字符串，否则返回0-->
<returntype>int</returntype>
<!--参数:inputhandle 程序句柄, str传进去的字符串,lpbegin起始地址,lpend结束地址-->
<pram>(int handle,string str,int lpbegin,int lpend)</pram>
<example>
函数原型:|int process.findstringunicode(int handle,string str,int lpbegin,int lpend)|
函数说明:| 搜索指定值并返回该值地址|
调用例子:|
int handle=process.openprocess("D:\\MF\\wow.exe")
int address=process.findstringunicode(handle,"login",#4FC000,#7fffffff)
</example>
</function>


                                                  
<!--等待窗口初始化完成--> 
<function name="waitfor">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>int</returntype>
<!--参数:inputhandle 句柄,time 时间-->
<pram>(int inputhandle,int time)</pram>
<example>
函数原型:|int process.waitfor(int inputhandle,int time)|
函数说明:|等待窗口初始化完成|
调用例子:|
int handle=process.openprocess("D:\\MF\\Wow.exe")
process.waitfor(handle,10000)
</example>
</function>


<!--通过窗口名获取进程的句柄--> 
<function name="getprocessid">
<!--返回值:执行成功返回进程句柄，否则返回0-->
<returntype>int</returntype>
<!--参数:应用程序的窗口名-->
<pram>(string 窗口名)</pram>
<example>
函数原型:|int process.getprocessid(string 窗口名)|
函数说明:|通过窗口名获取进程的ID|
调用例子:|
int id=process.getprocessid("大话西游")
</example>
</function>

<!--通过进程句柄关闭指定进程--> 
<function name="closeprocess">
<!--返回值:指定进程成功关闭返回为真，否则返回为假-->
<returntype>bool</returntype>
<!--参数:进程句柄-->
<pram>(int 进程句柄)</pram>
<example>
函数原型:|bool process.closeprocess(int 进程句柄)|
函数说明:|通过进程句柄关闭指定进程|
调用例子:|
int id=process.getprocessid("大话西游")
bool exit=process.closeprocess(id)
</example>
</function>

<!--搜索字节数组并返回该值地址-->
<function name="findbytearray">
<!--返回值:返回找到第一个匹配整型整形值的数据地址，否则返回0-->
<returntype>int</returntype>
<!--参数:进程句柄 要查找数据的进程句柄, 字节数组,起始地址,结束地址-->
<pram>(int 进程句柄,string 字节数组,int 起始地址,int 结束地址)</pram>
<example>
函数原型:|int process.findbytearray(int 进程句柄,string 字节数组,int 起始地址,int 结束地址)|
函数说明:|搜索指定字节数组数据并返回第一次找到该值的地址|
调用例子:|
int handle,addr
handle=process.openprocess("D:\\MF\\Wow.exe")
addr=process.findbytearray(handle,"10 F0 A0 04",#4FC000,#7fffffff)
</example>
</function>

<!--扩展打开进程-->
<function name="openprocessex">
<!--返回值:返回进程句柄-->
<returntype>int</returntype>
<!--参数:进程路径-->
<pram>(string path,string param)</pram>
<!--举列:process.openprocess("d:\\1.exe")-->
<example>
函数原型:|int process.openprocessex(string path,string param)|
函数说明:|打开一个进程,如不需使用第二参数,第二参数可为空字符|
调用例子:|
process.openprocessex("rc:B.exe","我是参数")
</example>
</function>

<!--获取进程参数-->
<function name="getparam">
<!--返回值:返回进程的句柄-->
<returntype>string</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|string process.getparam()|
函数说明:|获取process.getparam()打开进程传入的参数(必须在被打开进程中调用,才能正确获取)|
调用例子:|
string paramvalue=process.getparam()
</example>
</function>

<!-- 读取字节数组 -->
<function name="readbytearray">
<!--返回值: 读取的值-->
<returntype>string</returntype>
<!--参数:进程句柄 起始地址,个数 -->
<pram>(int phandle,int beginAddr,int ncout)</pram>
<example>
函数原型:|string process.readbytearray(int phandle,int beginAddr,int ncout)|
函数说明:|从指定的内存地址开始读取指定个数的字节数据|
调用例子:|
int phandle=process.openprocess("D:\\MF\\Wow.exe")
// 读取的字符型数据格式为"23 3F 5A" 全是16进制数据，以空格符隔开
string data=process.readbytearray(phandle,#4FC000,4)
</example>
</function>


</namespace>


<!--辅助命名空间-->
<namespace name="help">

<!--延时-->
<function name="sleep">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:million 窗口延时多少毫秒-->
<pram>(int million)</pram>
<example>
函数原型:|bool help.sleep(int million)|
函数说明:|窗口延时多少毫秒|
调用例子:|help.sleep(5000)
</example>
</function>


<!--消息对话框-->
<function name="messagebox">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:content 对话框的内容-->
<pram>(string content)</pram>
<example>
函数原型:|bool help.messagebox(string content)|
函数说明:|消息对话框|
调用例子:|help.messagebox("这是消息框")
</example>
</function>


<!--剪切板-->
<function name="setclip">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:content 对话框的内容-->
<pram>(string content)</pram>
<example>
函数原型:|bool help.setclip(string content)|
函数说明:|设置剪切板|
调用例子:|
help.setclip("aaa")
</example>
</function>


<!--粘贴-->
<function name="getclip">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|string help.getclip()|
函数说明:|读取剪切板|
调用例子:|
help.getclip()
</example>
</function>


<!--拨mp3音乐-->
<function name="playmp">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>int</returntype>
<!--参数: mp3音乐路径以及名字-->
<pram>(string mp3)</pram>
<example>
函数原型:|int help.playmp(string mp3)|
函数说明:|播放音乐,该函数由线程方法实现,所以不能再写入线程调用|
调用例子:|
int ID = help.playmp("d:\\测试歌曲.mp3")
help.sleep(15000)
help.stopmp(ID)
</example>
</function>

<!--停止拨mp3音乐-->
<function name="stopmp">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数: mp3音乐路径以及名字-->
<pram>(int ID)</pram>
<example>
函数原型:|bool help.stopmp(int ID)|
函数说明:|停止播放音乐|
调用例子:|
int ID = help.playmp("d:\\测试歌曲.mp3")
help.sleep(15000)
help.stopmp(ID)
</example>
</function>

<!--输入框--> 
<function name="inputbox">
<!--返回值:成功返回true,失败返回false-->
<returntype>int</returntype>
<!--参数:托盘名称-->
<pram>(string name,string str,string retstr)</pram>
<example>
函数原型:|int help.inputbox(string name,string str,string retstr)|
函数说明:|弹出输入框让用户输入数据,并返回用户输入|
调用例子:|
string retstr
int ret=help.inputbox("TChello","请输入内容",retstr)
help.messagebox(retstr)
</example>
</function>


<!-- 当前窗口截图 --> 
<function name="printscreen">
<!-- 返回值:截图成功返回真,否则返回假--> 
<returntype>bool</returntype> 
<!-- 参数:x左上角,y右上角,rightbottom左下角，rightbottom右下角--> 
<pram>(int x,int y,int leftdown,int rightbottom,string path)</pram> 
<!-- 举列:help.printscreen(10,10,200,300,"c://aa.bmp")--> 
<example>
函数原型:|bool help.printscreen(int x,int y,int leftdown,int rightbottom,string path)|
函数说明:|窗口截图|
调用例子:|
help.printscreen(10,10,200,300,"c:\\aa.bmp")
</example>
</function>


<!--确认消息对话框-->
<function name="confirmationbox">
<!--返回值:0:终止, 1:取消, 2:继续, 3:忽略, 4:否, 5:确定, 6:重试, 7:是-->
<returntype>int</returntype>
<!--参数:content 对话框的内容-->
<pram>(string Text,string Caption,int type,bool istop)</pram>
<example>
函数原型:|int help.confirmationbox(string Text,string Caption,int type,bool istop)|
函数说明:|弹出对话框,对话框类型:0:确定,1:确定--取消,2:是--否,3:是--否--取消,4:重试--取消,5:取消--重试--继续, 6:终止--重试--忽略 返回值:0:终止,1:取消,2:继续,3:忽略,4:否,5:确定,6:重试,7:是|
调用例子:|
int ret=help.confirmationbox("这是确认对话框","我是标题",3,true)
</example>
</function>


<!-- 在写配置文件的信息--> 
<function name="writeini">
<!-- 返回值:执行成功返回真，否则返回假--> 
<returntype>bool</returntype> 
<!-- 参数:captionname配置文件的属性名,caption 配置文件属性字段 setcaption 设置配置文件属性,filepath配置文件路径--> 
<pram>(string captionname,string caption,string setcaption,string filepath)</pram> 
<example>
函数原型:|bool help.writeini(string captionname,string caption,string setcaption,string filepath)|
函数说明:|在写配置文件的信息|
调用例子:|help.writeini("RealmName","East","serverGerman","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!-- 在读配置文件的信息--> 
<function name="readini">
<!-- 返回值:执行成功返回真，否则返回假,返回读出的数据 --> 
<returntype>string</returntype> 
<!-- 参数:captionname配置文件的属性名,caption 配置文件属性字段,filepath配置文件路径--> 
<pram>(string captionname,string caption,string filepath)</pram> 
<example>
函数原型:|string  help.readini(string captionname,string caption,string filepath)|
函数说明:|在读配置文件的信息|
调用例子:|help.readini("RealmName","East","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!--随机函数-->
<function name="randto">
<!--返回值:返回随机的整形-->
<returntype>int</returntype>
<!--参数:范围-->
<pram>(int begin,int end)</pram>
<example>
函数原型:|int randto(int begin,int end)|
函数说明:|得到一个指定范围内随机函数|
调用例子:|
int number=help.randto(10,30)
</example>
</function>

<!--获取资源路径--> 
<function name="getrcpath">
<!--返回值:执行成功返回当前路径，否则返回空-->
<returntype>string</returntype>
<!--参数:空-->
<pram>(string path)</pram>
<example>
函数原型:|string help.getrcpath(string rcpath)|
函数说明:|获取rc:(资源)路径的真实全路径,支持多路径,用竖线隔开(不会判断文件是否存在,只会转换当前资源路径返回)|
调用例子:|
string path=help.getrcpath("rc:1.bmp")
help.messagebox(path)
</example>
</function>

<!--执行CMD命令--> 
<function name="cmd">
<!-- 返回值:执行CMD命令成功返回真--> 
<returntype>bool</returntype> 
<!-- 参数:string cmdstr,bool isHide--> 
<pram>(string cmdstr,bool isHide)</pram> 
<example>
函数原型:|bool help.cmd(string cmdstr,bool isHide)|
函数说明:|执行CMD命令,第一个参数是命令,第二个参数表示是否隐藏,true是隐藏,false不隐藏|
调用例子:|bool ret=help.cmd("www.tyuyan.com",false)
</example>
</function>

<!--退出自身进程--> 
<function name="exit">
<!-- 返回值:退出成功返回真--> 
<returntype>bool</returntype> 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|bool help.exit()|
函数说明:|退出自身进程|
调用例子:|bool exit=help.exit()
</example>
</function>

<!--蜂鸣器--> 
<function name="beep">
<!-- 返回值:退出成功返回真--> 
<returntype>bool</returntype> 
<!-- 参数:频率--> 
<pram>(int 频率,int 时长)</pram> 
<example>
函数原型:|bool help.beep(int 频率,int 时长)|
函数说明:|控制蜂鸣器发音|
调用例子:|
help.beep(1000,1000)
</example>
</function>

<!--判断插件是否注册--> 
<function name="isregister">
<!-- 返回值:注册成功返回真--> 
<returntype>bool</returntype> 
<!-- 参数:插件接口名--> 
<pram>(string portname)</pram> 
<example>
函数原型:|bool help.isregister(string portname)|
函数说明:|通过插件接口,判断插件是否注册|
调用例子:|
bool ret=help.isregister("dm.dmsoft")
if(ret)
help.messagebox("插件已注册")
endif
</example>
</function>

<!--注册插件--> 
<function name="regdll">
<!-- 返回值:注册成功返回真--> 
<returntype>bool</returntype> 
<!-- 参数:插件接口名--> 
<pram>(string path,bool type)</pram> 
<example>
函数原型:|bool help.regdll(string path,bool type)|
函数说明:|注册或卸载插件,第二参数为true注册插件,为false卸载插件|
调用例子:|
bool ret=help.regdll("c:\\dm.dll",true)
if(ret)
help.messagebox("插件注册成功")
endif
</example>
</function>

<!--最小化到托盘--> 
<function name="settray">
<!--返回值:成功返回true,失败返回false-->
<returntype>bool</returntype>
<!--参数:托盘名称-->
<pram>(string name,bool min_state=true)</pram>
<example>
函数原型:|bool help.settray(string name,bool min_state=true)|
函数说明:|设置程序托盘化(任务栏右下角创建程序小图标),为真托盘化后不隐藏程序窗口,为假托盘化后隐藏程序窗口|
调用例子:|
help.settray("my_tray",false)
</example>
</function>

</namespace>


<!--网络-->
<namespace name="net">

<!--向页面提交内容-->
<function name="urlsubnetrequest">
<!--返回值:提交是否成功-->
<returntype>bool</returntype>
<!--参数:subpath 要提交的web地址-->
<pram>(string subpath)</pram>
<example>
函数原型:|bool net.urlsubnetrequest(string subpath)|
函数说明:|向页面提交内容|
调用列子:|net.urlsubnetrequest("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--提交一个页面并读一个页面的内容-->
<function name="urlgetnetrequest">
<!--返回值:读到的页面内容-->
<returntype>string</returntype>
<!--参数:subpath 要提交的web地址-->
<pram>(string subpath,int codingtype=0)</pram>
<example>
函数原型:|string net.urlgetnetrequest(string subpath,int codingtype=0)|
函数说明:|读取页面的内容,编码类型: 0: 使用UTF-8转换 1: 使用UTF-7转换 2: 符号字符集 3: 当前线程ANSI代码页 4: Macintosh代码页 5: OEM代码页 6: ANSI字符集|
调用例子:|net.urlgetnetrequest("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--初始化--> 
<function name="wsastartup">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|bool net.wsastartup()|
函数说明:|初始化网络环境,使用网络编程函数前需要先用该函数初始化|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--关闭初始化--> 
<function name="close">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|bool net.close()|
函数说明:|网络程序结束后释放网络资源,关闭初始化|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--创建套接字--> 
<function name="socket">
<!--返回值:整型值-->
<returntype>int</returntype>
<!--参数:模式-->
<pram>(int type)</pram>
<example>
函数原型:|int net.socket(int type)|
函数说明:|创建套接字,返回套接字句柄 1:创建流式套接字(TCP) 2:数据报套接字(UDP)|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--关闭套接字--> 
<function name="closesocket">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:套接字句柄-->
<pram>(int sockhandle)</pram>
<example>
函数原型:|bool net.closesocket(int sockhandle)|
函数说明:|网络程序结束后,关闭套接字,释放资源|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--绑定--> 
<function name="bind">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:套接字句柄,端口-->
<pram>(int sockhandle,int port)</pram>
<example>
函数原型:|bool net.bind(int sockhandle,int port)|
函数说明:|绑定套接字,并开启指定端口|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--监听--> 
<function name="listen">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:套接字句柄,端口-->
<pram>(int sockhandle,int ncout)</pram>
<example>
函数原型:|bool net.listen(int sockhandle,int ncout)|
函数说明:|监听套接字,指定可同时连接数|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--接受--> 
<function name="accept">
<!--返回值:新的套接字句柄-->
<returntype>int</returntype>
<!--参数:套接字句柄,端口-->
<pram>(int sockhandle,string rIP)</pram>
<example>
函数原型:|int net.accept(int sockhandle,string rIP)|
函数说明:|接受一个客户端的连接,返回一个新的套接字句柄(程序结束后记得释放该套接字句柄),第二参数返回该客户端的ip地址|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--发送--> 
<function name="send">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:套接字句柄,端口-->
<pram>(int sockhandle,string sendBuff)</pram>
<example>
函数原型:|bool net.send(int sockhandle,string sendBuff)|
函数说明:|向一个绑定的套接字发送字符串|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--接收--> 
<function name="recv">
<!--返回值:接收串-->
<returntype>bool</returntype>
<!--参数:套接字句柄,端口-->
<pram>(int sockhandle,string rcveBuff)</pram>
<example>
函数原型:|bool net.recv(int sockhandle,string rcveBuff)|
函数说明:|接收一个绑定套接字发送过来的数据|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
string rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--连接--> 
<function name="connect">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:套接字句柄,端口-->
<pram>(int sockhandle,string ServerIp,int ServerPor t)</pram>
<example>
函数原型:|bool net.connect(int sockhandle,string ServerIp,int ServerPort)|
函数说明:|客户端向服务器发送一个连接(服务器接受连接后即可与服务器通讯),如果没有连接该函数将会等待,直到有连接过来为止|
调用例子:|
net.wsastartup() //初始化网络环境
int ClientHandle=net.socket(1) //创建流式(TCP)套接字
net.connect(ClientHandle,"127.0.0.1",9999) //这里测试所以连接的是本机
string SendTemp="服务器,你好,我是客户端",rRcvTemp
net.recv(ClientHandle,rRcvTemp) //接收从服务器发送的字串
help.messagebox(rRcvTemp) //打印从服务器接收的字串
net.send(ClientHandle,SendTemp)//向指定服务器发送一串字符串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--接收来自--> 
<function name="recvfrom">
<!--返回值:接收串-->
<returntype>bool</returntype>
<!--参数:套接字句柄,地址,端口-->
<pram>(int sockhandle,string recvbuff,int recvlength,string rIP,int rPort)</pram>
<example>
函数原型:|bool net.recvfrom(int sockhandle,string recvbuff,int recvlength,string rIP,int rPort)|
函数说明:|接收指定地址发送过来的数据(一般用于UDP通讯)|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(2) //创建数据报(UDP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
int rPort
string rRcvTemp,rIP,SendTemp="你好,收到我发的消息了没"
net.sendto(ServerHandle,SendTemp,"127.0.0.1",9999) //向指定地址端发送一串字符串
net.recvfrom(ServerHandle,rRcvTemp,100,rIP,rPort) //接收数据
help.messagebox(rRcvTemp) //打印从指定地址接收的字串
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--发送到--> 
<function name="sendto">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(int sockhandle,string sendbuff,string ip,int port)</pram>
<example>
函数原型:|bool net.sendto(int sockhandle,string sendbuff,string ip,int port)|
函数说明:|发送字符串到指定地址(一般用于UDP通讯)|
调用例子:|
net.wsastartup() //初始化网络环境
int ServerHandle=net.socket(2) //创建数据报(UDP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
int rPort
string rRcvTemp,rIP,SendTemp="你好,收到我发的消息了没"
net.sendto(ServerHandle,SendTemp,"127.0.0.1",9999) //向指定地址端发送一串字符串
net.recvfrom(ServerHandle,rRcvTemp,100,rIP,rPort) //接收数据
help.messagebox(rRcvTemp) //打印从指定地址接收的字串
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--域名解析--> 
<function name="dns">
<!--返回值:ip地址-->
<returntype>string</returntype>
<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(string IDN)</pram>
<example>
函数原型:|string net.dns(string IDN)|
函数说明:|域名解析,传入域名,返回IP地址|
调用例子:|
string r_ip=net.dns("www.tyuyan.com")
</example>
</function>

  <!--发送文件-->
  <function name="sendfile">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    <returntype>int</returntype>
    <!--参数:套接字句柄,端口-->
    <pram>(int sockhandle,string filename)</pram>
    <example>
      函数原型:|int net.sendfile(int sockhandle,string filename)|
      函数说明:|发送指定目录下的文件到网络,返回值类型:0 成功,-1 套接字错误,-2 发送文件路径错误,-3 网络异常|
      调用例子:|
      net.wsastartup() //初始化网络环境
      int ClientHandle=net.socket(1) //创建流式(TPC)套接字
      net.connect(ClientHandle,"127.0.0.1",9999) //这里测试所以连接的是本机
      int sendret=net.sendfile(ClientHandle,"E:\\1.bmp") //发送文件
      if(sendret!=0)
      help.messagebox("发送文件失败")
      endif
      net.closesocket(ClientHandle) //关闭套接字释放资源
      net.close() //关闭网络环境释放资源
    </example>
  </function>

  <!--接收文件-->
  <function name="recvfile">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    <returntype>int</returntype>
    <!--参数:套接字句柄,端口-->
    <pram>(int sockhandle,string filename)</pram>
    <example>
      函数原型:|int net.recvfile(int sockhandle,string filename)|
      函数说明:|接收网络文件，并保存带指定目录下的文件,返回值类型:0 成功,-1 套接字错误,-2 发送文件路径错误,-3 网络异常|
      调用例子:|
      net.wsastartup() //初始化网络环境
      int  ServerHandle=net.socket(1) //创建流式(TPC)套接字
      net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
      net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
      string rIP
      int ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
      int rRcv=net.recvfile(ClientHandle,"E:\\2.bmp") //接收从客户端发送文件并保存到E盘下2.bmp
      if(rRcv!=0)
      help.messagebox("接收文件失败")
      endif
      net.closesocket(ClientHandle) //关闭套接字释放资源
      net.closesocket(ServerHandle) //关闭套接字释放资源
      net.close() //关闭网络环境释放资源
    </example>
  </function>
  
  <!--获取错误信息--> 
<function name="getlasterror">
<!--返回值:错误值-->
<returntype>int</returntype>
<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>()</pram>
<example>
函数原型:|int net.getlasterror()|
函数说明:|获得最近一次失败操作的错误情况,错误值详情见帮助文档|
调用例子:|int error=net.getlasterror()
</example>
</function>

</namespace>



<!--系统空间-->
<namespace name="system">

<!--得到当前系统时间-->
<function name="getsystime">
<!--返回值:显示系统时间-->
<returntype>string</returntype>
<!--参数:无-->
<pram>(int 模式)</pram>
<example>
函数原型:|string system.getsystime(int 模式)|
函数说明:|显示系统时间|
调用列子:|system.getsystime(1)
</example>
</function>

<!--得到当前屏幕分辩率的高度-->
<function name="getscreen">
<!--返回值:显示分辨率高度-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>(int x,int y)</pram>
<example>
函数原型:|bool system.getscreen(int x,int y)|
函数说明:|显示分辨率高度|
调用列子:|
int x,y
system.getscreen(x,y)
</example>
</function>

<!--得到当前系统的版本信息-->
<function name="getsysinfo">
<!--返回值:版本信息-->
<returntype>string</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|string  system.getsysinfo()|
函数说明:|版本信息|
调用列子:|system.getsysinfo()
</example>
</function>


<!--获取当前进程的全路径--> 
<function name="getprocesspath">
<!--返回值:执行成功返回进程路径，否则返回0-->
<returntype>string</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|string system.getprocesspath()|
函数说明:|获取当前进程的全路径|
调用例子:|
system.getprocesspath()
</example>
</function>


<!--获取操作系统启动到现在所经过的毫秒数--> 
<function name="gettickcount">
<!-- 返回值:操作系统启动到现在所经过的毫秒数--> 
<returntype>int</returntype> 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|int system.gettickcount()|
函数说明:|获取操作系统启动到现在所经过的毫秒数|
调用例子:|int time=system.gettickcount()
</example>
</function>


<!--设置当前屏幕的分辩率-->
<function name="setscreen">
<!--返回值:返回true为修改分辨率成功，false为修改分辨率失败-->
<returntype>bool</returntype>
<!--参数:无-->
<pram>(int 分辨率宽度,int 分辨率高度)</pram>
<example>
函数原型:|bool system.setscreen(分辨率宽度 ,分辨率高度)|
函数说明:|设置当前屏幕的分辩率|
调用列子:|system.setscreen(1024,768)
</example>
</function>

<!--获取当前路径--> 
<function name="getcurrentpath">
<!--返回值:执行成功返回当前路径，否则返回0-->
<returntype>string</returntype>
<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|string system.getcurrentpath()|
函数说明:|获取当前路径|
调用例子:|
string path=system.getcurrentpath()
</example>
</function>

<!--设置当前路径--> 
<function name="setcurrentpath">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:路径-->
<pram>(string 路径)</pram>
<example>
函数原型:|bool system.setcurrentpath(string 路径)|
函数说明:|设置程序路径|
调用例子:|
system.setcurrentpath("D:\\")
</example>
</function>

<!--获取系统特殊目录--> 
<function name="getsyspath">
<!--返回值:执行成功返回当前路径，否则返回0-->
<returntype>string</returntype>
<!--参数:空-->
<pram>(int type)</pram>
<example>
函数原型:|string system.getsyspath(int type)|
函数说明:|获取系统特殊目录,有0~5六种模式获取6个不同路径,详情见帮助文档|
调用例子:|
string path=system.getsyspath(0)
help.messagebox(path)
</example>
</function>

<!--创建注册表项--> 
<function name="regcreate">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:模式-->
<pram>(string path,string name)</pram>
<example>
函数原型:|bool system.regcreate(string path,string name)|
函数说明:|创建注册表项|
调用例子:|
bool ret=system.regcreate("HKEY_CURRENT_USER\\Software","TC你好")
//在注册表HKEY_CURRENT_USER\Software 路径下创建项,项名称为TC你好
</example>
</function>

<!--创建或修改注册表键值--> 
<function name="regcreatekey">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:模式-->
<pram>(string path,string name,string vlaue,int vlauetype)</pram>
<example>
函数原型:|bool system.regcreatekey(string path,string name,string vlaue,int vlauetype)|
函数说明:|创建,修改注册表键值,如果键值不存在则创建,存在则修改|
调用例子:|
bool ret=system.regcreatekey("HKEY_CURRENT_USER\\Software\\TC你好","TC很好","这里是键值的内容",0)
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下创建键值,键名为"TC很好",键值内容为"这里是键值的内容"
</example>
</function>

<!--获取注册表键名对应的键值,并返回--> 
<function name="reggetvalue">
<!--返回值:键值-->
<returntype>string</returntype>
<!--参数:模式-->
<pram>(string path,string name)</pram>
<example>
函数原型:|string system.reggetvalue(string path,string name)|
函数说明:|获取注册表键名对应的键值,并返回|
调用例子:|
string ret=system.reggetvalue("HKEY_CURRENT_USER\\Software\\TC你好","TC很好")
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下查找键名为"TC很好"的键值,并返回键值
help.messagebox(ret)
</example>
</function>

<!--删除注册表项或键值--> 
<function name="regdelete">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:模式-->
<pram>(string path,string name,int type)</pram>
<example>
函数原型:|bool system.regdelete(string path,string name,int type)|
函数说明:|删除注册表项或键值|
调用例子:|
bool ret=system.regdelete("HKEY_CURRENT_USER\\Software","TC你好",0)
//在注册表HKEY_CURRENT_USER\Software 路径下删除项TC你好,模式0为删除项,1为删除键值
</example>
</function>

<!--枚举-->
<function name="enum">
<!--返回值:返回枚举到的类型值-->
<returntype>string</returntype>
<!--参数:窗口名-->
<pram>(string name,int type)</pram>
<example>
函数原型:|string system.enum(string name,int type)|
函数说明:|根据类型枚举需要的类型,返回枚举后的结果,未找到返回空字符,type:0:窗口名枚举窗口句柄,1:类名枚举窗口句柄,2:进程名枚举进程句柄,3:父窗口句柄枚举子窗口句柄(参数1为空串"",将以桌面句柄为父窗口句柄)|
调用例子:|
string ret=system.enum("计算器",0)
help.messagebox(ret)
</example>
</function>

<!--定时关机-->
<function name="shutdown">
<!--返回值:返回关机的时间-->
<returntype>int</returntype>
<!--参数:sec 具体的几秒后关机-->
<pram>(int sec)</pram>
<example>
函数原型:|int shutdown(int sec)|
函数说明:|设定几秒后关机|
调用例子:|
system.shutdown(5)
</example>
</function>

</namespace>



<!-- 任务的支持函数--> 
<namespace name="thread">

<!-- 任务的开启函数--> 
<function name="beginthread">
<returntype>int</returntype> 
<!--参数:funcname要被任务的函数-->
<pram>(string funcname,string param)</pram> 
<example>
函数原型:|int thread.beginthread(string funcname,string param)|
函数说明:|线程的开启函数,并将第二参数作为参数传给被调用的函数|
调用列子:|
//定义一个线程函数
function  int threadfunction(string param) //这里接收线程开启时传入的参数
help.messagebox("thread" + param)
return 0
endfunction
//调用线程函数方法
function int start()
thread.beginthread("我的程序.threadfunction","我是参数")
help.sleep(5000)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!-- 任务的开启函数--> 
<function name="beginthreadex">
<returntype>int</returntype> 
<!--参数:funcname要被任务的函数-->
<pram>(string funcname,string openparam,string fundestory,string closeparam)</pram> 
<example>
函数原型:|int thread.beginthreadex(string funcname,string openparam,string fundestory,string closeparam)|
函数说明:|线程的扩展开启函数|
调用列子:|
//定义一个线程函数
function int threadfunction(string param) //这里接收线程开启时传入的参数
help.messagebox("thread" + param)
return 0
endfunction
//定义一个线程函数
function int threadfundesotry(string param) //这里接收线程销毁时传入的参数
help.messagebox("desotry" + param )
return 0
endfunction
//调用线程函数方法
function int start()
thread.beginthreadex("我的程序.threadfunction","我是参数A","我的程序.threadfundesotry","我是参数B")
help.sleep(5000)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!-- 任务的关闭函数--> 
<function name="closethread">
<returntype>bool</returntype> 
<!--参数:handle要关闭的任务函数句柄-->
<pram>(int handle)</pram> 
<example>
函数原型:|bool thread.closethread(handle)|
函数说明:|任务关闭|
调用列子:|
//定义一个线程函数
function  int threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程关闭功能
function int  start()
int handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
thread.closethread(handle)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>


<!--单任务的等待-->
<function name="waitforthread">
<!--返回值:返回执行状态的整形-->
<returntype>int</returntype> 
<!--参数:handle任务句柄,sec等待几秒-->
<pram>(int handle,int sec)</pram> 
<example>
函数原型:|int thread.waitforthread(int handle,int sec)|
函数说明:|线程等待,第二参数小于等于0 时为无限等待模式|
调用列子:|
//定义一个线程函数
function  int threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程等待功能
function int start()
int handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
int state
state=thread.waitforthread(handle,10)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!--关闭句柄-->
<function name="closehandle">
<!--返回值:句柄-->
<returntype>bool</returntype>
<!--参数:句柄-->
<pram>(int handle)</pram>
<example>
函数原型:|bool thread.closehandle(int handle)|
函数说明:|通过句柄,关闭内核对象,释放资源|
调用例子:|
int handle//一般定义成全局句柄
handle=thread.createevent(false,true,"新的事件")//设置事件为手动模式,初始时事件可用
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--任务暂停-->
<function name="suspendthread">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype> 
<!--参数:handle 任务句柄整形值-->
<pram>(int handle)</pram> 
<example>
函数原型:|bool thread.suspendthread(int handle)|
函数说明:|任务暂停|
调用列子:|
//定义一个线程函数
function  int threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程暂停--恢复等功能
function int start()
int handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
thread.suspendthread(handle)
help.sleep(2000)
thread.resumethread(handle)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!--任务恢复-->
<function name="resumethread">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype> 
<!--参数:handle 任务句柄整形值-->
<pram>(int handle)</pram> 
<example>
函数原型:|bool thread.resumethread(int handle)|
函数说明:|任务恢复|
调用列子:|
//定义一个线程函数
function  int threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程暂停--恢复等功能
function int start()
int handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
thread.suspendthread(handle)
help.sleep(2000)
thread.resumethread(handle)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!--创建临界区-->
<function name="createcritical">
<!--返回值:true-->
<returntype>int</returntype>
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|int thread.createcritical()|
函数说明:|创建临界区对象|
调用例子:|
int handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--进入临界区-->
<function name="entercritical">
<!--返回值:true-->
<returntype>bool</returntype>
<!--参数:句柄-->
<pram>(int handle)</pram>
<example>
函数原型:|bool thread.entercritical(int handle)|
函数说明:|进入临界区,使临界区处于占用状态,让其他想进入临界区的线程挂起等待,直到离开临界区其他线程才能进入|
调用例子:|
int handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--离开临界区-->
<function name="leavecritical">
<!--返回值:true-->
<returntype>bool</returntype>
<!--参数:句柄-->
<pram>(int handle)</pram>
<example>
函数原型:|bool thread.leavecritical(int handle)|
函数说明:|离开临界区,使临界区处于空闲状态|
调用例子:|
int handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--进入临界区-->
<function name="deletecritical">
<!--返回值:true-->
<returntype>bool</returntype>
<!--参数:句柄-->
<pram>(int handle)</pram>
<example>
函数原型:|bool thread.deletecritical(int handle)|
函数说明:|删除临界区对象|
调用例子:|
int handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--创建事件-->
<function name="createevent">
<!--返回值:句柄-->
<returntype>int</returntype>
<!--参数:句柄-->
<pram>(bool bManualReset,bool bInitialState,string eventName="")</pram>
<example>
函数原型:|int thread.createevent(bool bManualReset,bool bInitialState,string eventName="")|
函数说明:|创建并返回一个事件对象句柄|
调用例子:|
int handle//一般定义成全局句柄
handle=thread.createevent(false,true,"新的事件")//设置事件为手动模式,初始时事件可用
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--设置事件-->
<function name="setevent">
<!--返回值:句柄-->
<returntype>int</returntype>
<!--参数:句柄-->
<pram>(int handle)</pram>
<example>
函数原型:|bool thread.setevent(int handle)|
函数说明:|设置事件对象可用|
调用例子:|
int handle//一般定义成全局句柄
handle=thread.createevent(false,true,"新的事件")//设置事件为手动模式,初始时事件可用
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--打开事件-->
<function name="openevent">
<!--返回值:句柄-->
<returntype>int</returntype>
<!--参数:句柄-->
<pram>(string eventName)</pram>
<example>
函数原型:|int thread.openevent(string eventName)|
函数说明:|通过事件名打开事件,事件须存在,可以跨进程打开别的进程中创建的事件|
调用例子:|
int handle//一般定义成全局句柄 程序A中定义
handle=thread.createevent(false,true,"新的事件")//设置事件为手动模式,初始时事件可用

int openHnalde //程序B中定义 打开程序A中定义的事件
openHnalde=thread.openevent("新的事件")
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--获得当前句柄-->
<function name="getcurrenthandle">
<!--返回值:句柄-->
<returntype>int</returntype>
<!--参数:句柄-->
<pram>()</pram>
<example>
函数原型:|int thread.getcurrenthandle()|
函数说明:|获得当前线程句柄|
调用例子:|
int handle=thread.getcurrenthandle()
</example>
</function>

</namespace>


<!--数学命名空间-->
<namespace name="math">
<!--开方-->
<function name="sqrt">
<!--返回值:开方的结果-->
<returntype>double</returntype>
<!--参数:开方数-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.sqrt(double dword)|
函数说明:|开方|
调用例子:|
double dword=math.sqrt(9.0)
</example>
</function>

<!--求整型绝对值-->
<function name="abs">
<!--返回值:绝对值的结果-->
<returntype>int</returntype>
<!--参数:需要求绝对值的数-->
<pram>(int dword)</pram>
<example>
函数原型:|int math.abs(int dword)|
函数说明:|求绝对值|
调用例子:|
int dword=math.abs(-1)
</example>
</function>

<!--求sin值-->
<function name="sin">
<!--返回值:绝对值的结果-->
<returntype>double</returntype>
<!--参数:需要求角度数的sin值-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.sin(double dword)|
函数说明:|求sin值|
调用例子:|
double dword=math.sin(55.5)
</example>
</function>


<!--求cos值-->
<function name="cos">
<!--返回值:绝对值的结果-->
<returntype>double</returntype>
<!--参数:需要求角度数的cos值-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.cos(double dword)|
函数说明:|求cos值|
调用例子:|
double dword=math.cos(55.5)
</example>
</function>

<!--求tan值-->
<function name="tan">
<!--返回值:绝对值的结果-->
<returntype>double</returntype>
<!--参数:需要求角度数的tan值-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.tan(double dword)|
函数说明:|求tan值|
调用例子:|
double dword=math.tan(55.5)
</example>
</function>

<!--求反sin值-->
<function name="asin">
<!--返回值:绝对值的结果-->
<returntype>double</returntype>
<!--参数:需要求角度数的反sin值-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.asin(double dword)|
函数说明:|求反sin值|
调用例子:|
double dword=math.asin(0.5)
</example>
</function>


<!--求反cos值-->
<function name="acos">
<!--返回值:绝对值的结果-->
<returntype>double</returntype>
<!--参数:需要求角度数的反cos值-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.acos(double dword)|
函数说明:|求反cos值|
调用例子:|
double dword=math.acos(0.5)
</example>
</function>


<!--求反tan值-->
<function name="atan">
<!--返回值:绝对值的结果-->
<returntype>double</returntype>
<!--参数:需要求角度数的反tan值-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.atan(double dword)|
函数说明:|求反tan值|
调用例子:|
double dword=math.atan(0.5)
</example>
</function>

<!--求浮点型绝对值-->
<function name="absdouble">
<!--返回值:绝对值的结果-->
<returntype>double</returntype>
<!--参数:需要求绝对值的数-->
<pram>(double dword)</pram>
<example>
函数原型:|double math.absdouble(double dword)|
函数说明:|求绝对值|
调用例子:|
double dword=math.absdouble(-1.0)
</example>
</function>

</namespace>



<!--超级鼠标空间-->
<namespace name="drivemouse">

<!--鼠标移动坐标-->
<function name="mousemove">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:nx 鼠标绝对坐标X,ny 鼠标绝对坐标Y-->
<pram>(int x,int y)</pram>
<example>
函数原型:|bool drivemouse.mousemove(int x坐标,int y坐标)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|drivemouse.mousemove(100,200)
</example>
</function>


<!--鼠标左键按下-->
<function name="leftdown">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool drivemouse.leftdown()|
函数说明:|鼠标左键按下|
调用例子:|
drivemouse.leftdown()
</example>
</function>


<!--鼠标右键按下-->
<function name="rightdown">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool drivemouse.rightdown()|
函数说明:|鼠标右键按下|
调用例子:|
drivemouse.rightdown()
</example>
</function>

<!--鼠标中间键按下-->
<function name="middledown">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool middledown()|
函数说明:|鼠标中间键按下|
调用例子:|
drivemouse.middledown()
</example>
</function>

<!--鼠标左键弹起-->
<function name="leftup">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool drivemouse.leftup()|
函数说明:|鼠标左键弹起|
调用例子:|
drivemouse.leftup()
</example>
</function>

<!--鼠标右键弹起-->
<function name="rightup">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool drivemouse.rightup()|
函数说明:|鼠标右键弹起|
调用例子:|
drivemouse.rightup()
</example>
</function>

<!--鼠标中间键弹起-->
<function name="middleup">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:-->
<pram>()</pram>
<example>
函数原型:|bool drivemouse.middleup()|
函数说明:|鼠标中间键弹起|
调用例子:|
drivemouse.middleup()
</example>
</function>

<!--鼠标左键单击-->
<function name="leftclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标左键单击按下的次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool drivemouse.leftclick(int ncount)|
函数说明:|鼠标左键单击|
调用例子:|drivemouse.leftclick(10)
</example>
</function>

<!--鼠标右键单击-->
<function name="rightclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标右键单击次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool drivemouse.rightclick(int ncount)|
函数说明:|鼠标右键单击|
调用例子:|drivemouse.rightclick(10)
</example>
</function>

<!--鼠标中键单击-->
<function name="middleclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标中键单击次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool drivemouse.middleclick(int ncount)|
函数说明:|鼠标中键单击|
调用例子:|drivemouse.middleclick(10)
</example>
</function>

<!--鼠标左键双击-->
<function name="leftdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标左键双击的次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool drivemouse.leftdoubleclick(int ncount)|
函数说明:|鼠标左键双击|
调用例子:|drivemouse.leftdoubleclick(10)
</example>
</function>

<!--鼠标右键双击-->
<function name="rightdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:ncount 鼠标右键双击按下的次数-->
<pram>(int ncount)</pram>
<example>
函数原型:|bool drivemouse.rightdoubleclick(int count)|
函数说明:|鼠标右键双击|
调用例子:|drivemouse.rightdoubleclick(10)
</example>
</function>

<!--鼠标移动相对坐标-->
<function name="moverelative">
<!--返回值:执行成功返回真,否则返回假-->
<returntype>bool</returntype>
<!--参数:nx 鼠标坐标X,ny 鼠标坐标Y-->
<pram>(int x,int y)</pram>
<example>
函数原型:|bool drivemouse.moverelative(int x,int y)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|drivemouse.moverelative(100,200)
</example>
</function>

</namespace>


<!--超级键盘空间-->
<namespace name="drivekeyboard">
<!--键盘按下-->
<function name="keydown">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:charbuff 要模拟键盘按下的字符-->
<pram>(int charbuff)</pram>
<example>
函数原型:|bool drivekeyboard.keydown(int charbuff)|
函数说明:|以超级模式模拟按键，键盘按下|
调用例子:|
drivekeyboard.keydown(32)
</example>
</function>

<!--键盘弹起-->
<function name="keyup">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:charbuff 要模拟键盘弹起的字符-->
<pram>(int charbuff)</pram>
<example>
函数原型:|bool drivekeyboard.keyup(int charbuff)|
函数说明:|以超级模式模拟按键，键盘弹起|
调用例子:|
drivekeyboard.keyup(32)
</example>
</function>

<!--按键:按下弹起-->
<function name="keypress">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:bkeydown 键码,ncount 按键的次数-->
<pram>(int bkeydown,int ncount)</pram>
<example>
函数原型:|bool drivekeyboard.keypress(int bkeydown,int ncount)|
函数说明:|以超级模式模拟按键，按键:按下弹起|
调用例子:|
drivekeyboard.keypress(65,10)
</example>
</function>

<!--模拟字符串-->
<function name="keystring">
<!--返回值:函数执行成功,返回真-->
<returntype>bool</returntype>
<!--参数:str 要模拟键盘输入的字符串-->
<pram>(string str,int delay=50)</pram>
<example>
函数原型:|bool drivekeyboard.keystring(string str,int delay=50)|
函数说明:|以超级模式模拟按键，模拟发送字符串|
调用例子:|
drivekeyboard.keystring("abcd")
</example>
</function>

</namespace>


<!--vip(英文)-->
<namespace name="vip">
	
<!--验证注册码-->
<function name="checkregcode">
<!--返回值:返回值:大于0，表示返回这个注册码的剩余小时时间。返回值小于0，是相应的错误信息。-->
<returntype>int</returntype>
<!--参数:用户名 注册码-->
<pram>(string RegCode_ID,string regcode,string proname,string r_info)</pram>
<example>
函数原型:|int vip.checkregcode(string RegCode_ID,string regcode,string proname,string r_info)|
函数说明:|验证注册码有效期,如注册码与账号均有效,将注册码与账号绑定,并返回一个整型值,该值大于0表示注册码有效期(单位小时),小于0为错误信息,错误信息详情见帮助文档(注:该功能会员登陆可用)|
调用例子:|
string r_info
vip.checkregcode("RegCode_ID","VVWR4ZXYVI820YK7UTN7LFS082","proname",r_info)
//RegCode_ID注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
help.messagebox(r_info)
</example>
</function>

<!--解绑-->
<function name="unbindregcode">
<!--返回值:true 或 false-->
<returntype>bool</returntype>
<!--参数:用户名 注册码-->
<pram>(string RegCode_ID,string regcode)</pram>
<example>
函数原型:|bool vip.unbindregcode(string RegCode_ID,string regcode)|
函数说明:|注册码解绑(注:该功能会员登陆可用)|
调用例子:|
vip.unbindregcode("RegCode_ID","VVWR4ZXYVI820YK7UTN7LFS082")
//RegCode_ID注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
</example>
</function>

<!--aes加密--> 
<function name="aesencrypt">
<!--返回值:加密后字串-->
<returntype>string</returntype>
<!--参数:源数据,密钥-->
<pram>(string sourcestr,string key)</pram>
<example>
函数原型:|string vip.aesencrypt(string sourcestr,string key)|
函数说明:|通过AES加密算法加密传入源数据字串,密钥为自定义,解密需要用到(注:该功能vip会员登陆可用)|
调用例子:|
string rstr,soucestr="TChello",key="qwer",derstr
rstr=vip.aesencrypt(soucestr,key)
help.messagebox(rstr)
derstr=vip.aesdecrypt(rstr,key)
help.messagebox(derstr) //成功解密输出"TChello"
</example>
</function>

<!--aes解密--> 
<function name="aesdecrypt">
<!--返回值:解密后字串-->
<returntype>string</returntype>
<!--参数:源数据,密钥-->
<pram>(string sourcestr,string key)</pram>
<example>
函数原型:|string vip.aesdecrypt(string sourcestr,string key)|
函数说明:|通过AES解密算法解密数据,需要用于加密的密钥(注:该功能vip会员登陆可用)|
调用例子:|
string rstr,soucestr="TChello",key="qwer",derstr
rstr=vip.aesencrypt(soucestr,key)
help.messagebox(rstr)
derstr=vip.aesdecrypt(rstr,key)
help.messagebox(derstr) //成功解密输出"TChello"
</example>
</function>

<!--md5加密--> 
<function name="md5">
<!--返回值:加密后字串-->
<returntype>string</returntype>
<!--参数:源数据-->
<pram>(string sourcestr)</pram>
<example>
函数原型:|string vip.md5(string sourcestr)|
函数说明:|通过MD5加密算法加密传入源数据字串,该加密算法无解密算法(注:该功能vip会员登陆可用)|
调用例子:|
string rstr,sourcestr="TChello"
rstr=vip.md5(sourcestr)
help.messagebox(rstr)
</example>
</function>

<!--邮件--> 
<function name="email">
<!--返回值:真或假-->
<returntype>bool</returntype>
<!--参数:(发件人邮箱,收件人邮箱,标题,内容-->
<pram>(string fromEmail,string toEmail,string title,string text)</pram>
<example>
函数原型:|bool vip.email(string fromEmail,string toEmail,string title,string text)|
函数说明:|发送邮件(注:该功能vip会员登陆可用)|
调用例子:|
vip.email("test1@tc.com","test2@tc.com","测试","这是一封测试邮件")
</example>
</function>

<!--数据库--> 
<function name="database">
<!--返回值:错误代码-->
<returntype>int</returntype>
<!--参数:(连接字串,SQL语句,模式,查询项,返回二维数组-->
<pram>(string conStr,string sqlStr,int rline,string[][] rtext,string rerror)</pram>
<example>
函数原型:|int vip.database(string conStr,string sqlStr,int rline,string[][] rtext,string rerror)|
函数说明:|连接数据库,执行一条SQL语句,支持ACCESS,MSSQL,MYSQL(注:该功能vip会员登陆可用)|
调用例子:|
string conStr="Driver=SQL SERVER;Server=127.0.0.1,1731;Database=mymssql;UID=sa;PWD=" //登陆语句,不同类型数据库略有不同,请根据自己数据库实际情况填写
string sqlStr="SELECT  name, old, id ,data FROM mymssql.dbo.users"  //sql语句 每种数据库略有不同
int rline  //返回受影响的行数
string[][] rtext
string rerror //返回错误信息
vip.database(conStr,sqlStr,rline,rtext,rerror)
</example>
</function>

<!--文件加密--> 
<function name="fileencrypt">
<!--返回值:加密后字串-->
<returntype>bool</returntype>
<!--参数:源数据,密钥-->
<pram>(string FilePath,string EncryptFilePath,string key)</pram>
<example>
函数原型:|bool vip.fileencrypt(string FilePath,string EncryptFilePath,string key)|
函数说明:|通过密钥,加密指定文件,并保存加密后文件到指定目录(注:该功能vip会员登陆可用)|
调用例子:|
vip.fileencrypt("D:\\源文件.txt","D:\\加密后文件.txt","123")
vip.filedecrypt("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
</example>
</function>

<!--文件解密--> 
<function name="filedecrypt">
<!--返回值:加密后字串-->
<returntype>bool</returntype>
<!--参数:源数据,密钥-->
<pram>(string EncryptFilePath,string DecryptFilePath,string key)</pram>
<example>
函数原型:|bool vip.filedecrypt(string EncryptFilePath,string DecryptFilePath,string key)|
函数说明:|通过密钥,解密指定文件,并保存解密后文件到指定目录(注:该功能vip会员登陆可用)|
调用例子:|
vip.fileencrypt("D:\\源文件.txt","D:\\加密后文件.txt","123")
vip.filedecrypt("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
</example>
</function>

</namespace>

</dll>



<dll name="controllist" path="matchDll.dll">
<!--标签控件空间-->
<namespace name="statictext">
<!--得到标签的文本-->
<function name="gettext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:名称 标签名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string statictext.gettext(string name,string parentID="")|
函数说明:|获得指定标签的文本|
调用例子:|statictext.gettext("标签0")
</example>
</function>

<!--设置标签的内容-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 标签名称,内容 标签内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool statictext.settext(string name,string content,string parentID="")|
函数说明:|设置指定标签的内容|
调用例子:|statictext.settext("标签0","标签内容")
</example>
</function>
</namespace>


<!--编辑框控件空间-->
<namespace name="edit">
<!--得到编辑框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:名称 编辑框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string edit.gettext(string name,string parentID="")|
函数说明:|获得指定编辑框的文本|
调用例子:|edit.gettext("编辑框0")
</example>
</function>

<!--设置编辑框的文本-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 编辑框名称,内容 标签内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool edit.settext(string name,string content,string parentID="")|
函数说明:|设置指定编辑框的内容|
调用例子:|edit.settext("编辑框0","内容")
</example>
</function>

</namespace>

<!--单选框控件空间-->
<namespace name="radio">
<!--得到单选框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:名称 标签名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string radio.gettext(string name,string parentID="")|
函数说明:|获得指定单选框的文本|
调用例子:|string content|content=radio.gettext("单选框0")
</example>
</function>

<!--得到单选框的文本-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 单选框名称,内容 标签内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool radio.settext(string name,string content,string parentID="")|
函数说明:|设置指定单选框的内容|
调用例子:|radio.settext("单选框0","单选框内容")
</example>
</function>

<!--得到单选框的选中状态-->
<function name="getstate">
<!--返回值:选中返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 单选框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|bool radio.getstate(string name,string parentID="")|
函数说明:|得到指定单选框的选中状态|
调用例子:|radio.getstate("单选框0")
</example>
</function>

<!--设置单选框的选中状态-->
<function name="setstate">
<!--返回值:选中返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 单选框名称,状态 是否选中-->
<pram>(string name,bool ischoice,string parentID="")</pram>
<example>
函数原型:|bool radio.setstate(string name,bool ischoice,string parentID="")|
函数说明:|设置指定单选框的选中状态|
调用例子:|radio.setstate("单选框0",true)
</example>
</function>

</namespace>

<!--复选框 命名空间-->
<namespace name="check">
<!--得到复选框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:名称 标签名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string check.gettext(string name,string parentID="")|
函数说明:|获得指定复选框的文本|
调用例子:|string content=check.gettext("复选框0")
</example>
</function>
<!--得到复选框的文本-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 复选框名称,内容 标签内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool check.settext(string name,string content,string parentID="")|
函数说明:|设置指定复选框的内容|
调用例子:|check.settext("复选框0","复选框内容")
</example>
</function>
<!--得到复选框的选中状态-->
<function name="getstate">
<!--返回值:选中返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 复选框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|bool check.getstate(string name,string parentID="")|
函数说明:|得到指定复选框的状态|
调用例子:|check.getstate("复选框0")
</example>
</function>
<!--设置复选框的选中状态-->
<function name="setstate">
<!--返回值:选中返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 复选框名称,状态 是否选中-->
<pram>(string name,bool ischoice,string parentID="")</pram>
<example>
函数原型:|bool check.setstate(string name,bool ischoice,string parentID="")|
函数说明:|设置指定复选框的选中状态|
调用例子:|check.setstate("复选框0",true)
</example>
</function>
</namespace>

<!--浏览框按钮 命名空间-->
<namespace name="browse">
<!--得到浏览框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>string</returntype>
<!--参数:名称 浏览框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string browse.gettext(string name,string parentID="")|
函数说明:|获得指定浏览框的文本|
调用例子:|string content=browse.gettext("浏览框0")
</example>
</function>
<!--设置浏览框的内容-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 浏览框名称,内容浏览框内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool browse.settext(string name,string content,string parentID="")|
函数说明:|设置指定浏览框的内容|
调用例子:|browse.settext("浏览框0","浏览框内容")
</example>
</function>
</namespace>

<!--下拉框 命名空间-->
<namespace name="combo">
<!--得到指定下拉框的当前选项-->
<function name="getcursel">
<!--返回值:选项的ID号-->
<returntype>int</returntype>
<!--参数:名称 下拉框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int combo.getcursel(string name,string parentID="")|
函数说明:|获得选中下拉框的编号|
调用例子:|int option=combo.getcursel("下拉框0")
</example>
</function>
<!--设置指定下拉框的当前选项-->
<function name="setcursel">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(string name,int index,string parentID="")</pram>
<example>
函数原型:|bool combo.setcursel(string name,int index,string parentID="")|
函数说明:|设置指定下拉框当前显示内容为下拉列表中的第几项选项|
调用例子:|combo.setcursel("下拉框0",1)
</example>
</function>
<!--得到下拉框指定序号的内容-->
<function name="gettextbycur">
<!--返回值:内容-->
<returntype>string</returntype>
<!--参数:名称 下拉框名称, 选项编号-->
<pram>(string name,int number,string parentID="")</pram>
<example>
函数原型:|string combo.gettextbycur(string name,int number,string parentID="")|
函数说明:|得到下拉框指定选项编号的内容|
调用例子:|string content=combo.gettextbycur("下拉框0",1)
</example>
</function>
<!--得到下拉框选项的长度-->
<function name="getcount">
<!--返回值:下拉框选项的长度-->
<returntype>int</returntype>
<!--参数:名称  下拉框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int combo.getcount(string name,string parentID="")|
函数说明:|设置指定下拉框的选中状态|
调用例子:|int length=combo.getcount("下拉框0")
</example>
</function>

<!--清空下拉框的所有内容-->
<function name="deleteall">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:名称  下拉框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|bool combo.deleteall(string name,string parentID="")|
函数说明:|清空下拉框的所有内容|
调用例子:|combo.deleteall("下拉框0")
</example>
</function>

<!--在下拉框最后项增加内容-->
<function name="addtext">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:名称  下拉框名称 内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool combo.addtext(string name,string content,string parentID="")|
函数说明:|在下拉框最后项增加内容|
调用例子:|combo.addtext("下拉框0","TC")
</example>
</function>

<!--删除下拉框指定位置的文本内容-->
<function name="deletetext">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:名称  下拉框名称 位置 -->
<pram>(string name,int pos,string parentID="")</pram>
<example>
函数原型:|bool combo.deletetext(string name,int pos,string parentID="")|
函数说明:|删除下拉框指定位置的文本内容|
调用例子:|combo.deletetext("下拉框0",4)
</example>
</function>

<!--得到下拉框的文本内容-->
<function name="gettext">
<!--返回值:得到列表框的文本内容-->
<returntype>string</returntype>
<!--参数:名称 列表框名称  序号-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string combo.gettext(string name,string parentID="")|
函数说明:|获得下拉框当前输入的文本内容|
调用例子:|combo.gettext("下拉框0")
</example>
</function>

</namespace>



<!--分组框控件空间(中文)-->
<namespace name="group">
<!--得到分组框的标题文本-->
<function name="gettext">
<!--返回值:得到控件的标题文本-->
<returntype>string</returntype>
<!--参数:名称 分组框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string group.gettext(string name,string parentID="")|
函数说明:|获得指定分组框的标题文本内容|
调用例子:|group.gettext("分组框0")
</example>
</function>

<!--设置分组框的标题-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 分组框名称,标题 分组框内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool group.settext(string name,string content,string parentID="")|
函数说明:|设置指定分组框的标题文本内容|
调用例子:|group.settext("分组框0","分组框标题")
</example>
</function>
</namespace>

<!--列表框控件空间(中文)-->
<namespace name="list">


<!--得到列表框的文本内容-->
<function name="gettext">
<!--返回值:得到列表框的文本内容-->
<returntype>string</returntype>
<!--参数:名称 列表框名称  序号-->
<pram>(string name,int number,string parentID="")</pram>
<example>
函数原型:|string list.gettext(string name,int number,string parentID="")|
函数说明:|获得指定列表框的文本内容|
调用例子:|list.gettext("列表框0",1)
</example>
</function>

<!--追加列表框的文本内容-->
<function name="addstring">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 列表框名称,内容 列表框内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool list.addstring(string name,string content,string parentID="")|
函数说明:|追加指定列表框的文本内容|
调用例子:|list.addstring("列表框0","李四")
</example>
</function>

<!--得到列表框的选中文本-->
<function name="getchecktext">
<!--返回值:得到列表框的选中文本-->
<returntype>string</returntype>
<!--参数:名称 列表框名称 -->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string list.getchecktext(string name,string parentID="")|
函数说明:|得到列表框的选中文本|
调用例子:|list.getchecktext("列表框0")
</example>
</function>

<!--得到列表框选中内容的序号-->
<function name="getcursel">
<!--返回值:得到列表框选中内容的序号-->
<returntype>int</returntype>
<!--参数:名称 列表框名称 -->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int list.getcursel(string name,string parentID="")|
函数说明:|得到列表框选中内容的序号|
调用例子:|int number=list.getcursel("列表框0")
</example>
</function>

<!--得到列表框的文本个数-->
<function name="getcount">
<!--返回值:返回列表框中内容的个数-->
<returntype>int</returntype>
<!--参数:名称 列表框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int list.getcount(string name,string parentID="")|
函数说明:|获得指定列表框的中内容的个数|
调用例子:|list.getcount("列表框0")
</example>
</function>

<!--清空列表框的所有内容-->
<function name="deleteall">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:名称  列表框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|bool list.deleteall(string name,string parentID="")|
函数说明:|清空列表框的所有内容|
调用例子:|list.deleteall("列表框0")
</example>
</function>
<!--删除列表框的指定位置内容-->
<function name="deletetext">
<!--返回值:成功或者失败-->
<returntype>bool</returntype>
<!--参数:名称  列表框名称 位置-->
<pram>(string name,int pos,string parentID="")</pram>
<example>
函数原型:|bool list.deletetext(string name,int pos,string parentID="")|
函数说明:|删除列表框的指定位置内容|
调用例子:|list.deletetext("列表框0",5)
</example>
</function>

<!--设置指定列表框当前的选项-->
<function name="setcursel">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(string id,int index,string parentID="")</pram>
<example>
函数原型:|bool list.setcursel(string id,int index,string parentID="")|
函数说明:|设置下拉框当前选中第几项|
调用例子:|list.setcursel("列表框0",1)
</example>
</function>

<!--插入文本-->
<function name="inserttext">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,内容,序号-->
<pram>(string id,string text,int index,string parentID="")</pram>
<example>
函数原型:|bool list.inserttext(string id,string text,int index,string parentID="")|
函数说明:|指定序号插入文本|
调用例子:|
list.inserttext("列表框0","TC简单开发",1)
</example>
</function>

</namespace>


<!--日期框控件空间(中文)-->
<namespace name="date">
<!--得到日期框的文本-->
<function name="gettext">
<!--返回值:得到控件的文本-->
<returntype>string</returntype>
<!--参数:名称 日期框名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string date.gettext(string name,string parentID="")|
函数说明:|获得指定日期框的日期文本内容|
调用例子:|date.gettext("日期框0")
</example>
</function>

<!--设置日期框的内容-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 日期框控件名称,标题 日期框内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool date.settext(string name,string content,string parentID="")|
函数说明:|设置指定日期框控件的文本内容|
调用例子:|date.settext("日期框0","2011-5-5")
</example>
</function>
</namespace>

<!--图片框控件空间(中文)-->
<namespace name="picture">
<!--设置图片框控件的图片-->
<function name="setpicture">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 图片框控件名称,图片路径 -->
<pram>(string name,string path,string parentID="")</pram>
<example>
函数原型:|bool picture.setpicture(string name,string path,string parentID="")|
函数说明:|设置指定图片框控件的图片|
调用例子:|picture.setpicture("图片框0","D:\\test.bmp")
</example>
</function>
</namespace>

<!--进度条控件空间(中文)-->
<namespace name="progress">
<!--得到进度条的进度-->
<function name="getprogress">
<!--返回值:得到进度条的进度-->
<returntype>int</returntype>
<!--参数:名称进度条名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int progress.getprogress(string name,string parentID="")|
函数说明:|获得指定进度条的进度|
调用例子:|progress.getprogress("进度条0")
</example>
</function>

<!--设置进度条的进度-->
<function name="setprogress">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 进度条控件名称,进度-->
<pram>(string name,int 进度,string parentID="")</pram>
<example>
函数原型:|bool progress.setprogress(string name,int 进度,string parentID="")|
函数说明:|设置指定进度条的进度|
调用例子:|progress.setprogress("进度条0",10)
//进度的值不能小于0和大于99
</example>
</function>
</namespace>

<!--按钮空间(中文)-->
<namespace name="button">
<!--得到标签的文本-->
<function name="gettext">
<!--返回值:得到按钮的文本-->
<returntype>string</returntype>
<!--参数:名称 标签名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|string button.gettext(string name,string parentID="")|
函数说明:|获得指定按钮的文本|
调用例子:|button.gettext("按钮0")
</example>
</function>

<!--设置按钮的文本-->
<function name="settext">
<!--返回值:执行成功返回真，否则返回假-->
<returntype>bool</returntype>
<!--参数:名称 按钮名称,内容 按钮内容-->
<pram>(string name,string content,string parentID="")</pram>
<example>
函数原型:|bool button.settext(string name,string content,string parentID="")|
函数说明:|设置指定按钮的内容|
调用例子:|button.settext("按钮0","按钮内容")
</example>
</function>
</namespace>


<!--控件通用空间(中文)-->
<namespace name="control">
<!--设置控件是否有效-->
<function name="enable">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string name,bool istrue,string parentID="")</pram>
<example>
函数原型:|bool control.enable(string name,bool istrue,string parentID="")|
函数说明:|设置指定控件是否有效,真为有效,假则为无效|
调用例子:|
control.enable("按钮0",true)
</example>
</function>

<!--设置控件是否可见-->
<function name="show">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string name,bool istrue,string parentID="")</pram>
<example>
函数原型:|bool control.show(string name,bool istrue,string parentID="")|
函数说明:|设置指定控件是否可见,真为可见,假则为不可见|
调用例子:|
control.show("按钮0",true)
</example>
</function>


<!--设置控件位置-->
<function name="setpos">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string name,int x,int y,int width,int height,int type,string parentID="")</pram>
<example>
函数原型:|bool control.setpos(string name,int x,int y,int width,int height,int type,string parentID="")|
函数说明:|设置控件位置及大小,type:0:设置位置与大小,1:只设置位置(忽略大小参数),2:只设置大小(忽略位置参数)|
调用例子:|
bool ismove=control.setpos("按钮0",100,200,50,80,1)
</example>
</function>

<!--创建控件-->
<function name="create">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string controlType,string controlID,string Text,int x,int y,int width,int height,string attribute,string event,int  parentHandle=0)</pram>
<example>
函数原型:|bool control.create(string controlType,string controlID,string Text,int x,int y,int width,int height,string attribute,string event,int  parentHandle=0)|
函数说明:|动态创建控件,动态参数较多详细举例见帮助文档
调用例子:|bool isok=control.create("statictext","标签999","我的控件",10,170,65,28,"背景颜色:14215660","点击:空间名.事件响应函数")

</example>
</function>

<!--打开窗口-->
<function name="openwindow">
<!--返回值:成功或失败-->
<returntype>int</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string ID,bool visible=true)</pram>
<example>
函数原型:|int control.openwindow(string ID,bool visible=true)|
函数说明:|打开窗口,返回窗口句柄|
调用例子:|int winHwnd=control.openwindow("子界面")

</example>
</function>

<!--关闭窗口-->
<function name="closewindow">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string ID,int rtype)</pram>
<example>
函数原型:|bool control.closewindow(string ID,int rtype)|
函数说明:|关闭窗口,点击类型,模态窗口模式下才用得到:用户自定义的数值(系统保留 0 右上角关闭按钮 -1 已打开,-2 错误的ID,-3 主窗口不能模态创建)|
调用例子:|
//主界面
int ret=control.domodal("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
if(ret==1)
//你要执行的操作
endif
if(ret==2)
//你要执行的操作
endif

//子界面
//按钮1
bool isok=control.closewindow("子界面",1)//点击这个按钮会关闭窗口
//按钮2
bool isok=control.closewindow("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--模态窗口-->
<function name="domodal">
<!--返回值:成功或失败-->
<returntype>int</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string ID)</pram>
<example>
函数原型:|int control.domodal(string ID)|
函数说明:|打开一个模态窗口(模态窗口:指除非采取有效的关闭手段,用户的鼠标焦点或者输入光标将一直停留在其上的对话框),调用该函数后程序会挂起,直到它打开的窗口被关闭|
调用例子:|
//主界面
int ret=control.domodal("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
if(ret==1)
//你要执行的操作
endif
if(ret==2)
//你要执行的操作
endif

//子界面
//按钮1
bool isok=control.closewindow("子界面",1)//点击这个按钮会关闭窗口
//按钮2
bool isok=control.closewindow("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--获得句柄-->
<function name="gethandle">
<!--返回值:成功或失败-->
<returntype>int</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string ID,string parentID="")</pram>
<example>
函数原型:|int control.gethandle(string ID,string parentID="")|
函数说明:|获得控件句柄|
调用例子:|int handle=control.gethandle("标签0")
</example>
</function>

</namespace>

<!--选项卡空间(中文)-->
<namespace name="tab">
<!--激活指定的Tab控件-->
<function name="active">
<!-- 返回值：成功或者失败-->
<returntype>bool</returntype>
<!--参数：选项卡的名称,Tal序号-->
<pram>(string name,int number,string parentID="")</pram>
<example>
函数原型:|bool tab.active(string name,int number,string parentID="")|
函数说明:|设置指定的选项卡那个Tal页面被激活|
调用例子:|
//激活选项卡0的第2个tab页面
tab.active("选项卡0",1)
</example>
</function>

<!--得到选项卡当前选中选项的索引-->
<function name="getcursel">
<!-- 返回值：成功或者失败-->
<returntype>int</returntype>
<!--参数：选项卡的名称,Tab序号-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int tab.getcursel(string name,string parentID="")|
函数说明:|得到选项卡当前选中选项的索引|
调用例子:|
int index=tab.getcursel("选项卡0")
help.messagebox(convert.inttostr(index))
</example>
</function>

<!--得到选项卡当前分页框个数-->
<function name="getcount">
<!-- 返回值：成功或者失败-->
<returntype>int</returntype>
<!--参数：选项卡的名称,Tab序号-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int tab.getcount(string name,string parentID="")|
函数说明:|得到选项卡当前分页框个数|
调用例子:|
int num=tab.getcount("选项卡0")
help.messagebox(convert.inttostr(num))
</example>
</function>

<!--获得句柄-->
<function name="getpagehandle">
<!--返回值:成功或失败-->
<returntype>int</returntype>
<!--参数:名称 控件名称 真假-->
<pram>(string ID,int index,string parentID="")</pram>
<example>
函数原型:|int control.getpagehandle(string ID,int index,string parentID="")|
函数说明:|获得选项卡分页句柄|
调用例子:|int handle=tab.getpagehandle("选项卡0",0) //获得主窗口上"选项卡0"的第一个分页句柄
</example>
</function>

</namespace>

<!--定时器空间(中文)-->
<namespace name="timer">
<!--注册一个定时器-->
<function name="register">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称 毫秒时间-->
<pram>(string name,int timems,string parentID="")</pram>
<example>
函数原型:|bool timer.register(string name,int timems,string parentID="")|
函数说明:|注册一个指定的定时器,每隔多少毫秒执行一次定时器的方法|
调用例子:|
//定时器1每隔1秒执行一次
timer.set("定时器0",1000)
</example>
</function>

<!--销毁定时器-->
<function name="kill">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|bool timer.kill(string name,string parentID="")|
函数说明:|销毁一个指定的定时器|
调用例子:|
timer.kill("定时器0")
</example>
</function>
</namespace>


<!--热键空间(中文)-->
<namespace name="hotkey">
<!--注册一个热键-->
<function name="register">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称 -->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|bool hotkey.register(string name,string parentID="")|
函数说明:|注册一个指定的热键|
调用例子:|
hotkey.register("热键0")
</example>
</function>

<!--销毁热键-->
<function name="destroy">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称-->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|bool hotkey.destroy(string name,string parentID="")|
函数说明:|销毁一个指定的热键|
调用例子:|
hotkey.destroy("热键0")
</example>
</function>

<!--获得热键-->
<function name="get">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称-->
<pram>(string controlname,int retvk,int retmod,string parentID="")</pram>
<example>
函数原型:|bool hotkey.get(string controlname,int retvk,int retmod,string parentID="")|
函数说明:|获得指定热键当前生效的热键键值组合,retvk(键盘上一些数字和字母或方向键的按键码),retmod包括(Shift,Ctrl,Alt)
调用例子:|
int retvk,retmod
bool ret1=hotkey.get("热键0",retvk,retmod)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用hotkey.set
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用hotkey.set达到保存用户上次设置热键的效果
bool ret2=hotkey.set("热键0",retvk,retmod)
</example>
</function>

<!--设置热键-->
<function name="set">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称-->
<pram>(string controlname,int vk,int mod,string parentID="")</pram>
<example>
函数原型:|bool hotkey.set(string controlname,int vk,int mod,string parentID="")|
函数说明:|设置热键
调用例子:|
int retvk,retmod
bool ret1=hotkey.get("热键0",retvk,retmod)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用hotkey.set
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用hotkey.set达到保存用户上次设置热键的效果
bool ret2=hotkey.set("热键0",retvk,retmod)
</example>
</function>

</namespace>


<!--滑块空间(中文)-->
<namespace name="slide">
<!--设置滑块的位置-->
<function name="setpos">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:名称 控件名称  位置-->
<pram>(string name,int pos,string parentID="")</pram>
<example>
函数原型:|bool slide.setpos(string name,int pos,string parentID="")|
函数说明:|设置滑块的位置|
调用例子:|
slide.setpos("滑块0",12)
</example>
</function>

<!--得到滑块的位置-->
<function name="getpos">
<!--返回值:成功或失败-->
<returntype>int</returntype>
<!--参数:名称 控件名称 -->
<pram>(string name,string parentID="")</pram>
<example>
函数原型:|int slide.getpos(string name,string parentID="")|
函数说明:|得到滑块的位置|
调用例子:|
int pos=slide.getpos("滑块0")
</example>
</function>
</namespace>

<!--网页操作-->
<namespace name="web">

<!--打开网页-->
<function name="go">
<!--返回值:真：成功 假：失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称  url 网页链接-->
<pram>(string id,string url,string parentID="")</pram>
<example>
函数原型:|bool web.go(string id,string url,string parentID="")|
函数说明:|打开一个URL网页链接|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
</example>
</function>

<!-- 判断网页是否加载完成 -->
<function name="loadcomplete">
<!--返回值:真：成功 假：失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称 -->
<pram>(string id,string parentID="")</pram>
<example>
函数原型:|逻辑型 web.loadcomplete(string id,string parentID="")|
函数说明:|判断当前网页是否加载完成|
调用列子:|
web.loadcomplete("浏览器0")
</example>
</function>

<!-- 获取当前页的标题 -->
<function name="gettitle">
<!--返回值:string : 标题-->
<returntype>string</returntype>
<!--参数: id:  控件名称  -->
<pram>(string id,string parentID="")</pram>
<example>
函数原型:|string web.gettitle(string id,string parentID="")|
函数说明:|获取当前页的标题|
调用列子:|
string titile = web.gettitle("浏览器0")
</example>
</function>

<!-- 网页前进 -->
<function name="forward">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称 -->
<pram>(string id,string parentID="")</pram>
<example>
函数原型:|bool web.forward(string id,string parentID="")|
函数说明:|当前标签页网页前进一步|
调用列子:|
web.forward("浏览器0")
</example>
</function>

<!-- 网页后退 -->
<function name="back">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称 -->
<pram>(string id,string parentID="")</pram>
<example>
函数原型:|bool web.back(string id,string parentID="")|
函数说明:|当前标签页网页后退一步|
调用列子:|
web.back("浏览器0")
</example>
</function>

<!-- 网页刷新 -->
<function name="refresh">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称 -->
<pram>(string id,string parentID="")</pram>
<example>
函数原型:|bool web.refresh(string id,string parentID="")|
函数说明:|刷新当前的网页|
调用列子:|
web.refresh("浏览器0")
</example>
</function>

<!-- 鼠标移动消息 -->
<function name="moveto">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称  x 窗口x坐标  y 窗口y坐标-->
<pram>(string id,int x,int y,string parentID="")</pram>
<example>
函数原型:|bool web.moveto(string id,int x,int y,string parentID="")|
函数说明:|向当前标签的网页发送一个鼠标移动消息|
调用列子:|
web.moveto("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键按下 -->
<function name="leftdown">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称  x 窗口x坐标  y 窗口y坐标  -->
<pram>(string id,int x,int y,string parentID="")</pram>
<example>
函数原型:|bool web.leftdown(string id,int x,int y,string parentID="")|
函数说明:|向当前网页发送一个鼠标左键按下消息|
调用列子:|
web.leftdown("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键弹起 -->
<function name="leftup">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称   x 窗口x坐标  y 窗口y坐标  -->
<pram>(string id,int x,int y,string parentID="")</pram>
<example>
函数原型:|bool web.leftup(string id,int x,int y,string parentID="")|
函数说明:|向当前网页发送一个鼠标左键弹起消息|
调用列子:|
web.leftup("浏览器0",100,200)
</example>
</function>

<!-- 左键单击事件 -->
<function name="leftclick">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称   x 窗口x坐标  y 窗口y坐标 -->
<pram>(string id,int x,int y,string parentID="")</pram>
<example>
函数原型:|bool web.leftclick(string id,int x,int y,string parentID="")|
函数说明:|向当前的网页发送一个左键单击消息|
调用列子:|
web.leftclick("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键双击 -->
<function name="leftdoubleclick">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称 x 窗口x坐标  y 窗口y坐标 -->
<pram>(string id,int x,int y,string parentID="")</pram>
<example>
函数原型:|bool web.leftdoubleclick(string id,int x,int y,string parentID="")|
函数说明:|向当前网页发送一个鼠标左键双击消息|
调用列子:|
web.leftdoubleclick("浏览器0",10,20)
</example>
</function>

<!-- 键盘按下消息 -->
<function name="keydown">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称  keycode 键码-->
<pram>(string id,int keycode,string parentID="")</pram>
<example>
函数原型:|bool web.keydown(string id,int keycode,string parentID="")|
函数说明:|向当前的网页发送一个键盘按下消息|
调用列子:|
web.keydown("浏览器0",66)
</example>
</function>

<!-- 键盘弹起消息 -->
<function name="keyup">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称  keycode 键码-->
<pram>(string id,int keycode,string parentID="")</pram>
<example>
函数原型:|bool web.keyup(string id,int keycode,string parentID="")|
函数说明:|向当前标签的网页发送一个键盘弹起消息|
调用列子:|
web.keyup("浏览器0",66)
</example>
</function>

<!-- 键盘按键消 -->
<function name="keypress">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称  keycode 键码-->
<pram>(string id,int keycode,string parentID="")</pram>
<example>
函数原型:|bool web.keypress(string id,int keycode,string parentID="")|
函数说明:|向当前标签网页发送一个按键消息|
调用列子:|
web.keypress("浏览器0",66)
</example>
</function>

<!--  发送文本内容 -->
<function name="sendstring">
<!--返回值:bool：true 成功  false 失败-->
<returntype>bool</returntype>
<!--参数:id:  控件名称  keystring 文本消息-->
<pram>(string id,string keystring,string parentID="")</pram>
<example>
函数原型:|bool web.sendstring(string id,string keystring,string parentID="")|
函数说明:|向当前标签网页发送字符串文本消息|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
web.sendstring("浏览器0","TC简单开发")
</example>
</function>

<!-- 获取网页元素指定属性的信息 -->
<function name="htmlget">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>string</returntype>
<!-- 参数:id:  控件名称  type:网页元素属性类型 sub:网页元素特征字符串 -->
<pram>(string id,string type,string sub,string parentID="")</pram>
<example>
函数原型:|string web.htmlget(string id,string type,string sub,string parentID="")|
函数说明:|获取网页元素指定属性的信息,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
//详细介绍请查看帮助文档
web.go("浏览器0","www.tyuyan.com")
string text=web.htmlget("浏览器0","value","id:su")
help.messagebox(text)
</example>
</function>

<!-- 点击网页中指定特征的按钮或链接 -->
<function name="htmlclick">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>bool</returntype>
<!-- 参数:id:  控件名称  sub:网页元素特征字符串 -->
<pram>(string id,string sub,string parentID="")</pram>
<example>
函数原型:|bool web.htmlclick(string id,string sub,string parentID="")|
函数说明:|点击网页中指定特征的按钮或链接,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
web.htmlclick("浏览器0","id:su")
</example>
</function>

<!-- 向网页中指定特征的文本框输入内容 -->
<function name="htmlinput">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>bool</returntype>
<!-- 参数:id:  控件名称  text:文本内容  sub:网页元素特征字符串 -->
<pram>(string id,string text,string sub,string parentID="")</pram>
<example>
函数原型:|bool web.htmlinput(string id,string text,string sub,string parentID="")|
函数说明:|向网页中指定特征的文本框输入内容,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
web.htmlinput("浏览器0","TC简单开发","id:kw")
web.htmlclick("浏览器0","id:su")
</example>
</function>

<!-- 选择网页中的下拉框 -->
<function name="htmlselect">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>bool</returntype>
<!-- 参数:id:  控件名称  seltext:需要选中的下拉选项的值  sub:网页元素特征字符串 -->
<pram>(string id,string seltext,string sub,string parentID="")</pram>
<example>
函数原型:|bool web.htmlselect(string id,string seltext,string sub,string parentID="")|
函数说明:|选择网页中的下拉框,支持的特征有 id:标示符 name:名称 tag:标签 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
web.htmlselect("浏览器0","北京","id:省份")
</example>
</function>

<!-- 选择/清除网页中的单选框或复选框 -->
<function name="htmlcheck">
<!--返回值:字符串类型，获取到的网页元素的值-->
<returntype>bool</returntype>
<!-- 参数:id:  控件名称  ischeck:选中或不选中  sub:网页元素特征字符串 -->
<pram>(string id,bool ischeck,string sub,string parentID="")</pram>
<example>
函数原型:|bool web.htmlcheck(string id,bool ischeck,string sub,string parentID="")|
函数说明:|选择/清除网页中的单选框或复选框,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
web.htmlcheck("浏览器0",true,"id:tc")
</example>
</function>

<!-- 得到当前网页的地址 -->
<function name="geturl">
<!--返回值:字符串类型 :网页的地址-->
<returntype>string</returntype>
<!-- 参数:id:  控件名称   -->
<pram>(string id,string parentID="")</pram>
<example>
函数原型:|string web.geturl(string id,string parentID="")|
函数说明:|得到当前网页的地址|
调用列子:|
string url = web.geturl("浏览器0")
help.messagebox(url)
</example>
</function>

<!-- 得到当前网页的句柄 -->
<function name="gethwnd">
<!--返回值:整型 窗口句柄-->
<returntype>int</returntype>
<!-- 参数:id:  控件名称   -->
<pram>(string id,string parentID="")</pram>
<example>
函数原型:|int web.gethwnd(string id,string parentID="")|
函数说明:|得到当前网页的句柄|
调用列子:|
int hwnd = web.gethwnd("浏览器0")
</example>
</function>

<!-- 删除IE临时文件 -->
<function name="cleartemp">
<!--返回值:真：成功   假：失败-->
<returntype>bool</returntype>
<!-- 参数: -->
<pram>()</pram>
<example>
函数原型:|bool web.cleartemp()|
函数说明:|删除IE临时文件|
调用列子:|
web.cleartemp()
</example>
</function>

<!-- 删除IE的Cookie -->
<function name="clearcookie">
<!--返回值:真：成功   假：失败-->
<returntype>bool</returntype>
<!-- 参数:-->
<pram>()</pram>
<example>
函数原型:|bool web.clearcookie()|
函数说明:|删除IE的Cookie|
调用列子:|
web.clearcookie()
</example>
</function>

<!-- 在当前网页中执行一段JS脚本 -->
<function name="runjs">
<!--返回值:string 执行结果-->
<returntype>string</returntype>
<!-- 参数: 控件名 js脚本-->
<pram>(string id,string js脚本,string parentID="")</pram>
<example>
函数原型:|string web.runjs(string id,string js脚本,string parentID="")|
函数说明:|在当前网页中执行一段JS脚本,获取返回值|
调用列子:|
string ret = web.runjs("浏览器0","var t=document.title;return t;")
</example>
</function>

</namespace>


<!--表格控件-->
<namespace name="grid">
<!--表格大小-->
<function name="getsize">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,返回行.返回列-->
<pram>(string Control_ID,int r_row,int r_col,string parentID="")</pram>
<example>
函数原型:|bool grid.getsize(string Control_ID,int r_row,int r_col,string parentID="")|
函数说明:|获取表格大小(行,列的个数)|
调用例子:|
int r_row, r_col
grid.getsize("表格0",r_row, r_col)
</example>
</function>

<!--设置大小-->
<function name="setsize">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,长.宽-->
<pram>(string Control_ID,int row,int col,string parentID="")</pram>
<example>
函数原型:|bool grid.setsize(string Control_ID,int row,int col,string parentID="")|
函数说明:|设置表格大小(行,列的个数)|
调用例子:|
grid.setsize("表格0",100,100)
</example>
</function>

<!--固定项大小-->
<function name="getfixedsize">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,返回长.返回宽-->
<pram>(string Control_ID,int r_row,int r_col,string parentID="")</pram>
<example>
函数原型:|bool grid.getfixedsize(string Control_ID,int r_row,int r_col,string parentID="")|
函数说明:|获得固定项大小(行,列的个数)|
调用例子:|
int r_row, r_col
grid.getfixedsize("表格0",r_row, r_col)
</example>
</function>

<!--设置固定项大小-->
<function name="setfixedsize">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,长.宽-->
<pram>(string Control_ID,int row,int col,string parentID="")</pram>
<example>
函数原型:|bool grid.setfixedsize(string Control_ID,int row,int col,string parentID="")|
函数说明:|设置固定项大小(行,列的个数)|
调用例子:|
grid.setfixedsize("表格0",100,100)
</example>
</function>

<!--获得内容-->
<function name="getcontent">
<!--返回值:内容-->
<returntype>string</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(string Control_ID,int row,int col,string parentID="")</pram>
<example>
函数原型:|string grid.getcontent(string Control_ID,int row,int col,string parentID="")|
函数说明:|获得表格某一项的数据内容|
调用例子:|
string content
content=grid.getcontent("表格0",1,1)
help.messagebox(content)
</example>
</function>

<!--设置内容-->
<function name="setcontent">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(string Control_ID,int row,int col,string content,string parentID="")</pram>
<example>
函数原型:|bool grid.setcontent(string Control_ID,int row,int col,string content,string parentID="")|
函数说明:|设置表格某一项的数据内容|
调用例子:|
grid.setcontent("表格0",1,1,"TC简单开发")
</example>
</function>

<!--获得类型-->
<function name="gettype">
<!--返回值:获得的类型-->
<returntype>int</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(string Control_ID,int row,int col,string parentID="")</pram>
<example>
函数原型:|int grid.gettype(string Control_ID,int row,int col,string parentID="")|
函数说明:|获得表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|
int type
type=grid.gettype("表格0",1,1)
</example>
</function>

<!--设置类型-->
<function name="settype">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行号.列号,类型-->
<pram>(string Control_ID,int row,int col,int type,string parentID="")</pram>
<example>
函数原型:|bool grid.settype(string Control_ID,int row,int col,int type,string parentID="")|
函数说明:|设置表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|
grid.settype("表格0",1,1,1)
</example>
</function>

<!--插入行-->
<function name="insertrow">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,内容,行号-->
<pram>(string Control_ID,string content,int row,string parentID="")</pram>
<example>
函数原型:|bool grid.insertrow(string Control_ID,string content,int row,string parentID="")|
函数说明:|插入行|
调用例子:|
grid.insertrow("表格0","TC简单开发",1)
</example>
</function>


<!--清空-->
<function name="deleteall">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称-->
<pram>(string Control_ID,string parentID="")</pram>
<example>
函数原型:|bool grid.deleteall(string Control_ID,string parentID="")|
函数说明:|清空表格控件所有项|
调用例子:|
grid.deleteall("表格0")
</example>
</function>

<!--删除行-->
<function name="deleterow">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行号-->
<pram>(string Control_ID,int row,string parentID="")</pram>
<example>
函数原型:|bool grid.deleterow(string Control_ID,int row,string parentID="")|
函数说明:|删除行|
调用例子:|
grid.deleterow("表格0",1)
</example>
</function>

<!--删除列-->
<function name="deletecol">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行号-->
<pram>(string Control_ID,int col,string parentID="")</pram>
<example>
函数原型:|bool grid.deletecol(string Control_ID,int col,string parentID="")|
函数说明:|删除列|
调用例子:|
grid.deletecol("表格0",1)
</example>
</function>

<!--删除非固定行-->
<function name="deletenonfixedrow">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称-->
<pram>(string Control_ID,string parentID="")</pram>
<example>
函数原型:|bool grid.deletenonfixedrow(string Control_ID,string parentID="")|
函数说明:|删除非固定行|
调用例子:|
grid.deletenonfixedrow("表格0")
</example>
</function>

<!--获得复选框状态-->
<function name="getcheckstate">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行号.列号-->
<pram>(string Control_ID,int row,int col,string parentID="")</pram>
<example>
函数原型:|bool grid.getcheckstate(string Control_ID,int row,int col,string parentID="")|
函数说明:|获得复选框状态,返回 真 为选中,返回 假 为未选中|
调用例子:|
bool isChecked
isChecked=grid.getcheckstate("表格0",1,1)
</example>
</function>

<!--设置复选框状态-->
<function name="setcheckstate">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行号.列号,状态-->
<pram>(string Control_ID,int row,int col,bool isChecked,string parentID="")</pram>
<example>
函数原型:|bool grid.setcheckstate(string Control_ID,int row,int col,bool isChecked,string parentID="")|
函数说明:|设置复选框状态,参数4 设置 真 为选中,返回 假 为未选中|
调用例子:|
grid.setcheckstate("表格0",1,1,true)
</example>
</function>

<!--设置下拉框内容-->
<function name="setcombocontent">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行号.内容-->
<pram>(string Control_ID,int row,int col,string[] content,string parentID="")</pram>
<example>
函数原型:|bool grid.setcombocontent(string Control_ID,int row,int col,string[] content,string parentID="")|
函数说明:|设置表格中下拉框的内容|
调用例子:|
string[] content=string[2]
content[0]="TC"
content[1]="简单开发"
grid.setcombocontent("表格0",1,1,content)
</example>
</function>

<!--获取焦点项-->
<function name="getfocusitem">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,返回长.返回宽-->
<pram>(string Control_ID,int r_row,int r_col,string parentID="")</pram>
<example>
函数原型:|bool grid.getfocusitem(string Control_ID,int r_row,int r_col,string parentID="")|
函数说明:|获得表格焦点项(焦点:当前光标所在的位置)|
调用例子:|
int r_row,r_col
grid.getfocusitem("表格0",r_row,r_col)
</example>
</function>

<!--获得行高-->
<function name="getrowheight">
<!--返回值:行高-->
<returntype>int</returntype>
<!--参数:控件名称,行-->
<pram>(string Control_ID,int row,string parentID="")</pram>
<example>
函数原型:|int grid.getrowheight(string Control_ID,int row,string parentID="")|
函数说明:|获得行高|
调用例子:|
int rowheight=grid.getrowheight("表格0",1)
</example>
</function>

<!--设置行高-->
<function name="setrowheight">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行,高-->
<pram>(string Control_ID,int row,int height,string parentID="")</pram>
<example>
函数原型:|bool grid.setrowheight(string Control_ID,int row,int height,string parentID="")|
函数说明:|设置行高|
调用例子:|
grid.setrowheight("表格0",1,50)
</example>
</function>

<!--获得列宽-->
<function name="getcolwide">
<!--返回值:列宽-->
<returntype>int</returntype>
<!--参数:控件名称,列-->
<pram>(string Control_ID,int col,string parentID="")</pram>
<example>
函数原型:|int grid.getcolwide(string Control_ID,int col,string parentID="")|
函数说明:|获得列宽|
调用例子:|
int colwide=grid.getcolwide("表格0",1)
</example>
</function>

<!--设置列宽-->
<function name="setcolwide">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,列,宽-->
<pram>(string Control_ID,int col,int wide,string parentID="")</pram>
<example>
函数原型:|bool grid.setcolwide(string Control_ID,int col,int wide,string parentID="")|
函数说明:|设置列宽|
调用例子:|
grid.setcolwide("表格0",1,50)
</example>
</function>

<!--设置项背景颜色-->
<function name="setitembgcolor">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行,列,颜色值-->
<pram>(string Control_ID,int row,int col,int color,string parentID="")</pram>
<example>
函数原型:|bool grid.setitembgcolor(string Control_ID,int row,int col,int color,string parentID="")|
函数说明:|设置表格某一项的背景颜色|
调用例子:|
grid.setitembgcolor("表格0",1,1,123456)
</example>
</function>

<!--设置项文本颜色-->
<function name="setitemtextcolor">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行,列,颜色值-->
<pram>(string Control_ID,int row,int col,int color,string parentID="")</pram>
<example>
函数原型:|bool grid.setitemtextcolor(string Control_ID,int row,int col,int color,string parentID="")|
函数说明:|设置表格某一项的文本颜色|
调用例子:|
grid.setitemtextcolor("表格0",1,1,123456)
</example>
</function>

<!--填充-->
<function name="fill">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称-->
<pram>(string Control_ID,string parentID="")</pram>
<example>
函数原型:|bool grid.fill(string Control_ID,string parentID="")|
函数说明:|以表格外围边框为边界将表格项填充到整个边界,此时滚动条将消失|
调用例子:|
grid.fill("表格0")
</example>
</function>

<!--获得选中范围-->
<function name="getselectrange">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行,列-->
<pram>(string Control_ID,int r_beginRow,int r_beginCol,int r_endRow,int r_end_Col,string parentID="")</pram>
<example>
函数原型:|bool grid.getselectrange(string Control_ID,int r_beginRow,int r_beginCol,int r_endRow,int r_end_Col,string parentID="")|
函数说明:|获得选中范围|
调用例子:|
int r_beginRow,r_beginCol,r_endRow,r_end_Col
grid.getselectrange("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>

<!--设置选中范围-->
<function name="setselectrange">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行,列-->
<pram>(string Control_ID,int beginRow,int beginCol,int endRow,int end_Col,string parentID="")</pram>
<example>
函数原型:|bool grid.setselectrange(string Control_ID,int beginRow,int beginCol,int endRow,int end_Col,string parentID="")|
函数说明:|设置选中范围|
调用例子:|
grid.setselectrange("表格0",0,0,10,10)
</example>
</function>

<!--获得可见范围-->
<function name="getvisualrange">
<!--返回值:成功或失败-->
<returntype>bool</returntype>
<!--参数:控件名称,行,列-->
<pram>(string Control_ID,int r_beginRow,int r_beginCol,int r_endRow,int r_end_Col,string parentID="")</pram>
<example>
函数原型:|bool grid.getvisualrange(string Control_ID,int r_beginRow,int r_beginCol,int r_endRow,int r_end_Col,string parentID="")|
函数说明:|获得非固定项可见范围|
调用例子:|
int r_beginRow,r_beginCol,r_endRow,r_end_Col
grid.getvisualrange("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>

</namespace>

</dll>

</api>