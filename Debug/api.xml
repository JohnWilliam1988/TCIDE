<?xml version="1.0" encoding="GB2312"?>
<api>
<!--MyApiDll.dll-->

<dll name="功能列表" path="matchDll.dll">

<!--鼠标空间(中文)-->
<namespace name="鼠标">

<!--鼠标移动绝对坐标-->
<function name="移动">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:x 鼠标绝对坐标X,y 鼠标绝对坐标Y-->
<pram>(x坐标,y坐标)</pram>
<example>
函数原型:|鼠标.移动(x坐标,y坐标)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|鼠标.移动(100,200)
</example>
</function>
 	

<!--鼠标移动相对坐标-->
<function name="相对移动">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:x 鼠标相对坐标X,y 鼠标相对坐标Y-->
<pram>(x相对坐标,y相对坐标)</pram>
<example>
函数原型:|鼠标.相对移动(x坐标,y坐标)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|鼠标.相对移动(100,200)
</example>
</function>


<!--鼠标中键单击-->
<function name="中键单击">
<!--返回值:执行成功返回真,否则返回假-->
<!--参数:单击次数 鼠标单击次数-->
<pram>(单击次数)</pram>
<example>
函数原型:|鼠标.中键单击(单击次数)|
函数说明:|鼠标中键单击|
调用例子:|鼠标.中键单击(10)
</example>
</function>

<!--鼠标中键按下-->
<function name="中键按下">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|鼠标.中键按下()|
函数说明:|鼠标中键按下|
调用例子:|鼠标.中键按下()
</example>
</function>

<!--鼠标中键弹起-->
<function name="中键弹起">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|鼠标.中键弹起()|
函数说明:|鼠标中键弹起|
调用例子:|鼠标.中键弹起()
</example>
</function>


<!--鼠标右键单击-->
<function name="右键单击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:单击次数 鼠标右键单击次数-->
<pram>(单击次数=1)</pram>
<example>
函数原型:|鼠标.右键单击(单击次数=1)| 
函数说明:|鼠标右键单击|
调用例子:|鼠标.右键单击(10)
</example>
</function>


<!--鼠标右键双击-->
<function name="右键双击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:双击次数 鼠标右键双击的次数-->
<pram>(双击次数=1)</pram>
<example>
函数原型:|鼠标.右键双击(双击次数=1)|
函数说明:|鼠标右键双击|
调用例子:|鼠标.右键双击(10)
</example>
</function>


<!--鼠标左键单击-->
<function name="左键单击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:单击次数 鼠标左键单击的次数-->
<pram>(单击次数=1)</pram>
<example>
函数原型:|鼠标.左键单击(单击次数=1)|
函数说明:|鼠标左键单击|
调用例子:|鼠标.左键单击(10)
</example>
</function>


<!--鼠标左键双击-->
<function name="左键双击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:双击次数 鼠标左键双击的次数-->
<pram>(双击次数=1)</pram>
<example>
函数原型:|鼠标.左键双击(双击次数=1)|
函数说明:|鼠标左键双击|
调用例子:|鼠标.左键双击(10)
</example>
</function>


<!--鼠标左键按下-->
<function name="左键按下">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|鼠标.左键按下()|
函数说明:|鼠标左键按下|
调用例子:|鼠标.左键按下()
</example>
</function>


<!--鼠标右键按下-->
<function name="右键按下">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|鼠标.右键按下()|
函数说明:|鼠标右键按下|
调用例子:|鼠标.右键按下()
</example>
</function>


<!--鼠标左键弹起-->
<function name="左键弹起">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|鼠标.左键弹起()|
函数说明:|鼠标左键弹起|
调用例子:|鼠标.左键弹起()
</example>
</function>


<!--鼠标右键弹起-->
<function name="右键弹起">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|鼠标.右键弹起()|
函数说明:|鼠标右键弹起|
调用例子:|鼠标.右键弹起()
</example>
</function>      


<!--鼠标中键向上移动-->
<function name="中键上滚">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:上滑次数 鼠标中键向上滚动的次数-->
<pram>(上滑次数=1）</pram>
<example>
函数原型:|鼠标.中键上滚(上滑次数=1）|
函数说明:|鼠标中键上滚|
调用例子:|鼠标.中键上滚(10)
</example>
</function>


<!--鼠标中键向下移动-->
<function name="中键下滚">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:下滑次数 鼠标中键向下滚动的次数-->
<pram>(下滑次数=1）</pram>
<example>
函数原型:|鼠标.中键下滚(下滑次数=1）|
函数说明:|鼠标中键向下滚动指定的次数|
调用例子:|鼠标.中键下滚(10)
</example>
</function>


<!--保存鼠标当前坐标-->
<function name="保存坐标">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|鼠标.保存坐标()|
函数说明:|保存鼠标当前坐标到下一次恢复|
调用例子:|鼠标.保存坐标()
</example>
</function>


<!--恢复鼠标上一次保存的坐标-->
<function name="恢复坐标">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|鼠标.恢复坐标()|
函数说明:|恢复鼠标上一次保存的坐标|
调用例子:|鼠标.恢复坐标()
</example>
</function>


<!--锁住当前鼠标-->
<function name="锁定">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|鼠标.锁定()|
函数说明:|锁住当前鼠标的位置|
调用例子:|鼠标.锁定()
</example>
</function>

<!--解锁当前鼠标-->
<function name="解锁">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|鼠标.解锁()|
函数说明:|解除当前鼠标锁定的位置|
调用例子:|鼠标.解锁()
</example>
</function>


<!--获取当前鼠标的当前位置坐标-->
<function name="获取坐标">
<!--返回值:执行成功返回当前鼠标位置坐标字符串-->

<!--参数:无-->
<pram>(x,y)</pram>
<example>
函数原型:|鼠标.获取坐标(x,y)|
函数说明:|获取当前鼠标的当前位置坐标|
调用例子:|
变量 x,y
鼠标.获取坐标(x,y)
</example>
</function>


<!--获取当前鼠标句柄-->
<function name="鼠标句柄">
<!--返回值:返回当前鼠标句柄-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|鼠标.鼠标句柄()|
函数说明:|获取当前鼠标句柄|
调用例子:|鼠标.鼠标句柄()
</example>
</function>

<!--获取当前鼠标特征码-->
<function name="获取特征码">
<!--返回值:返回当前鼠标特征码-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|鼠标.获取特征码()|
函数说明:|获取当前鼠标特征码|
调用例子:|鼠标形状特征码=鼠标.获取特征码()
</example>
</function>

<!-- 等待点击 -->
<function name="等待点击">
<!--返回值:返回当前鼠标动作代码-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|鼠标.等待点击()|
函数说明:|等待鼠标任意点击动作,并返回鼠标点击动作代码|
调用例子:|鼠标代码=鼠标.等待点击()
</example>
</function>
</namespace>


<!--键盘空间(中文)-->
<namespace name="键盘">


<!--按键:按下-->
<function name="按下">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:键码 键码-->
<pram>(键码)</pram>
<example>
函数原型:|键盘.按下(键码)|
函数说明:|模拟键盘按下动作,键码参考帮助文档里面的键码表|
调用例子:|键盘.按下(65)
</example>
</function>


<!--按键:按下弹起-->
<function name="按键">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:键码 键码,按键次数 模拟按下的次数-->
<pram>(键码,按键次数=1)</pram>
<example>
函数原型:|键盘.按键(键码,按键次数=1)|
函数说明:|模拟键盘按键(按下+弹起)动作,键码参考帮助文档里面的键码表|
调用例子:|键盘.按键(65,10)
</example>
</function>


<!--按键:弹起-->
<function name="弹起">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:键码 键码-->
<pram>(键码)</pram>
<example>
函数原型:|键盘.弹起(键码)|
函数说明:|模拟键盘弹起动作,键码参考帮助文档里面的键码表|
调用例子:|键盘.弹起(65)
</example>
</function>


<!--按键:按下一串连续的字符-->
<function name="发送字符串">
<!-- 返回值:执行成功返回真,否则返回假 --> 
 
<!--参数:字符串 发送的字符串-->
<pram>(字符串,发送延时=50)</pram> 
<example>
函数原型:|键盘.发送字符串(字符串,发送延时=50)|
函数说明:|模拟键盘按键动作发送一连串字符串|
调用例子:|键盘.发送字符串("hello world!")
</example>
</function>

<!--按键:暂停程序等待任意按键后继续-->
<function name="等待按键">
<!-- 返回值:执行成功返回真,否则返回假 --> 
 
<!--参数:-->
<pram>()</pram> 
<example>
函数原型:|键盘.等待按键()|
函数说明:|暂停程序等待任意按键后继续|
调用例子:|键值=键盘.等待按键()
</example>
</function>
</namespace>


<!--窗口空间(中文)-->
<namespace name="窗口">
	
<!--找到窗口-->
<function name="找到窗口">
<!--返回值:执行成功返回找到窗口句柄的整形值,否则返回0-->

<!--参数:窗口名 就是窗口标题-->
<pram>(窗口名,类名="")</pram>
<example>
函数原型:|窗口.找到窗口(窗口名,类名="")|
函数说明:|根据窗口名称或窗口类名返回窗口句柄|
调用列子:|窗口句柄=窗口.找到窗口("World of Warcraft")
</example>
</function>


<!--设置窗口最大化-->
<function name="最大化">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 窗口句柄整形值-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.最大化(窗口句柄)|
函数说明:|窗口最大化|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.最大化(窗口句柄)
</example>
</function>


<!--设置窗口最小化-->
<function name="最小化">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 窗口句柄整形值-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.最小化(窗口句柄)|
函数说明:|使窗口最小化|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.最小化(窗口句柄)
</example>
</function>


<!--设置窗口标题-->
<function name="设置标题">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 整形值,窗口新标题 要设置的标题-->
<pram>(窗口句柄,窗口新标题)</pram>
<example>
函数原型:|窗口.设置标题(窗口句柄,窗口新标题)|
函数说明:|设置窗口标题|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.设置标题(窗口句柄,"wow")
</example>
</function>


<!--设置窗口为置前窗口-->
<function name="置顶">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 窗口的唯一句柄-->
<pram>(窗口句柄,是否置顶=true)</pram>
<example>
函数原型:|窗口.置顶(窗口句柄,是否置顶=true)|
函数说明:|设置窗口永久置顶,第二参数,真为置顶,假为取消置顶,可以置顶TC控件|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft") 
窗口.置顶(窗口句柄,真)
</example>
</function>


<!--设置窗口的位置-->
<function name="设置位置">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口的X坐标, 窗口的Y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.设置位置(窗口句柄,x坐标,y坐标)|
函数说明:|设置窗口的位置|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.设置位置(窗口句柄,10,10)
</example>
</function>


<!--窗口隐藏-->
<function name="隐藏">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.隐藏(窗口句柄)|
函数说明:|设置窗口隐藏|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.隐藏(窗口句柄)
</example>
</function>


<!--显示窗口-->
<function name="显示">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 窗口句柄整形值-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.显示(窗口句柄)|
函数说明:|设置窗口显示|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft") 
窗口.显示(窗口句柄)
</example>
</function>


<!--还原窗口-->
<function name="还原">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要还原的窗口句柄-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.还原(窗口句柄)|
函数说明:|将窗口还原|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.还原(窗口句柄)
</example>
</function>


<!--关闭窗口-->
<function name="关闭">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要关闭的窗口句柄-->
<pram>(窗口句柄,模式=0)</pram>
<example>
函数原型:|窗口.关闭(窗口句柄,模式=0)|
函数说明:|将窗口关闭|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")  
窗口.关闭(窗口句柄)
</example>
</function>


<!--得到窗口标题-->
<function name="得到标题">
<!--返回值:窗口标题-->

<!--参数:窗口句柄 要还原的窗口句柄-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.得到标题(窗口句柄)|
函数说明:|得到窗口的标题|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
标题=窗口.得到标题(窗口句柄)
</example>
</function>


<!--判断窗口是否存在-->
<function name="是否存在">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要判断的窗口句柄-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.是否存在(窗口句柄)|
函数说明:|判断窗口是否存在,返回真表示存在,假表示不存在|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
结果=窗口.是否存在(窗口句柄)
</example>
</function>


<!--得到窗口类型(窗口类名)-->
<function name="类名">
<!--返回值:窗口类型-->

<!--参数:窗口句柄 要操作的窗口的句柄-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.类名(窗口句柄)|
函数说明:|得到窗口的类名|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
类名=窗口.类名(窗口句柄)
</example>
</function>


<!--得到当前窗口句柄-->
<function name="顶层窗口句柄">
<!--返回值:顶层窗口句柄整形值-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|窗口.顶层窗口句柄()|
函数说明:|得到顶层窗口句柄|
调用列子:|顶层句柄=窗口.顶层窗口句柄()
</example>
</function>


<!--得到鼠标移动的窗口句柄-->
<function name="鼠标所在窗口句柄">
<!--返回值:鼠标所在的窗口句柄-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|窗口.鼠标所在窗口句柄()|
函数说明:|得到鼠标所在的窗口句柄|
调用列子:|鼠标窗口=窗口.鼠标所在窗口句柄()
</example>
</function>


<!--得到当前可以发送按键消息的窗口,获取当前键盘焦点的窗口句柄-->
<function name="焦点窗口">
<!--返回值:返回焦点窗口句柄-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|窗口.焦点窗口()|
函数说明:|得到当前焦点窗口句柄|
调用列子:|焦点句柄=窗口.焦点窗口()
</example>
</function>


<!--向窗口按键:按键-弹起消息-->
<function name="发送按键">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要发送的窗口句柄, 键码 要发送的键码-->
<pram>(窗口句柄,键码)</pram>
<example>
函数原型:|窗口.发送按键(窗口句柄,键码)|
函数说明:|向窗口发送一个按键(按下+弹起)模拟,键码参考帮助文档里面的键码表|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")|
窗口.发送按键(窗口句柄,13)
</example>
</function>


<!--向窗口按键:弹起消息-->
<function name="发送弹起">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要发送的窗口句柄, 键码-->
<pram>(窗口句柄,键码)</pram>
<example>
函数原型:|窗口.发送弹起(窗口句柄,键码)|
函数说明:|向窗口发送一个键码的弹起模拟操作,键码参考帮助文档里面的键码表|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.发送弹起(窗口句柄,13)
</example>
</function>


<!--向窗口按键:按下消息-->
<function name="发送按下">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要发送的窗口句柄, 键码-->
<pram>(窗口句柄,键码)</pram>
<example>
函数原型:|窗口.发送按下(窗口句柄,键码)|
函数说明:|向窗口发送一个键码按下的模拟,键码参考帮助文档里面的键码表|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.发送按下(窗口句柄,13)
</example>
</function>


<!--向窗口按下字符消息-->
<function name="发送字符">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要发送的窗口句柄,字符码 字符对应的编码-->
<pram>(窗口句柄,字符码)</pram>
<example>
函数原型:|窗口.发送字符(窗口句柄,字符码)|
函数说明:|向窗口发送一个字符的输入操作,字符码参考帮助文档里面的键码表|
调用列子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.发送字符(窗口句柄,65)
</example>
</function>


<!--向窗口按下字符消息-->
<function name="发送字符串">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 要发送的窗口, 字符串 要发送的字符串-->
<pram>(窗口句柄,字符串)</pram>
<example>
函数原型:|窗口.发送字符串(窗口句柄,字符串)|
函数说明:|向窗口发送字符串|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.发送字符串(窗口句柄,"abcdefghijklmn")
</example>
</function>


<!-- 向窗口按键:按键-弹起消息--> 
<function name="提交按键">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:窗口句柄 通过找到窗口得到的窗口句柄,键码 键码--> 
<pram>(窗口句柄,键码)</pram> 
<example>
函数原型:|窗口.提交按键(窗口句柄,键码)|
函数说明:|向窗口后台提交按键(按下+弹起)模拟,键码参考帮助文档里面的键码表|
调用例子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交按键(窗口句柄,13)
</example>
</function>


<!-- post向窗口按键:弹起消息--> 
<function name="提交弹起">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:窗口句柄 通过找到窗口得到的窗口句柄, 键码 键码--> 
<pram>(窗口句柄,键码)</pram> 
<example>
函数原型:|窗口.提交弹起(窗口句柄,键码)|
函数说明:|向窗口后台提交键盘弹起模拟,键码参考帮助文档里面的键码表|
调用例子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交弹起(窗口句柄,13)
</example>
</function>


<!-- post向窗口按键:按下消息--> 
<function name="提交按下">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:窗口句柄 窗口句柄, 键码 键码--> 
<pram>(窗口句柄,键码)</pram> 
<example>
函数原型:|窗口.提交按下(窗口句柄,键码)|
函数说明:|向窗口后台提交按下模拟,键码参考帮助文档里面的键码表|
调用例子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交按下(窗口句柄,13)
</example>
</function>


<!-- post向窗口按下字符消息--> 
<function name="提交字符">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:窗口句柄 窗口的句柄,字符值 字符值--> 
<pram>(窗口句柄,字符值)</pram> 
<example>
函数原型:|窗口.提交字符(窗口句柄,字符值)|
函数说明:|向窗口后台提交按键字符值输入,字符值参考帮助文档里面的键码表|
调用例子:|
窗口句柄=窗口.找到窗口("World of Warcraft")  
窗口.提交字符(窗口句柄,65)|
</example>
</function>


<!-- post向窗口按下字符消息--> 
<function name="提交字符串">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:窗口句柄 操作的窗口的句柄, 字符串 发送的字符串--> 
<pram>(窗口句柄,字符串)</pram> 
<example>
函数原型:|窗口.提交字符串(窗口句柄,字符串)|
函数说明:|向窗口后台提交一连串的字符串|
调用例子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.提交字符串(窗口句柄,"hello world")
</example>
</function>


<!--设置窗口的大小-->
<function name="设置大小">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口的宽,窗口的高-->
<pram>(窗口句柄,宽,高)</pram>
<example>
函数原型:|窗口.设置大小(窗口句柄,宽,高)|
函数说明:|设置窗口的大小|
调用列子:|
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.设置大小(窗口句柄,600,450)
</example>
</function>


<!--获取窗口的位置-->
<function name="获取位置">
<!--返回值:执行成功返回真,将窗口位置的X坐标,Y坐标返回-->

<!--参数:窗口句柄,窗口的X坐标, 窗口的Y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.获取位置(窗口句柄,x坐标,y坐标)|
函数说明:|获取窗口的位置|
调用列子:|
变量 x坐标,y坐标,窗口句柄 
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.获取位置(窗口句柄,x坐标,y坐标)
</example>
</function>

<!--获取窗口的大小-->
<function name="获取大小">
<!--返回值:执行成功返回真,将窗口宽和将窗口高返回-->

<!--参数:窗口句柄,窗口的宽,窗口的高-->
<pram>(窗口句柄,宽,高)</pram>
<example>
函数原型:|窗口.获取大小(窗口句柄,宽,高)|
函数说明:|获取窗口的大小|
调用列子:|
变量 宽,高,窗口句柄
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.获取大小(窗口句柄,宽,高)
</example>
</function>

<!--窗口坐标转屏幕坐标-->
<function name="窗口转屏幕">
<!--返回值:成功或者失败-->

<!--参数窗口句柄,窗口x坐标, 窗口y坐标, 返回屏幕x坐标, 返回屏幕y坐标-->
<pram>(窗口句柄,窗口x坐标,窗口y坐标,返回屏幕x坐标,返回屏幕y坐标)</pram>
<example>
函数原型:|窗口.窗口转屏幕(窗口句柄,窗口x坐标,窗口y坐标,返回屏幕x坐标,返回屏幕y坐标)|
函数说明:|窗口坐标转屏幕坐标|
调用列子:|
变量 返回屏幕x坐标,返回屏幕y坐标
是否成功=窗口.窗口转屏幕(窗口句柄,10,200,返回屏幕x坐标,返回屏幕y坐标)
</example>
</function> 

<!--屏幕坐标转窗口坐标-->
<function name="屏幕转窗口">
<!--返回值:成功或者失败-->

<!--参数窗口句柄,屏幕x坐标, 屏幕y坐标, 返回窗口x坐标, 返回窗口y坐标-->
<pram>(窗口句柄,窗口x坐标,窗口y坐标,返回窗口x坐标,返回窗口y坐标)</pram>
<example>
函数原型:|窗口.屏幕转窗口(窗口句柄,屏幕x坐标,屏幕y坐标,返回窗口x坐标,返回窗口y坐标)|
函数说明:|屏幕坐标转窗口坐标|
调用列子:|
变量 返回窗口x坐标,返回窗口y坐标
是否成功=窗口.屏幕转窗口(窗口句柄,10,200,返回窗口x坐标,返回窗口y坐标)
</example>
</function> 

<!--得到父窗口句柄-->
<function name="得到父窗口">
<!--返回值:父窗口句柄-->

<!--参数窗口句柄-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.得到父窗口(窗口句柄)|
函数说明:|得到父窗口句柄,返回0表示没有父窗口|
调用列子:|父窗口句柄=窗口.得到父窗口(窗口句柄)
</example>
</function> 

<!--后台发送鼠标-->
<function name="鼠标移动">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标移动(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标移动到窗口x,y坐标位置的消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标移动(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键按下-->
<function name="鼠标左键按下">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标左键按下(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键按下消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键按下(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键弹起-->
<function name="鼠标左键弹起">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标左键弹起(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键弹起消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键弹起(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键单击-->
<function name="鼠标左键单击">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标左键单击(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键单击消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键单击(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标左键双击-->
<function name="鼠标左键双击">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标左键双击(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键双击消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标左键双击(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键按下-->
<function name="鼠标右键按下">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标右键按下(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键按下消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键按下(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键弹起-->
<function name="鼠标右键弹起">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标右键弹起(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键弹起消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键弹起(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键单击-->
<function name="鼠标右键单击">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标右键单击(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键单击消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键单击(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标右键双击-->
<function name="鼠标右键双击">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标右键双击(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键双击消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标右键双击(窗口句柄,50,20)
</example>
</function>


<!--后台发送鼠标中键按下-->
<function name="鼠标中键按下">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标中键按下(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键按下消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标中键按下(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标中键弹起-->
<function name="鼠标中键弹起">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标中键弹起(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键弹起消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标中键弹起(窗口句柄,50,20)
</example>
</function>

<!--后台发送鼠标中键单击-->
<function name="鼠标中键单击">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.鼠标中键单击(窗口句柄,x坐标,y坐标)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键单击消息,坐标体系相对于客户区坐标|
调用例子:|
窗口句柄=窗口.找到窗口("魔兽世界")
窗口.鼠标中键单击(窗口句柄,50,20)
</example>
</function>

<!--得到自身窗口句柄-->
<function name="自身句柄">
<!--返回值:顶层窗口句柄整形值-->
<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|窗口.自身句柄()|
函数说明:|得到自身窗口句柄,只能获取主窗口的句柄|
调用列子:|句柄=窗口.自身句柄()
</example>
</function>


<!--通过句柄获取路径-->
<function name="获取路径">
<!--返回值:path程序路径-->

<!--参数:无-->
<pram>(句柄)</pram>
<example>
函数原型:|窗口.获得路径(句柄)|
函数说明:|通过窗口句柄获取指定窗口程序的路径|
调用例子:|
句柄=窗口.自身句柄()
路径=窗口.获取路径(句柄)
辅助.消息框(路径)
</example>
</function>

<!--设置窗口为置前窗口-->
<function name="激活">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄 窗口的唯一句柄-->
<pram>(窗口句柄)</pram>
<example>
函数原型:|窗口.激活(窗口句柄)|
函数说明:|激活窗口,并置顶一次|
调用列子:|
窗口句柄=窗口.找到窗口("TC帮助文档")
窗口.激活(窗口句柄)
</example>
</function>

<!--获取窗口客户区大小-->
<function name="获取客户区大小">
<!--返回值:执行成功返回真失败返回假-->

<!--参数:窗口句柄,窗口的宽,窗口的高-->
<pram>(窗口句柄,rCX,rCY,返回宽,返回高)</pram>
<example>
函数原型:|窗口.获取客户区大小(窗口句柄,rCX,rCY,返回宽,返回高)|
函数说明:|获取窗口的位置及客户区大小(不包含标题栏大小)|
调用列子:|
变量 窗口句柄,rCX,rCY,返回宽,返回高
窗口句柄=窗口.找到窗口("World of Warcraft")
窗口.获取客户区大小(窗口句柄,rCX,rCY,返回宽,返回高)
</example>
</function>

<!--抓取当前活动窗口指定坐标点的图像-->
<function name="坐标点取色">
<!--返回值:返回的是颜色值的十六进制字符型数据-->

<!--参数:窗口句柄, 点的x坐标, 点的y坐标-->
<pram>(窗口句柄,x坐标,y坐标)</pram>
<example>
函数原型:|窗口.坐标点取色(窗口句柄,x坐标,y坐标)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|
窗口句柄=窗口.找到窗口("IE浏览器")
图像值=窗口.坐标点取色(窗口句柄,300,300)
</example>
</function>

<!--在当前活动窗口区域内找色-->
<function name="区域找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像,返回真,否则返回假-->

<!--参数:窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值 颜色16进制数, 检索方式,返回x坐标,返回y坐标-->
<pram>(窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,检索方式,返回x坐标,返回y坐标)</pram>
<example>
函数原型:| 窗口.区域找色(窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,检索方式,返回x坐标,返回y坐标)|
函数说明:|在当前活动窗口区域内找色|
调用列子:|
变量 x,y,窗口句柄
窗口句柄=窗口.找到窗口("IE浏览器")
是否找到=窗口.区域找色(窗口句柄,10,10,500,600,#1E3C04,1,x,y)
</example>
</function>

<!--在当前活动窗口区域内模糊找色-->
<function name="模糊找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像点,如果找到在参数里返回,否则返回空-->

<!--参数:窗口句柄,左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标, 颜色值 颜色16进制数,检索方式,返回x坐标,返回y坐标-->
<pram>(窗口句柄,左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,颜色值,相似度,检索方式,返回的x坐标,返回的y坐标)</pram>
<example>
函数原型:| 窗口.模糊找色(窗口句柄,颜色值,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,相似度,检索方式,返回的x坐标,返回的y坐标)|
函数说明:|在当前活动窗口区域内模糊找图像点,找到图像点,坐标值保存在返回的x坐标和返回的y坐标 变量里。未找到则返回的x坐标和返回的y坐标这2个变量的值为-1|
调用列子:|
//相似度的值规定范围(0.5-1.0),推荐使用0.8
变量 x,y,窗口句柄
窗口句柄=窗口.找到窗口("IE浏览器")
是否找到=窗口.模糊找色(窗口句柄,10,10,500,600,#1E3C04,0.8,1,x,y)
</example>
</function>


<!--后台找图功能-->
<function name="找图">
<!-- 返回值:找到则返回相应图片的序号,未找到则返回0--> 
 
<!-- 参数:窗口句柄 左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径, 色偏, 相似度, 检索方式,返回找到的x坐标,y坐标--> 
<pram>(窗口句柄,left,top,right,buttom,path,色偏,相似度,检索方式,x,y)</pram> 
<example>
函数原型:|窗口.找图(窗口句柄,left,top,right,buttom,path,色偏,相似度,检索方式,x,y)| 
函数说明:|后台找图功能| 
调用列子:|
//说明:支持多张图片(图片与图片中间使用 竖线隔开)和根据四角的颜色判断是否为透明图
变量 图片X坐标,图片Y坐标,图片序号,窗口句柄
窗口句柄=窗口.找到窗口("IE浏览器")
图片序号=窗口.找图(窗口句柄,0,0,1440,900,"d:\\111.bmp",#101120,1.0,1,图片X坐标,图片Y坐标)
</example> 
</function>

<!--设置焦点-->
<function name="设置焦点">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(句柄)</pram>
<example>
函数原型:|窗口.设置焦点(句柄)|
函数说明:|设置键盘焦点到指定窗口,返回值为上次键盘焦点所在窗口的句柄|
调用例子:|
句柄=控件.获得句柄("编辑框0")
窗口.设置焦点(句柄)
</example>
</function>

<!--是否可见-->
<function name="是否可见">
<!--返回值:成功或失败-->

<!--参数:窗口句柄-->
<pram>(句柄)</pram>
<example>
函数原型:|窗口.是否可见(句柄)|
函数说明:|判断一个窗口是否可见,返回真表示可见,返回假表示不可见,对控件同样有效|
调用例子:|
句柄=控件.获得句柄("编辑框0")
辅助.消息框(窗口.是否可见(句柄))
</example>
</function>

<!--是否有效-->
<function name="是否有效">
<!--返回值:成功或失败-->

<!--参数:窗口句柄-->
<pram>(句柄)</pram>
<example>
函数原型:|窗口.是否有效(句柄)|
函数说明:|判断一个窗口是否有效,返回真表示可用,返回假表示不可用,对控件同样有效|
调用例子:|
句柄=控件.获得句柄("编辑框0")
辅助.消息框(窗口.是否有效(句柄))
</example>
</function>

<!--是否有效-->
<function name="发送消息">
<!--返回值:成功或失败-->

<!--参数:窗口句柄-->
<pram>(hwnd,msg,wparam,iparam)</pram>
<example>
函数原型:|窗口.发送消息(hwnd,msg,wparam,iparam)|
函数说明:|将指定的消息发送到一个窗口,同win32 api 里面的SendMessage等同的效果|
调用例子:|
句柄=窗口.自身句柄()
窗口.发送消息(句柄,274,61488,0)//将向TC窗口自身发送最大化的消息
</example>
</function>

<!--是否有效-->
<function name="提交消息">
<!--返回值:成功或失败-->

<!--参数:窗口句柄-->
<pram>(hwnd,msg,wparam,iparam)</pram>
<example>
函数原型:|窗口.提交消息(hwnd,msg,wparam,iparam)|
函数说明:|将一个消息放入到与指定窗口创建的线程相联系消息队列里,同win32 api 里面的PostMessage等同的效果|
调用例子:|
句柄=窗口.自身句柄()
窗口.提交消息(句柄,274,61488,0)//向TC窗口自身提交最大化的消息
</example>
</function>

</namespace>


<!--文件命名空间(中文)-->
<namespace name="文件">

<!--打开文件,打开成功返回文件句柄,失败返回0 -->
<function name="打开">
<!--返回值:打开成功返回文件句柄,否则返回0-->

<!--参数:文件路径 文件绝对路径-->
<pram>(文件路径,属性="读写")</pram>
<example>
函数原型:|文件.打开(文件路径,属性="读写")|
函数说明:|打开文件操作成功后返回句柄,失败返回0,,属性见帮助文档|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
文件.关闭(文件句柄)
</example>
</function>


<!--关闭文件-->
<function name="关闭">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件句柄-->
<pram>(文件句柄)</pram>
<example>
函数原型:|文件.关闭(文件句柄)|
函数说明:|关闭文件操作|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
文件.关闭(文件句柄)
</example>
</function>


<!--创建文件-->
<function name="创建">
<!--返回值:执行成功返回文件句柄,否则返回0-->

<!--参数:文件路径,读写属性-->
<pram>(文件路径,属性)</pram>
<example>
函数原型:|文件.创建(文件路径,属性)|
函数说明:|创建文件,成功返回句柄,失败返回0,默认属性有("创建文件"),默认创建为ascii编码文件,更多属性见帮助文档|
调用例子:|
文件句柄=文件.创建("d:\\1.txt","读写")
文件.关闭(文件句柄)
</example>
</function>


<!--写文件ascii-->
<function name="写入">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件句柄,写入的内容-->
<pram>(文件句柄,写入的内容)</pram>
<example>
函数原型:|文件.写入(文件句柄,写入的内容)|
函数说明:|在文件中当前位置写入指定的内容|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
文件.写入(文件句柄,"aaaa")
文件.关闭(文件句柄)
</example>
</function>


<!--在文件当前读写入一行内容ascii-->
<function name="写一行">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件句柄,写入的内容-->
<pram>(文件句柄,写入的内容)</pram>
<example>
函数原型:|文件.写一行(文件句柄,写入的内容)|
函数说明:|在文件中写一行内容并换行|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
文件.写一行(文件句柄,"this is a test")
文件.关闭(文件句柄)
</example>
</function>


<!--写文件ascii-->
<function name="末尾写入">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件句柄,写入的内容-->
<pram>(文件句柄,写入的内容)</pram>
<example>
函数原型:|文件.末尾写入(文件句柄,写入的内容)|
函数说明:|在文件末尾写入指定内容|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
文件.末尾写入(文件句柄,"aaaa")
文件.关闭(文件句柄)
</example>
</function>


<!--读文件ascii-->
<function name="读出">
<!--返回值:返回读出的内容-->

<!--参数:文件句柄,读取字符个数-->
<pram>(文件句柄,读取字符个数)</pram>
<example>
函数原型:|文件.读出(文件句柄,读取字符个数)|
函数说明:|读出文件指定个数的内容并返回读出内容字符串|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
读取内容=文件.读出(文件句柄,10)
文件.关闭(文件句柄)
</example>
</function>


<!--根据文件的当前读写位置读一行内容ascii-->
<function name="读一行">
<!--返回值:读出的内容-->

<!--参数: 文件句柄-->
<pram>(文件句柄)</pram>
<example>
函数原型:|文件.读一行(文件句柄)|
函数说明:|在当前位置,读一行内容并返回读出内容字符串|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
内容=文件.读一行(文件句柄)
文件.关闭(文件句柄)
</example>
</function>

<!--移动文件-->
<function name="移动">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:源文件路径,目标文件路径-->
<pram>( 源文件路径,目标文件路径)</pram>
<example>
函数原型:|文件.移动( 源文件路径,目标文件路径)|
函数说明:|文件移动|
调用例子:|文件.移动("e:\\2.txt","d:\\1.txt")
</example>
</function>


<!--拷贝文件-->
<function name="拷贝">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:要拷贝的文件,拷贝的目标的文件-->
<pram>( 要拷贝的文件,拷贝的目标的文件)</pram>
<example>
函数原型:|文件.拷贝( 要拷贝的文件,拷贝的目标的文件)|
函数说明:|文件拷贝|
调用例子:|文件.拷贝("d:\\bb.txt","d:\\aa.txt")
</example>
</function>


<!--重命名文件-->
<function name="重命名">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:原始文件名,新文件名-->
<pram>(原始文件名,新文件名)</pram>
<example>
函数原型:|文件.重命名(原始文件名,新文件名)|
函数说明:|文件重命名|
调用例子:|文件.重命名("d:\\aa.txt","d:\\bb.txt")
</example>
</function>


<!--删除文件-->
<function name="删除">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件路径 要删除的文件路径-->
<pram>( 文件路径)</pram>
<example>
函数原型:|文件.删除(文件路径)|
函数说明:|文件删除|
调用例子:|文件.删除("d:\\1.txt")
</example>
</function>


<!--得到文件的长度-->
<function name="长度">
<!--返回值:返回文件的长度-->

<!--参数:文件句柄-->
<pram>(文件路径)</pram>
<example>
函数原型:|文件.长度(文件路径)|
函数说明:|读出文件长度并返回文件里字符的数量|
调用例子:|
文件长度=文件.长度("d:\\1.txt")
</example>
</function>


<!--创建文件夹-->
<function name="创建文件夹">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件夹路径-->
<pram>(文件夹路径)</pram>
<example>
函数原型:|文件.创建文件夹(文件夹路径)|
函数说明:|创建文件夹|
调用例子:|文件.创建文件夹("d:\\bb")
</example>
</function>


<!--复制文件夹-->
<function name="复制文件夹">
<!--返回值:执行成功返回0值,否则返回非0值-->

<!--参数:要被复制的文件夹,新的文件夹路径-->
<pram>( 要被复制的文件夹,新的文件夹路径)</pram>
<example>
函数原型:|文件.复制文件夹( 要被复制的文件夹,新的文件夹路径)|
函数说明:|复制文件夹|
调用例子:|文件.复制文件夹("d:\\bbb","d:\\aaa")
</example>
</function>


<!--重命名文件夹-->
<function name="重命名文件夹">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:源文件夹名,新文件夹名-->
<pram>(源文件夹名,新文件夹名)</pram>
<example>
函数原型:|文件.重命名文件夹(源文件夹名,新文件夹名)|
函数说明:|重命名文件夹|
调用例子:|文件.重命名文件夹("d:\\bb","d:\\aa")
</example>
</function>


<!--删除文件夹-->
<function name="删除文件夹">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件夹路径-->
<pram>(文件夹路径)</pram>
<example>
函数原型:|文件.删除文件夹(文件夹路径)|
函数说明:|删除文件夹|
调用例子:|文件.删除文件夹("d:\\bb")
</example>
</function>


<!--设置文件属性-->
<function name="设置属性">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件路径,文件属性-->
<pram>(文件路径,文件属性)</pram>
<example>
函数原型:|文件.设置属性(文件路径,文件属性)|
函数说明:|设置文件属性|
调用例子:|文件.设置属性("d:\\bb.txt","读写")
</example>
</function>


<!--设置文件的读写的位置-->
<function name="设置游标位置">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件句柄,位置-->
<pram>(文件句柄,位置)</pram>
<example>
函数原型:|文件.设置游标位置(文件句柄,位置)|
函数说明:|设置指定文件句柄的当前的读写游标位置|
调用例子:|
文件句柄=文件.打开("d:\\1.txt")
文件.设置游标位置(文件句柄,"开始")
文件.设置游标位置(文件句柄,"结束")
</example>
</function>

<!--判断文件或文件夹是否存在-->
<function name="是否存在">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件句柄,位置-->
<pram>(路径)</pram>
<example>
函数原型:|文件.是否存在(路径)|
函数说明:|判断文件或文件夹是否存在,真表示存在,假表示不存在|
调用例子:|
是否存在=文件.是否存在("c:\\1.txt")
如果(是否存在)
辅助.消息框("文件存在")
否则
辅助.消息框("文件不存在")
如果结束
</example>
</function>

<!--读文件-->
<function name="读文件">
<!--返回值:返回读出的内容-->

<!--参数:文件路径-->
<pram>(路径)</pram>
<example>
函数原型:|文件.读文件(路径)|
函数说明:|根据路径读文件,返回文件内容字符串|
调用例子:|辅助.消息框(文件.读文件("d:\\1.txt"))
</example>
</function>

<!--遍历-->
<function name="遍历">
<!--返回值:返回读出的内容-->

<!--参数:真或假-->
<pram>(路径,返回文件夹,返回文件)</pram>
<example>
函数原型:|文件.遍历(路径,返回文件夹,返回文件)|
函数说明:|遍历指定路径中的文件夹及文件,详细说明见帮助文档|
调用例子:|变量 返回文件夹,返回文件
文件.遍历("D:\\test",返回文件夹,返回文件)
</example>
</function>

<!--对话框-->
<function name="对话框">
<!--返回值:返回读出的内容-->

<!--参数:真或假-->
<pram>(模式,标题="",父窗口句柄=0)</pram>
<example>
函数原型:|文件.对话框(模式,标题="",父窗口句柄=0)|
函数说明:|弹出文件对话框,返回选择的路径,模式 0:保存文件,1:打开文件,2,选择文件夹|
调用例子:|路径=文件.对话框(0)
</example>
</function>

  <!--文件加密-->
<function name="文件加密">
    <!--返回值:加密后字串-->

    <!--参数:源数据,密钥-->
    <pram>(要加密文件路径,加密后文件路径,密钥)</pram>
    <example>
      函数原型:|文件.文件加密(要加密文件路径,加密后文件路径,密钥)|
      函数说明:|通过密钥,加密指定文件,并保存加密后文件到指定目录,成功返回真,否则返回假|
      调用例子:|
      文件.文件加密("D:\\源文件.txt","D:\\加密后文件.txt","123")
      文件.文件解密("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
    </example>
  </function>

  <!--文件解密-->
<function name="文件解密">
    <!--返回值:加密后字串-->

    <!--参数:源数据,密钥-->
    <pram>(加密后文件路径,解密后文件路径,密钥)</pram>
    <example>
      函数原型:|文件.文件解密(加密后文件路径,解密后文件路径,密钥)|
      函数说明:|通过密钥,解密指定文件,并保存解密后文件到指定目录,成功返回真,否则返回假|
      调用例子:|
      文件.文件加密("D:\\源文件.txt","D:\\加密后文件.txt","123")
      文件.文件解密("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
    </example>
  </function>

</namespace>



<!--字符串命名空间(中文)-->
<namespace name="字符串">

<!--2个字符串的连接-->
<function name="连接">
<!--返回值:返回字符串-->

<!--参数: 连接字符串1, 连接字符串2-->
<pram>(连接字符串1,连接字符串2)</pram>
<example>
函数原型:|字符串.连接(连接字符串1,连接字符串2)|
函数说明:|连接字符串,返回新的字符串|
调用例子:|辅助.消息框(字符串.连接("aaa","bbb"))
</example>
</function>


<!--字符串小写-->
<function name="转小写">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数: 要改成小写的字符串-->
<pram>(要改成小写的字符串)</pram>
<example>
函数原型:|字符串.转小写(要改成小写的字符串)|
函数说明:|转小写,返回新的字符串|
调用例子:|辅助.消息框(字符串.转小写("ABC"))
</example>
</function>


<!--字符串大写-->
<function name="转大写">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:要改成大写的字符串-->
<pram>(要改成大写的字符串)</pram>
<example>
函数原型:|字符串.转大写(要改成大写的字符串)|
函数说明:|转大写,返回新的字符串|
调用例子:|辅助.消息框(字符串.转大写("abc"))
</example>
</function>


<!--2个字符串的比较-->
<function name="比较">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->

<!--参数:字符串1,字符串2-->
<pram>(字符串1,字符串2)</pram>
<example>
函数原型:|字符串.比较(字符串1,字符串2)|
函数说明:|比较2个字符串,返回值==0表示相等,>0表示字符串1大于字符串2,反之则字符串1小于字符串2|
调用例子:|字符串.比较("aaa","bbb")
</example>
</function>


<!--去掉字符串头尾指定字符-->
<function name="修剪">
<!--返回值:返回排除了要比较的字符串-->

<!--参数:要比较字符串,源数据-->
<pram>(要比较字符串,源数据=" ")</pram>
<example>
函数原型:|字符串.修剪(要比较字符串,源数据=" ")|
函数说明:|去掉字符串头尾指定字符,返回处理后字符串|
调用例子:|辅助.消息框(字符串.修剪("abcdefgabcdefgabc","abc"))
</example>
</function>


<!--移除前几位或后几位字符串-->
<function name="移除" >
<!--返回值:返回已移除几位的字符串-->

<!--参数:字符串,从前或后移除的几位字符串-->
<pram>(字符串,移除几位,前后)</pram>
<example>
函数原型:|字符串.移除(字符串,移除几位,前后)|
函数说明:|移除前几位或后几位字符串,返回处理后新的字符串|
调用例子:|字符串.移除("abcdefghijiklnm",5,假)
</example>
</function>


<!--字符串中截取指定区域的字符串-->
<function name="截取">
<!--返回值:返回截取到的指定区域的字符串-->

<!--参数:字符串, 截取的开头位置,截取的末尾的位置-->
<pram>(字符串,截取的开头位置,截取的末尾的位置)</pram>
<example>
函数原型:|字符串.截取(字符串,截取的开头位置,截取的末尾的位置)|
函数说明:|字符串中截取指定区域的字符串,返回处理后新的字符串|
调用例子:|辅助.消息框(字符串.截取("abcdefghijklmn",2,5))
</example>
</function>


<!--得到字符串长度-->
<function name="长度">
<!--返回值:返回整形-->

<!--参数:求出长度信息的字符串-->
<pram>(求出长度信息的字符串)</pram>
<example>
函数原型:|字符串.长度(求出长度信息的字符串)|
函数说明:|得到字符串长度并且返回长度|
调用例子:|字符串.长度("abdcdef")
</example>
</function>


<!--字符串中加字符-->
<function name="添加字符">
<!--返回值:返回字符串-->

<!--参数:字符串,字符ascii值-->
<pram>(字符串,字符ascii值)</pram>
<example>
函数原型:|字符串.添加字符(字符串,字符ascii值)|
函数说明:|添加字符,返回处理后新的字符串|
调用例子:|辅助.消息框(字符串.添加字符("abcdefghijklmn",13))
</example>
</function>


<!--字符串中找字符-->
<function name="查找字符">
<!--返回值:返回找到字符的位置-->

<!--参数:字符串,字符ascii值-->
<pram>(字符串,字符ascii值)</pram>
<example>
函数原型:|字符串.查找字符(字符串,字符ascii值)|
函数说明:|在第一个字符串查找第二个字符,并返回第一次出现该字符的位置|
调用例子:|字符串.查找字符("abcdefghijklmn",65)
</example>
</function>


<!--在第一个字符串查找第一个字符串,并返回第一次出现该字符的位置-->
<function name="查找字符串" >
<!--返回值:返回第一次出现该字符串的位置-->

<!--参数:要比较字符串,源数据-->
<pram>(要比较字符串,源数据)</pram>
<example>
函数原型:|字符串.查找字符串(要比较字符串,源数据)|
函数说明:|在第一个字符串查找第二个字符串,并返回第一次出现该字符串的位置|
调用例子:|字符串.查找字符串("uuuuabcdefgg","abc")
</example>
</function>


<!--根据给出的字符的位置,在字符串中找到对应的字符-->
<function name="返回字符">
<!--返回值:返回找到字符的ASCII码-->

<!--参数:字符串,位置-->
<pram>(字符串,位置)</pram>
<example>
函数原型:|字符串.返回字符(字符串,位置)|
函数说明:|返回字符|
调用例子:|字符串.返回字符("abcdefghijklmn",6)
</example>
</function>


<!--2个字符串都截取前面几个字符的进行比较-->
<function name="定长比较">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->

<!--参数:字符串1,字符串2,截取多少位-->
<pram>(字符串1,字符串2,截取多少位)</pram>
<example>
函数原型:|字符串.定长比较(字符串1,字符串2,截取多少位)|
函数说明:|比较字符串前几位的asiic值,返回值==0表示相等,>0表示字符串1大于字符串2,反之则字符串1小于字符串2|
调用例子:|字符串.定长比较("aaaaaaa","abcdefgh",5)
</example>
</function>

<!--格式化字符串-->
<function name="格式化">
<!--返回值:返回格式化之后的字符串-->

<!--参数: 字符串 格式-->
<pram>(字符串)</pram>
<example>
函数原型:|字符串.格式化(字符串,...)|
函数说明:|格式化字符串,返回处理后新的字符串|
调用例子:|
格式字符=字符串.格式化("%d%s",3,"bbb")
辅助.消息框(格式字符)
</example>
</function>


<!--字符串倒序-->
<function name="倒序">
<!--返回值:返回倒序后的字符串-->

<!--参数:str字符串-->
<pram>(字串)</pram>
<example>
函数原型:|字符串.倒序(字串)|
函数说明:|字符串倒序,返回处理后新的字符串|
调用例子:|辅助.消息框(字符串.倒序("abc"))
</example>
</function>

<!--字符串替换-->
<function name="替换">
<!--返回值:返回倒序后的字符串-->

<!--参数:str字符串-->
<pram>(字串1,字串2,字串3)</pram>
<example>
函数原型:|字符串.替换(字串1,字串2,字串3)|
函数说明:|字符串替换,查找并替换字符串中指定子串,1=需要替换的源字符串 2=需要被替换的字串 3=用于替换的子串|
调用例子:|辅助.消息框(字符串.替换("a1b1c1","1","2"))
</example>
</function>

<!--字符串分割-->
<function name="分割">
<!--返回值:返回倒序后的字符串-->

<!--参数:str字符串-->
<pram>(源串,分割串,返回字串)</pram>
<example>
函数原型:|字符串.分割(源串,分割串,返回串)|
函数说明:|字符串分割,根据分隔符把源串分割,返回串是一维的字符串数组,没有找到分割符时,返回 假|
调用例子:|
变量 返回值 //需要先初始化一次
变量 源串="AB:CD:EF:GH:JK",分隔符=":"
是否成功=字符串.分割(源串,分隔符,返回值)

</example>
</function>

  <!--aes加密-->
  <function name="aes加密">
    <!--返回值:加密后字串-->

    <!--参数:源数据,密钥-->
    <pram>(源数据,密钥)</pram>
    <example>
      函数原型:|字符串.aes加密(源数据,密钥)|
      函数说明:|通过AES加密算法加密传入源数据字串,密钥为自定义,解密需要用到,返回加密后字符串|
      调用例子:|
      变量 加密字串,源数据="TChello",密钥="qwer",解密后数据
      加密字串=字符串.aes加密(源数据,密钥)
      辅助.消息框(加密字串)
      解密后数据=字符串.aes解密(加密字串,密钥)
      辅助.消息框(解密后数据) //成功解密输出"TChello"
    </example>
  </function>

  <!--aes解密-->
  <function name="aes解密">
    <!--返回值:解密后字串-->

    <!--参数:源数据,密钥-->
    <pram>(源数据,密钥)</pram>
    <example>
      函数原型:|字符串.aes解密(源数据,密钥)|
      函数说明:|通过AES解密算法解密数据,需要用于加密的密钥,返回解密后字符串|
      调用例子:|
      变量 加密字串,源数据="TChello",密钥="qwer",解密后数据
      加密字串=字符串.aes加密(源数据,密钥)
      辅助.消息框(加密字串)
      解密后数据=字符串.aes解密(加密字串,密钥)
      辅助.消息框(解密后数据) //成功解密输出"TChello"
    </example>
  </function>

  <!--md5加密-->
  <function name="md5">
    <!--返回值:加密后字串-->

    <!--参数:源数据-->
    <pram>(源数据)</pram>
    <example>
      函数原型:|字符串.md5(源数据)|
      函数说明:|通过MD5加密算法加密传入源数据字串,该加密算法无解密算法,返回数据的MD5值|
      调用例子:|
      变量 加密字串,源数据="TChello"
      加密字串=字符串.md5(源数据)
      辅助.消息框(加密字串)
    </example>
  </function>
  
</namespace>


<!--图像空间-->

<namespace name="图像">
<!--在当前活动窗口区域内找色-->
<function name="区域找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像,返回真,否则返回假-->

<!--参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值 颜色16进制数,检索方式,返回x坐标,返回y坐标-->
<pram>(左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,检索方式,返回x坐标,返回y坐标)</pram>
<example>
函数原型:| 图像.区域找色(左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,检索方式,返回x坐标,返回y坐标)|
函数说明:|在当前活动窗口区域内找色|
调用列子:|
变量 x,y
是否找到=图像.区域找色(10,10,500,600,#1252E0,0,x,y)
</example>
</function>


<!--抓取当前活动窗口指定坐标点的图像-->
<function name="坐标点取色">
<!--返回值:返回的是颜色值的十六进制字符型数据-->

<!--参数:点的x坐标,点的y坐标-->
<pram>(x坐标,y坐标)</pram>
<example>
函数原型:|图像.坐标点取色(x坐标,y坐标)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|图像值=图像.坐标点取色(300,300)
</example>
</function>


<!--在当前活动窗口区域内模糊找色-->
<function name="模糊找色">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像点,如果找到在参数里返回,否则返回空-->

<!--参数:左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,颜色值 颜色16进制数,,检索方式返回x坐标,返回y坐标-->
<pram>(左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,颜色值,相似度,检索方式,返回的x坐标,返回的y坐标)</pram>
<example>
函数原型:| 图像.模糊找色(左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,相似度,检索方式,返回的x坐标,返回的y坐标)|
函数说明:|在当前活动窗口区域内模糊找图像点,找到图像点,坐标值保存在返回的x坐标和返回的y坐标 变量里。未找到则返回的x坐标和返回的y坐标这2个变量的值为-1|
调用列子:|
//相似度的值规定范围(0.5-1.0),推荐使用0.8
变量 x,y
是否找到=图像.模糊找色(10,10,500,600,#1E3C04,0.8,0,x,y)
</example>
</function>



<!--在当前活动窗口区域内找图-->
<function name="找图">
<!-- 返回值:找到则返回的是图片的相应序号,未找到则返回0--> 
 
<!-- 参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径,色偏,相似度,检索方式,返回找到的x坐标,y坐标--> 
<pram>(left,top,right,buttom,path,色偏,相似度,检索方式,x,y)</pram> 
<example>
函数原型:|图像.找图(left,top,right,buttom,path,色偏,相似度,检索方式,x,y)| 
函数说明:|在当前活动窗口区域内找图,返回图片的索引值| 
调用列子:|
//说明:支持多张图片(图片与图片中间使用 竖线隔开)和根据四角的颜色判断是否为透明图|
图片X坐标,图片Y坐标,图像序号
图像序号=图像.找图(0,0,1440,900,"d:\\111.bmp",#102030,1.0,0,图片X坐标,图片Y坐标)
</example> 
</function>


<!--16进制颜色值的字符串转10进制整型-->
<function name="颜色值转10进制">
<!--返回值:返回的是颜色值的十进制整型数据-->

<!--参数:16进制颜色值-->
<pram>(16进制颜色值)</pram>
<example>
函数原型:|图像.颜色值转10进制(16进制颜色值)|
函数说明:|16进制颜色值的字符串转10进制整型|
调用列子:|图像值=图像.颜色值转10进制("BBEEFF")
</example>
</function>


<!--16进制颜色值得到R G B值的-->
<function name="颜色值转RGB值">
<!--返回值:把16进制的颜色值转换为RGB值,分别以R值的十进制值,G值的十进制值,B值的十进制值进行返回。-->

<!--参数:16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值-->
<pram>(16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值)</pram>
<example>
函数原型:|图像.颜色值转RGB值(16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值)|
函数说明:|把16进制的颜色值转换为RGB值|
调用列子:|
变量 R,G,B
转换=图像.颜色值转RGB值(#BBEEFF,R,G,B)
</example>
</function>

<!--根据R G B的值获取16进制颜色值-->
<function name="RGB值转颜色值">
<!--返回值:返回的是颜色值的十六进制字符型数据-->

<!--参数:R值的十进制值,G值的十进制值,B值的十进制值-->
<pram>(R值的十进制值,G值的十进制值,B值的十进制值)</pram>
<example>
函数原型:|图像.RGB值转颜色值(R值的十进制值,G值的十进制值,B值的十进制值)|
函数说明:|根据R G B的值获取16进制颜色值,返回的是颜色值的十六进制字符型数据|
调用列子:|颜色值=图像.RGB值转颜色值(50,100,150)
</example>
</function>

<!--找多点颜色值-->
<function name="多点找色">
<!--返回值:返回真或者是假-->

<!--参数:参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,第一点色,偏移点组,相似度,检索方式,返回找到的x坐标,y坐标-->
<pram>(left,top,right,buttom,第一点色,偏移点组,相似度,检索方式,x,y)</pram>
<example>
函数原型:|图像.多点找色(left,top,right,buttom,第一点色,偏移点组,相似度,检索方式,x,y)|
函数说明:|多点找色,先得到第一个颜色的坐标,之后根据偏移点组的数据判断各个点的颜色,如果条件全部符合,返回第一个颜色的坐标|
调用列子:|详情请看帮助文档
</example>
</function>

</namespace>
  

<!--进程命名空间(中文)-->
<namespace name="进程">

<!--打开进程-->
<function name="打开">
<!--返回值:返回进程的句柄-->

<!--参数:进程路径-->
<pram>(路径,类型=0)</pram>
<example>
函数原型:|进程.打开(路径,类型=0)|
函数说明:|打开一个进程,0为普通模式,1为超级模式,成功返回进程句柄,失败返回0|
调用例子:|进程句柄=进程.打开("d:\\MF\\wow.exe")
</example>
</function>

<!--读进程:读取BYTE数值 -->
<function name="读byte">
<!--返回值:执行成功返回的数据,否则返回0-->

<!--参数:进程句柄 进程句柄,内存地址 要读的数据的内存地址-->
<pram>(进程句柄,内存地址)</pram>
<example>
函数原型:|进程.读byte(进程句柄,进程的内存地址)|
函数说明:|读取进程中一个内存地址的一个8位整型数|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
数据=进程.读byte(进程句柄,#4FC000)
</example>
</function>

<!--读进程:读取16位数值()针对2个字节整形-->
<function name="读2byte">
<!--返回值:执行成功返回读到的数据,否则返回0-->

<!--参数:进程句柄 要读取内容的进程句柄,进程内存地址 要读取的内存地址-->
<pram>(进程句柄,内存地址)</pram>
<example>
函数原型:|进程.读2byte(进程句柄,内存地址)|
函数说明:|读取进程中一个内存地址的一个16位整型数(2字节)|
调用例子:|
变量 进程句柄,短整形数
进程句柄=进程.打开("D:\\MF\\Wow.exe")
短整形数=进程.读2byte(进程句柄,#4FC000)
</example>
</function>

<!--读进程:读取32位整形数值 整型-->
<function name="读4byte">
<!--返回值:执行成功返回读到的数据,否则返回0-->

<!--参数:进程句柄 要读取内容的进程句柄,内存地址 要读取的内存地址-->
<pram>(进程句柄,内存地址)</pram>
<example>
函数原型:|进程.读4byte(进程句柄,内存地址)|
函数说明:|读取进程中一个内存地址的一个32位整型数(4字节)|
调用例子:|
变量 进程句柄,整形数据
进程句柄=进程.打开("D:\\MF\\Wow.exe")
整形数据=进程.读4byte(进程句柄,#4FC000)
</example>
</function>


<!--读进程:根据地址读取指定长度的字符串,用于ASCII编码的进程,count表示字符串的长度-->
<function name="读string">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:进程句柄,内存地址,字符个数-->
<pram>(进程句柄,内存地址,字符个数,类型=0)</pram>
<example>
函数原型:|进程.读string(进程句柄,内存地址,字符个数,类型=0)|
函数说明:|根据地址读取一个进程指定长度的ascii字符串,类型0为ascii码,1为unicode编码|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
读取内容=进程.读string(进程句柄,#4FC000,7)
</example>
</function>


<!--读进程:读取64位浮点值浮点型-->
<function name="读double">
<!--返回值:执行成功返回读取到的数据,否则返回0-->

<!--参数:进程句柄 要读取的内存的进程句柄,内存地址 要读的内存地址-->
<pram>(进程句柄,内存地址)</pram>
<example>
函数原型:|进程.读double(进程句柄,内存地址)|
函数说明:|读取进程的指定的内存地址的浮点型数值|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
浮点数据=进程.读double(进程句柄,#4FC000)
</example>
</function>


<!--读进程:读取32位浮点数值 float-->
<function name="读float">
<!--返回值:执行成功返回读取到的数据,否则返回0-->

<!--参数:进程句柄 要读取的内存的进程句柄,内存地址 要读的内存地址-->
<pram>(进程句柄,内存地址)</pram>
<example>
函数原型:|进程.读float(进程句柄,内存地址)|
函数说明:|读进程的指定的内存地址的float型数值存放到doulbe变量中|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
浮点数据=进程.读float(进程句柄,#4FC000)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="找byte">
<!--返回值:返回找到第一个匹配byte值的数据地址,否则返回0-->

<!--参数:进程句柄 要查找数据的进程句柄,数值,起始地址,结束地址-->
<pram>(进程句柄,数值,起始地址,结束地址)</pram>
<example>
函数原型:|进程.找byte(进程句柄,数值,起始地址,结束地址)|
函数说明:|搜索指定8位整型值并返回第一次找到该值的地址|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
地址=进程.找byte(进程句柄,5,#4FC000,#7fffffff)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="找2byte">
<!--返回值:返回找到第一个匹配内存里面的2个字节的整型值的数据地址,否则返回0-->

<!--参数:进程句柄 要查找数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(进程句柄,数值,起始地址,结束地址)</pram>
<example>
函数原型:|进程.2byte(进程句柄,数值,起始地址,结束地址)|
函数说明:|搜索指定16位整型值并返回第一次找到该值的地址|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
地址=进程.找2byte(进程句柄,5,#4FC000,#7fffffff)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="找4byte">
<!--返回值:返回找到第一个匹配整型整形值的数据地址,否则返回0-->

<!--参数:进程句柄 要查找数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(进程句柄,数据,起始地址,结束地址)</pram>
<example>
函数原型:|进程.找4byte(进程句柄,数据,起始地址,结束地址)|
函数说明:|搜索指定32位整型值并返回第一次找到该值的地址|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
地址=进程.找4byte(进程句柄,1234,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址(针对的是ansi码)-->
<function name="找string">
<!--返回值:返回找到第一个匹配ascii类型的字符型字符串数据地址,否则返回0-->

<!--参数:进程句柄, 寻找的字符串,起始地址,结束地址-->
<pram>(进程句柄,寻找的字符串,起始地址,结束地址,类型=0)</pram>
<example>
函数原型:|进程.找string(进程句柄,寻找的字符串,起始地址,结束地址,类型=0)|
函数说明:|搜索指定ascii型字符串值并返回第一次找到该值的地址,类型0为ascii码,1为unicode编码|
调用例子:|
进程句柄=进程.打开("D:\\MF\\wow.exe")
地址=进程.找string(进程句柄,"login",#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="找double">
<!--返回值:返回找到第一个匹配数据地址的浮点型值,否则返回0-->

<!--参数:进程句柄 要查找的数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(进程句柄,数值,起始地址,结束地址)</pram>
<example>
函数原型:|进程.找double(进程句柄,数值,起始地址,结束地址)|
函数说明:|搜索指定浮点型型值并返回第一次找到该值的地址|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
地址=进程.找double(进程句柄,8.15,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="找float">
<!--返回值:返回找到第一个匹配数据地址的float值,否则返回0-->

<!--参数:进程句柄 要查找的数据的进程句柄, 数值,起始地址,结束地址-->
<pram>(进程句柄,数值,起始地址,结束地址)</pram>
<example>
函数原型:|进程.找float(进程句柄,数值,起始地址,结束地址)|
函数说明:|搜索指定float型值并返回第一次找到该值的地址|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
地址=进程.找float(进程句柄,8.15,#4FC000,#7fffffff)
</example>
</function>



<!--等待窗口初始化完成--> 
<function name="等待初始化">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:进程句柄,最常等待秒-->
<pram>(进程句柄,最常等待秒)</pram>
<example>
函数原型:|进程.窗口初始化(整型进程句柄,最常等待秒)
如果time 为-1,则是为无限等待|
函数说明:|等待窗口初始化完成|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
进程.等待初始化(进程句柄,10000)
</example>
</function>

<!--通过窗口名获取进程的句柄--> 
<function name="获取进程句柄">
<!--返回值:执行成功返回进程句柄,否则返回0-->

<!--参数:应用进程的窗口名-->
<pram>(窗口名)</pram>
<example>
函数原型:|进程.获取进程句柄(窗口名)|
函数说明:|通过窗口名获取进程的句柄|
调用例子:|进程句柄=进程.获取进程句柄("大话西游")
</example>
</function>

<!--通过进程句柄关闭指定进程--> 
<function name="关闭进程">
<!--返回值:指定进程成功关闭返回为真,否则返回为假-->

<!--参数:进程句柄-->
<pram>(进程句柄)</pram>
<example>
函数原型:|进程.关闭进程(进程句柄)|
函数说明:|通过进程句柄关闭指定进程|
调用例子:|
进程句柄=进程.获取进程句柄("大话西游")
是否关闭=进程.关闭进程(进程句柄)
</example>
</function>

<!--搜索字节数组并返回该值地址-->
<function name="找字节数组">
<!--返回值:返回找到第一个匹配整型整形值的数据地址,否则返回0-->

<!--参数:进程句柄 要查找数据的进程句柄, 字节数组,起始地址,结束地址-->
<pram>(进程句柄,字节数组,起始地址,结束地址)</pram>
<example>
函数原型:|进程.找字节数组(进程句柄,字节数组,起始地址,结束地址)|
函数说明:|搜索指定字节数组数据并返回第一次找到该值的地址|
调用例子:|
进程句柄=进程.打开("D:\\MF\\Wow.exe")
地址=进程.找字节数组(进程句柄,"10 F0 A0 04",#4FC000,#7fffffff)
</example>
</function>

<!--扩展打开进程-->
<function name="扩展打开">
<!--返回值:返回进程的句柄-->

<!--参数:进程路径-->
<pram>(路径,参数)</pram>
<example>
函数原型:|进程.扩展打开(路径,参数)|
函数说明:|打开一个进程,如不需使用第二参数,第二参数可为空字符|
调用例子:|进程句柄=进程.扩展打开("rc:B.exe","我是参数")
</example>
</function>

<!--获取进程参数-->
<function name="获取参数">
<!--返回值:返回进程的句柄-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|进程.获取参数()|
函数说明:|获取进程.扩展打开()打开进程传入的参数(必须在被打开进程中调用,才能正确获取)|
调用例子:|参数值=进程.获取参数()
</example>
</function>

<!--获取窗口句柄-->
<function name="获取窗口句柄">
<!--返回值:返回进程的句柄-->

<!--参数:无-->
<pram>(handle,type=0)</pram>
<example>
函数原型:|进程.获取窗口句柄(handle,type=0)|
函数说明:|通过进程相关信息获取窗口句柄,type：0 通过进程句柄,1 通过进程PID|
调用例子:|
handle=进程.打开("d:\\MF\\wow.exe")
进程.等待初始化(hanlde,1000)
hwnd=进程.获取窗口句柄(handle)
</example>
</function>

</namespace>



<!--辅助命名空间-(中文)-->
<namespace name="辅助">

<!--等待-->
<function name="等待">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:毫秒 窗口延时多少毫秒-->
<pram>(毫秒)</pram>
<example>
函数原型:|辅助.等待(毫秒)|
函数说明:|程序延时多少毫秒再执行|
调用例子:|辅助.等待(5000)
</example>
</function>


<!--消息对话框-->
<function name="消息框">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:内容 对话框的内容-->
<pram>(内容,标题="TC")</pram>
<example>
函数原型:|辅助.消息框(内容,标题="TC")|
函数说明:|弹出消息对话框|
调用例子:|辅助.消息框("这是消息框")
</example>
</function>


<!--写入剪切板-->
<function name="写入剪切板">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:内容 剪切板的内容-->
<pram>(内容)</pram>
<!--举列:辅助.写入剪切板("aaa")-->
<example>
函数原型:|辅助.写入剪切板(内容)|
函数说明:|把内容写入剪切板|
调用例子:|
辅助.写入剪切板("aaa")
内容=辅助.读取剪切板()
辅助.消息框(内容)
</example>
</function>


<!--读取剪切板内容-->
<function name="读取剪切板">
<!--返回值:返回剪切板的内容-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|辅助.读取剪切板()|
函数说明:|读取剪切板,并返回读取到的字符串|
调用例子:|
辅助.写入剪切板("aaa")
内容=辅助.读取剪切板()
辅助.消息框(内容)
</example>
</function>


<!--播放mp3音乐-->
<function name="播放">
<!--返回值:设备句柄-->

<!--参数: 路径 mp3音乐路径-->
<pram>(路径)</pram>
<example>
函数原型:|辅助.播放(路径)|
函数说明:|播放音乐,该函数由线程方法实现,所以不能再写入线程调用|
调用例子:|
ID = 辅助.播放("d:\\测试歌曲.mp3")
辅助.等待(15000)
辅助.停止播放(ID)
</example>
</function>

<!--停止播放mp3音乐-->
<function name="停止播放">
<!--返回值:设备句柄-->

<!--参数: 路径 mp3音乐路径-->
<pram>(ID)</pram>
<example>
函数原型:|辅助.停止播放(ID)|
函数说明:|停止播放音乐|
调用例子:|
ID = 辅助.播放("d:\\测试歌曲.mp3")
辅助.等待(15000)
辅助.停止播放(ID)
</example>
</function>


<!-- 当前窗口截图 --> 
<function name="截图">
<!-- 返回值:截图成功返回真,否则返回假--> 
 
<!-- 参数:x左上角,y右上角,右下角x坐标,右下角y坐标--> 
<pram>(左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,存放路径)</pram> 
<!-- 举列:辅助.窗口截图(10,10,200,300,"c://aa.bmp")--> 
<example>
函数原型:|辅助.截图(左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,路径)|
函数说明:|指定区域截图|
调用例子:|辅助.截图(10,10,200,300,"c:\\aa.bmp")
</example>
</function>


<!--确认对话框-->
<function name="对话框">
<!--返回值:0:终止, 1:取消, 2:继续, 3:忽略, 4:否, 5:确定, 6:重试, 7:是-->

<!--参数:内容 确认对话框的内容-->
<pram>(内容,标题,类型,置顶)</pram>
<example>
函数原型:|辅助.对话框(内容,标题,类型,置顶)|
函数说明:|弹出对话框,对话框类型:0:确定,1:确定--取消,2:是--否,3:是--否--取消,4:重试--取消,5:取消--重试--继续, 6:终止--重试--忽略 返回值:0:终止,1:取消,2:继续,3:忽略,4:否,5:确定,6:重试,7:是|
调用例子:|结果=辅助.对话框("这是确认对话框","我是标题",3,true)
</example>
</function>


<!-- 在写配置文件的信息--> 
<function name="写配置">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:属性名 配置文件的属性名,属性字段 配置文件属性字段 设置字段内容 设置配置文件属性字段的内容,文件路径 配置文件路径--> 
<pram>(属性名,属性字段,设置字段内容,文件路径)</pram> 
<example>
函数原型:|辅助.写配置(配置文件的属性名,配置文件属性字段,设置配置文件字段的内容,配置文件路径)|
函数说明:|写配置文件的信息|
调用例子:|辅助.写配置("RealmName","East","serverGerman","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!-- 在读配置文件的信息--> 
<function name="读配置">
<!-- 返回值:执行成功返回读出的数据,否则返回空 --> 
 
<!-- 参数:属性名 配置文件的属性名,字段 配置文件属性字段,配置文件路径--> 
<pram>(属性名,字段,配置文件路径)</pram> 
<example>
函数原型:| 辅助.读配置(属性名,字段,文件路径)|
函数说明:|读配置文件的信息,成功返回非空字符串,失败返回长度等于0的空字符串|
调用例子:|辅助.读配置("RealmName","East","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!--随机函数-->
<function name="随机数">
<!--返回值:返回随机的整形-->

<!--参数:范围-->
<pram>(开始,结束)</pram>
<example>
函数原型:|辅助.随机数(开始,结束)|
函数说明:|得到并返回一个指定范围内随机函数|
调用例子:|自定义数字=辅助.随机数(10,30)
</example>
</function>

<!--获取资源路径--> 
<function name="获取资源路径">
<!--返回值:执行成功返回当前路径,否则返回空-->

<!--参数:空-->
<pram>(资源路径)</pram>
<example>
函数原型:|辅助.获取资源路径(资源路径)|
函数说明:|获取rc:(资源)路径的真实全路径,支持多路径,用竖线隔开|
调用例子:|
路径=辅助.获取资源路径("rc:1.bmp")
辅助.消息框(路径)
</example>
</function>

<!--执行CMD命令--> 
<function name="命令">
<!-- 返回值:执行CMD命令成功返回真--> 
 
<!-- 参数:命令,是否隐藏--> 
<pram>(命令, 是否隐藏)</pram> 
<example>
函数原型:|辅助.命令(命令,是否隐藏)|
函数说明:|执行CMD命令,第一个参数是命令,第二个命名是指是否隐藏窗口|
调用例子:|是否成功=辅助.命令("www.tyuyan.com",false)
</example>
</function>

<!--退出自身进程--> 
<function name="退出">
<!-- 返回值:退出成功返回真--> 
 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|辅助.退出()|
函数说明:|退出自身进程|
调用例子:|辅助.退出()
</example>

</function>
<!--蜂鸣器--> 
<function name="蜂鸣">
<!-- 返回值:退出成功返回真--> 
 
<!-- 参数:频率--> 
<pram>(频率,时长)</pram> 
<example>
函数原型:|辅助.蜂鸣(频率,时长)|
函数说明:|控制蜂鸣器发音|
调用例子:|辅助.蜂鸣(1000,1000)
</example>
</function>

<!--判断插件是否注册--> 
<function name="是否注册">
<!-- 返回值:注册成功返回真--> 
 
<!-- 参数:插件接口名--> 
<pram>(插件接口)</pram> 
<example>
函数原型:|辅助.是否注册(插件接口)|
函数说明:|通过插件接口,判断插件是否注册|
调用例子:|
是否成功=辅助.是否注册("dm.dmsoft")
如果(是否成功)
辅助.消息框("插件已注册")
如果结束
</example>
</function>


<!--注册插件--> 
<function name="注册插件">
<!-- 返回值:注册成功返回真--> 
 
<!-- 参数:插件接口名--> 
<pram>(路径,类型)</pram> 
<example>
函数原型:|辅助.注册插件(路径,类型)|
函数说明:|注册或卸载插件,第二参数为 真 注册插件,为 假 卸载插件|
调用例子:|
是否成功=辅助.注册插件("c:\\dm.dll",真)
如果(是否成功)
辅助.消息框("插件注册成功")
如果结束
</example>
</function>

<!--最小化到托盘--> 
<function name="设置托盘">
<!--返回值:成功返回true,失败返回false-->

<!--参数:名称-->
<pram>(托盘名称,最小化状态=真)</pram>
<example>
函数原型:|辅助.设置托盘(托盘名称,最小化状态=真)|
函数说明:|设置程序托盘化(任务栏右下角创建程序小图标),为真托盘化后不隐藏程序窗口,为假托盘化后隐藏程序窗口|
调用例子:|辅助.设置托盘("我的托盘",假)
</example>
</function>

</namespace>


<!--网络(中文)-->
<namespace name="网络">

<!--向页面提交内容-->
<function name="url提交内容">
<!--返回值:提交是否成功-->

<!--参数:提交的web地址-->
<pram>(提交的web地址-)</pram>
<example>
函数原型:|网络.url提交内容(提交的web地址)|
函数说明:|向页面提交内容|
调用列子:|网络.url提交内容("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--提交一个页面并读一个页面的内容-->
<function name="url读内容">
<!--返回值:读到的页面内容-->

<!--参数:读取的web地址-->
<pram>(读取的web地址,编码类型=0)</pram>
<example>
函数原型:|网络.url读内容(读取的web地址,编码类型=0)|
函数说明:|读取页面的内容,编码类型: 0: 使用UTF-8转换 1: 使用UTF-7转换 2: 符号字符集 3: 当前线程ANSI代码页 4: Macintosh代码页 5: OEM代码页 6: ANSI字符集|
调用列子:|
web内容=网络.url读内容("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--初始化--> 
<function name="初始化">
<!--返回值:真或假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|网络.初始化()|
函数说明:|初始化网络环境,使用网络编程函数前需要先用该函数初始化|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--关闭初始化--> 
<function name="关闭">
<!--返回值:真或假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|网络.关闭()|
函数说明:|网络程序结束后释放网络资源,关闭初始化|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--创建套接字--> 
<function name="套接字">
<!--返回值:整型值-->

<!--参数:模式-->
<pram>(类型)</pram>
<example>
函数原型:|网络.套接字(类型)|
函数说明:|创建套接字,返回套接字句柄 1:创建流式套接字(TCP) 2:数据报套接字(UDP)|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--关闭套接字--> 
<function name="关闭套接字">
<!--返回值:真或假-->

<!--参数:套接字句柄-->
<pram>(套接字句柄)</pram>
<example>
函数原型:|网络.关闭套接字(套接字句柄)|
函数说明:|网络程序结束后,关闭套接字,释放资源|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--绑定--> 
<function name="绑定">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(套接字句柄,端口)</pram>
<example>
函数原型:|网络.绑定(套接字句柄,端口)|
函数说明:|绑定套接字,并开启指定端口|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--监听--> 
<function name="监听">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(套接字句柄,连接个数)</pram>
<example>
函数原型:|网络.监听(套接字句柄,连接个数)|
函数说明:|监听套接字,指定可同时连接数|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--接受--> 
<function name="接受">
<!--返回值:新的套接字句柄-->

<!--参数:套接字句柄,端口-->
<pram>(套接字句柄,返回IP)</pram>
<example>
函数原型:|网络.接受(套接字句柄,返回IP)|
函数说明:|接受一个客户端的连接,返回一个新的套接字句柄,第二参数返回该客户端的ip地址|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--发送--> 
<function name="发送">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(套接字句柄,发送内容)</pram>
<example>
函数原型:|网络.发送(套接字句柄,发送内容)|
函数说明:|向一个绑定的套接字发送字符串,成功返回非0值,失败返回0|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--接收--> 
<function name="接收">
<!--返回值:接收串-->

<!--参数:套接字句柄,端口-->
<pram>(套接字句柄,接收缓存)</pram>
<example>
函数原型:|网络.接收(套接字句柄,接收缓存)|
函数说明:|接收一个绑定套接字发送过来的数据,成功返回非0值,失败返回0|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
网络.监听(服务器套接字句柄,5) //监听套接字,设置可连接数为5个
变量 返回IP,发送缓存="客户端,你好,我是服务器",接收缓存
客户端套接字句柄=网络.接受(服务器套接字句柄,返回IP)//这里程序会挂起等待,直到有客户端连接到来
网络.发送(客户端套接字句柄,发送缓存)//向指定客户端发送一串字符串
网络.接收(客户端套接字句柄,接收缓存) //接收从客户端发送的字串
辅助.消息框(接收缓存) //打印从客户端接收的字串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--连接--> 
<function name="连接">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(套接字句柄,服务器IP,服务器端口)</pram>
<example>
函数原型:|网络.连接(套接字句柄,服务器IP,服务器端口)|
函数说明:|客户端向服务器发送一个连接(服务器接受连接后即可与服务器通讯),如果没有连接该函数将会等待,直到有连接过来为止|
调用例子:|
网络.初始化() //初始化网络环境
客户端套接字句柄=网络.套接字(1) //创建流式(TCP)套接字
网络.连接(客户端套接字句柄,"127.0.0.1",9999) //这里测试所以连接的是本机
变量 发送缓存="服务器,你好,我是客户端",接收缓存
网络.接收(客户端套接字句柄,接收缓存) //接收从服务器发送的字串
辅助.消息框(接收缓存) //打印从服务器接收的字串
网络.发送(客户端套接字句柄,发送缓存)//向指定服务器发送一串字符串
网络.关闭套接字(客户端套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--接收来自--> 
<function name="接收来自">
<!--返回值:接收串-->

<!--参数:套接字句柄,地址,端口-->
<pram>(套接字句柄,接收缓存,接收长度,返回IP,返回端口)</pram>
<example>
函数原型:|网络.接收来自(套接字句柄,接收缓存,接收长度,返回IP,返回端口)|
函数说明:|接收指定地址发送过来的数据(一般用于UDP通讯),成功返回非0值,失败返回0|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(2) //创建数据报(UDP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
变量 rPort
变量 接收缓存,rIP,发送缓存="你好收到我的消息了没"
网络.发送到(服务器套接字句柄,发送缓存,"127.0.0.1",9999) //向指定地址端发送一串字符串
网络.接收来自(服务器套接字句柄,接收缓存,100,rIP,rPort) //接收数据
辅助.消息框(接收缓存) //打印从指定地址接收的字串
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--发送到--> 
<function name="发送到">
<!--返回值:真或假-->

<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(套接字句柄,发送缓存,ip,端口)</pram>
<example>
函数原型:|网络.发送到(套接字句柄,发送缓存,ip,端口)|
函数说明:|发送字符串到指定地址(一般用于UDP通讯),成功返回非0值,失败返回0|
调用例子:|
网络.初始化() //初始化网络环境
服务器套接字句柄=网络.套接字(2) //创建数据报(UDP)套接字
网络.绑定(服务器套接字句柄,9999) //开启了计算机的9999端口,供外界连接
变量 rPort
变量 接收缓存,rIP,发送缓存="你好收到我的消息了没"
网络.发送到(服务器套接字句柄,发送缓存,"127.0.0.1",9999) //向指定地址端发送一串字符串
网络.接收来自(服务器套接字句柄,接收缓存,100,rIP,rPort) //接收数据
辅助.消息框(接收缓存) //打印从指定地址接收的字串
网络.关闭套接字(服务器套接字句柄) //关闭套接字释放资源
网络.关闭() //关闭网络环境释放资源
</example>
</function>

<!--域名解析--> 
<function name="域名解析">
<!--返回值:ip地址-->

<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(IDN)</pram>
<example>
函数原型:|网络.域名解析(IDN)|
函数说明:|域名解析,传入域名,返回IP地址|
调用例子:|r_ip=网络.域名解析("www.tyuyan.com")
</example>
</function>
 <!--发送文件-->
  <function name="发送文件">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    
    <!--参数:套接字句柄,端口-->
    <pram>(套接字句柄,发送文件名)</pram>
    <example>
      函数原型:|网络.发送文件(套接字句柄,发送文件名)|
      函数说明:|发送指定目录下的文件到网络,返回值类型:0 成功,-1 套接字错误,-2 发送文件路径错误,-3 网络异常|
      调用例子:|
      网络.初始化() //初始化网络环境
      套接字句柄=网络.套接字(1) //创建流式(TPC)套接字
      网络.连接(套接字句柄,"127.0.0.1",9999) //这里测试所以连接的是本机
      sendret=网络.发送文件(套接字句柄,"E:\\1.bmp") //发送文件
      如果(0!=sendret)
      辅助.消息框("发送文件失败")
      如果结束
      网络.关闭套接字(套接字句柄) //关闭套接字释放资源
      网络.关闭() //关闭网络环境释放资源
    </example>
  </function>

  <!--接收文件-->
  <function name="接收文件">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    
    <!--参数:套接字句柄,端口-->
    <pram>(套接字句柄,保存文件名)</pram>
    <example>
      函数原型:|网络.接收文件(套接字句柄,保存文件名)|
      函数说明:|接收网络文件,并保存带指定目录下的文件返回值类型:0 成功,-1 套接字错误,-2 文件路径错误,-3 网络异常|
      调用例子:|
      网络.初始化() //初始化网络环境
      套接字句柄=网络.套接字(1) //创建流式(TPC)套接字
      网络.绑定(套接字句柄,9999) //开启了计算机的9999端口,供外界连接
      网络.监听(套接字句柄,5) //监听套接字,设置可连接数为5个
      变量 rIP
      新套接字句柄=网络.接受(套接字句柄,rIP)//这里程序会挂起等待,直到有客户端连接到来
      rRcv=网络.接收文件(新套接字句柄,"E:\\2.bmp") //接收从客户端发送文件并保存到E盘下2.bmp
      如果(0!=rRcv)
      辅助.消息框("接收文件失败")
      如果结束
      网络.关闭套接字(新套接字句柄) //关闭套接字释放资源
      网络.关闭套接字(套接字句柄) //关闭套接字释放资源
      网络.关闭() //关闭网络环境释放资源
    </example>
  </function>

<!--获取错误信息--> 
<function name="获取错误信息">
<!--返回值:错误值-->

<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>()</pram>
<example>
函数原型:|网络.获取错误信息()|
函数说明:|获得最近一次失败操作的错误情况,错误值详情见帮助文档,|
调用例子:|错误值= 网络.获取错误信息()
</example>
</function>

<!--拨号--> 
<function name="拨号">
<!--返回值:错误值-->

<!--参数:宽带连接名,账号,密码-->
<pram>(宽带连接名,账号,密码)</pram>
<example>
函数原型:|网络.拨号(宽带连接名,账号,密码)|
函数说明:|调用本地宽带连接进行拨号,拨号成功返回0|
调用例子:|
错误值= 网络.拨号("ADSL","123","123")//连接名,账号,密码根据实际情况填写
辅助.等待(15000)
网络.断开("ADSL")//等待15秒后断开连接
</example>
</function>

<!--断开--> 
<function name="断开">
<!--返回值:错误值-->

<!--参数:无-->
<pram>(宽带连接名)</pram>
<example>
函数原型:|网络.断开(宽带连接名)|
函数说明:|断开宽带连接|
调用例子:|
错误值= 网络.拨号("ADSL","123","123")//连接名,账号,密码根据实际情况填写
辅助.等待(15000)
网络.断开("ADSL")//等待15秒后断开连接
</example>
</function>

<!--是否连接--> 
<function name="是否连接">
<!--返回值:错误值-->

<!--参数:无-->
<pram>(宽带连接名)</pram>
<example>
函数原型:|网络.是否连接(宽带连接名)|
函数说明:|判断某个宽带连接是否处于连接状态,返回真表示连接,假表示未连接|
调用例子:|
如果(网络.是否连接("ADSL")==假) //如果未连接则连接
错误值= 网络.拨号("ADSL","123","123")//连接名,账号,密码根据实际情况填写
辅助.等待(15000)
网络.断开("ADSL")//等待15秒后断开连接
如果结束
</example>
</function>

</namespace>




<!--系统空间(中文)-->
<namespace name="系统">
	
<!--得到当前系统时间-->
<function name="时间">
<!--返回值:返回系统时间-->

<!--参数:无-->
<pram>(模式)</pram>
<example>
函数原型:|系统.时间(模式)|
函数说明:|根据模式的不同,返回不同格式的系统时间字符串,更多见帮助文档|
调用列子:|当前时间=系统.时间(1)
</example>
</function>


<!--得到当前屏幕分辩率的高度-->
<function name="获得分辨率">
<!--返回值:显示分辨率高度-->

<!--参数:无-->
<pram>(宽,高)</pram>
<example>
函数原型:|系统.获得分辨率(宽,高)|
函数说明:|获得系统分辨率|
调用列子:|
变量 宽,高
系统.获得分辨率(宽,高)
</example>
</function>


<!--得到当前系统的版本信息-->
<function name="版本">
<!--返回值:版本信息-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|系统.版本()|
函数说明:|获得并返回系统版本信息字符串,更多见帮助文档|
调用列子:|版本内容=系统.版本()
</example>
</function>


<!--获取当前进程的全路径--> 
<function name="获取程序路径">
<!--返回值:执行成功返回进程路径,否则返回0-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|系统.获取程序路径()|
函数说明:|获取并返回当前进程程序的全路径|
调用例子:|路径=系统.获取程序路径()
</example>
</function>


<!--获取操作系统启动到现在所经过的毫秒数--> 
<function name="获取毫秒">
<!-- 返回值:操作系统启动到现在所经过的毫秒数--> 
 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|系统.获取毫秒()|
函数说明:|获取并返回操作系统启动到现在所经过的毫秒数|
调用例子:|time=系统.获取毫秒()
</example>
</function>


<!--设置当前屏幕的分辩率-->
<function name="设置分辨率">
<!--返回值:返回true为修改分辨率成功,false为修改分辨率失败-->

<!--参数:无-->
<pram>(分辨率宽度,分辨率高度)</pram>
<example>
函数原型:|系统.设置分辨率(分辨率宽度 ,分辨率高度)|
函数说明:|设置当前屏幕的分辩率|
调用列子:|系统.设置分辨率(1024,768)
</example>
</function>

<!--获取当前路径--> 
<function name="获取当前路径">
<!--返回值:执行成功返回当前路径,否则返回0-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|系统.获取当前路径()|
函数说明:|获取并返回当前路径|
调用例子:|路径=系统.获取当前路径()
</example>
</function>

<!--设置当前路径--> 
<function name="设置路径">
<!--返回值:成功或者失败-->

<!--参数:路径-->
<pram>(路径)</pram>
<example>
函数原型:|系统.设置路径(路径)|
函数说明:|设置程序路径|
调用例子:|系统.设置路径("D:\\")
</example>
</function>

<!--获取系统特殊目录--> 
<function name="获取系统目录">
<!--返回值:执行成功返回当前路径,否则返回0-->

<!--参数:空-->
<pram>(类型)</pram>
<example>
函数原型:|系统.获取系统目录(类型)|
函数说明:|获取系统特殊目录,有0~5六种模式获取6个不同路径,详情见帮助文档|
调用例子:|
路径=系统.获取系统目录(0)
辅助.消息框(路径)
</example>
</function>

<!--创建注册表项--> 
<function name="注册表创建项">
<!--返回值:真或假-->

<!--参数:模式-->
<pram>(路径,名称)</pram>
<example>
函数原型:|系统.注册表创建项(路径,名称)|
函数说明:|创建注册表项|
调用例子:|
是否成功=系统.注册表创建项("HKEY_CURRENT_USER\\Software","TC你好")
//在注册表HKEY_CURRENT_USER\Software 路径下创建项,项名称为TC你好
</example>
</function>


<!--创建或修改注册表键值--> 
<function name="注册表创建键值">
<!--返回值:真或假-->

<!--参数:模式-->
<pram>(路径,名称,键值,键值类型)</pram>
<example>
函数原型:|系统.注册表创建键值(路径,名称,键值,键值类型)|
函数说明:|创建,修改注册表键值,如果键值不存在则创建,存在则修改|
调用例子:|
是否成功=系统.注册表创建键值("HKEY_CURRENT_USER\\Software\\TC你好","TC很好","这里是键值的内容",0)
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下创建键值,键名为"TC很好",键值内容为"这里是键值的内容"
</example>
</function>

<!--获取注册表键名对应的键值,并返回--> 
<function name="注册表获取键值">
<!--返回值:键值-->

<!--参数:模式-->
<pram>(路径,名称)</pram>
<example>
函数原型:|系统.注册表获取键值(路径,名称)|
函数说明:|获取注册表键名对应的键值,并返回字符串内容|
调用例子:|
ret=系统.注册表获取键值("HKEY_CURRENT_USER\\Software\\TC你好","TC很好")
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下查找键名为"TC很好"的键值,并返回键值
辅助.消息框(ret)
</example>
</function>

<!--删除注册表项或键值--> 
<function name="注册表删除">
<!--返回值:真或假-->

<!--参数:模式-->
<pram>(路径,名称,类型)</pram>
<example>
函数原型:|系统.注册表删除(路径,名称,类型)|
函数说明:|删除注册表项或键值|
调用例子:|
是否成功=系统.注册表删除("HKEY_CURRENT_USER\\Software","TC你好",0)|
//在注册表HKEY_CURRENT_USER\Software 路径下删除项TC你好,模式0为删除项,1为删除键值
</example>
</function>

<!--枚举-->
<function name="枚举">
<!--返回值:返回枚举到的类型值-->

<!--参数:窗口名-->
<pram>(名称,类型)</pram>
<example>
函数原型:|系统.枚举(名称,类型)|
函数说明:|根据类型枚举需要的类型,返回枚举后的结果,未找到返回空字符,类型:0:窗口名枚举窗口句柄,1:类名枚举窗口句柄,2:进程名枚举进程句柄,3:父窗口句柄枚举子窗口句柄(参数1为空串"",将以桌面句柄为父窗口句柄)|
调用例子:|
返回值=系统.枚举("计算器",0)
辅助.消息框(返回值)
</example>
</function>

<!--定时关机-->
<function name="关机">
<!--返回值:返回离关机还差的时间(秒)-->

<!--参数:sec 具体的几秒后关机-->
<pram>(秒)</pram>
<!--举列:辅助.关机(60)-->
<example>
函数原型:|关机(秒)|
函数说明:|设定几秒后关机|
调用例子:|系统.关机(60)
</example>
</function>

</namespace>



<!-- 线程的支持函数--> 
<namespace name="线程">

<!-- 线程的开启函数--> 
<function name="开启">
 
<!--参数:线程启动函数-->
<pram>(线程启动函数,线程传参)</pram> 
<example>
函数原型:|线程.开启(线程启动函数,线程传参)|
函数说明:|线程的开启函数,并将第二参数作为参数传给被调用的函数,返回线程句柄|
调用列子:|
//先定义一个函数 线程方法
功能 线程方法(参数) //这里接收线程开启时传入的参数
辅助.消息框("这个是一个线程执行方法 "+ 参数)
返回 0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 开始_点击()
线程句柄=线程.开启("我的程序.线程方法","我是参数")
返回 真
功能结束
</example>
</function>


<!-- 线程的开启函数--> 
<function name="扩展开启">
 
<!--参数:线程启动函数-->
<pram>(线程启动函数,开启参数,线程销毁函数,销毁参数)</pram> 
<example>
函数原型:|线程.扩展开启(线程启动函数,开启参数,线程销毁函数,销毁参数)|
函数说明:|线程的扩展开启函数,返回线程句柄|
调用列子:|
//先定义一个函数 线程方法
功能 线程方法(参数) //这里接收线程开启时传入的参数
辅助.消息框("这个是一个线程执行方法 "+ 参数)
返回 0
功能结束
//先定义一个函数 销毁操作
功能 销毁操作(参数) //这里接收线程销毁时传入的参数
辅助.消息框("这里执行线程结束的时候要执行的销毁操作 "+ 参数)
返回 0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 开始_点击()
线程句柄=线程.扩展开启("我的程序.线程方法","我是参数A","我的程序.销毁操作","我是参数B")
返回 真
功能结束
</example>
</function>

<!-- 线程的关闭函数--> 
<function name="关闭">
 
<!--参数:线程句柄-->
<pram>(线程句柄,类型=0)</pram> 
<example>
函数原型:|线程.关闭(线程句柄,类型=0)|
函数说明:|关闭指定句柄的线程,类型：0 安全关闭,1 强制关闭,可能会引起崩溃,慎用,线程扩展开启的销毁函数也不会被调用|
调用列子:|
//先定义一个函数 线程方法
功能 线程方法()
辅助.消息框("这个是一个线程执行方法")
返回 0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 开始_点击()
线程句柄=线程.开启("我的程序.线程方法","")
辅助.等待(2000)
线程.关闭(线程句柄)
返回 真
功能结束
</example>
</function>

<!--单线程的等待-->
<function name="等待">
<!--返回值:返回执行状态的整形-->
 
<!--参数:线程句柄,等待秒数-->
<pram>(线程句柄,等待秒数)</pram> 
<example>
函数原型:|线程.等待(线程句柄,等待秒数)|
函数说明:|线程等待,第二参数小于等于-1 时为无限等待模式|
调用列子:|
//先定义一个函数 线程方法
功能  线程方法()
辅助.消息框("这里是一个线程的执行方法")
返回 0
功能结束|
//在这里调用线程方法函数并写入线程等待功能
功能 开始执行()
线程句柄=线程.开启("我的程序.线程方法","")
如果(线程句柄==0)
辅助.消息框("线程开启失败")
如果结束
辅助.等待(2000)
等待=线程.等待(线程句柄,10)
如果(等待==0)
辅助.消息框("等待成功")
如果结束
如果(等待==-1)
辅助.消息框("等待失败")
如果结束
返回  0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 开始_点击()
我的程序.开始执行()
返回 真
功能结束
</example>
</function>

<!--关闭句柄-->
<function name="关闭句柄">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(句柄)</pram>
<example>
函数原型:|线程.关闭句柄(句柄)|
函数说明:|通过句柄,关闭内核对象,释放资源|
调用例子:|
变量 句柄//一般定义成全局句柄
句柄=线程.创建事件(假,真,"新的事件")//设置事件为手动模式,初始时事件可用
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--线程暂停-->
<function name="暂停">
<!--返回值:函数执行成功,返回真-->
 
<!--参数:线程句柄-->
<pram>(线程句柄)</pram> 
<example>
函数原型:|线程.暂停(线程句柄)|
函数说明:|线程暂停,想关闭线程,需要先恢复线程,或者强制关闭|
调用列子:|
//先定义一个函数 线程方法
功能 线程方法()
辅助.消息框("这里是一个线程的执行方法")
返回  0
功能结束|
//在这里调用线程方法函数并写入线程暂停--恢复等功能
功能 开始执行()
线程句柄=线程.开启("我的程序.线程方法","")
如果(线程句柄==0)
辅助.消息框("线程开启失败")
否则
辅助.等待(2000)
是否成功2=线程.暂停(线程句柄)
如果(是否成功2)
辅助.消息框("线程暂停")
如果结束
辅助.等待(2000)
是否成功2=线程.恢复(线程句柄)
如果(是否成功2)
辅助.消息框("线程恢复")
如果结束
如果结束
返回  0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 开始_点击()
我的程序.开始执行()
返回 真
</example>
</function>

<!--线程恢复-->
<function name="恢复">
<!--返回值:函数执行成功,返回真-->
 
<!--参数: 线程句柄-->
<pram>( 线程句柄)</pram> 
<example>
函数原型:|线程.恢复(线程句柄)|
函数说明:|恢复暂停的线程|
调用列子:|
//先定义一个函数 线程方法
功能 线程方法()
辅助.消息框("这里是一个线程的执行方法")
返回  0
功能结束|
//在这里调用线程方法函数并写入线程暂停--恢复等功能
功能 开始执行()
线程句柄=线程.开启("我的程序.线程方法","")
如果(线程句柄==0)
辅助.消息框("线程开启失败")
否则
辅助.等待(2000)
是否成功2=线程.暂停(线程句柄)
如果(是否成功2)
辅助.消息框("线程暂停")
如果结束
辅助.等待(2000)
是否成功2=线程.恢复(线程句柄)
如果(是否成功2)
辅助.消息框("线程恢复")
如果结束
如果结束
返回  0
功能结束|
//在开始_点击函数中调用开始执行函数
功能 开始_点击()
我的程序.开始执行()
返回 真
</example>
</function>

<!--创建临界区对象-->
<function name="创建临界区">
<!--返回值:临界区对象句柄-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|线程.创建临界区()|
函数说明:|创建临界区对象,返回临界区对象句柄,0表示创建失败|
调用例子:|
对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>

<!--进入临界区-->
<function name="进入临界区">
<!--返回值:true-->

<!--参数:句柄-->
<pram>(对象句柄)</pram>
<example>
函数原型:|线程.进入临界区(对象句柄)|
函数说明:|进入临界区,使临界区处于占用状态,让其他想进入临界区的线程挂起等待,直到离开临界区其他线程才能进入|
调用例子:|
对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>

<!--离开临界区-->
<function name="离开临界区">
<!--返回值:true-->

<!--参数:句柄-->
<pram>(对象句柄)</pram>
<example>
函数原型:|线程.离开临界区(对象句柄)|
函数说明:|离开临界区,使临界区处于空闲状态,让等待线程进入临界区|
调用例子:|
对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>

<!--删除临界区对象-->
<function name="删除临界区">
<!--返回值:临界区对象句柄-->

<!--参数:句柄-->
<pram>(对象句柄)</pram>
<example>
函数原型:|线程.删除临界区(对象句柄)|
函数说明:|删除临界区对象|
调用例子:|
对象句柄=线程.创建临界区()
线程.进入临界区(对象句柄)
线程.离开临界区(对象句柄)
线程.删除临界区(对象句柄)
//详细使用方法参见帮助文档
</example>
</function>


<!--创建事件-->
<function name="创建事件">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(事件自动重置,事件初始状态,事件名="")</pram>
<example>
函数原型:|线程.创建事件(事件自动重置,事件初始状态,事件名="")|
函数说明:|创建并返回一个事件对象句柄,失败返回0|
调用例子:|
变量 句柄//一般定义成全局句柄
句柄=线程.创建事件(假,真,"新的事件")//设置事件为自动模式,初始时事件可用
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--设置事件-->
<function name="设置事件">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(句柄)</pram>
<example>
函数原型:|线程.设置事件(句柄)|
函数说明:|设置事件对象可用|
调用例子:|
变量 句柄//一般定义成全局句柄
句柄=线程.创建事件(假,真,"新的事件")//设置事件为自动模式,初始时事件可用
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--重置事件-->
<function name="重置事件">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(句柄)</pram>
<example>
函数原型:|线程.重置事件(句柄)|
函数说明:|设置事件对象不可用|
调用例子:|
变量 句柄//一般定义成全局句柄
句柄=线程.创建事件(真,真,"新的事件")//设置事件为手动模式,初始时事件可用
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.重置事件(句柄)//设置事件为不可用状态,其他在等待的线程将挂起等待
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--打开事件-->
<function name="打开事件">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(事件名)</pram>
<example>
函数原型:|线程.打开事件(事件名)|
函数说明:|通过事件名打开事件,事件须存在,可以跨进程打开别的进程中创建的事件,失败返回0|
调用例子:|
变量 句柄//一般定义成全局句柄 程序A中定义
句柄=线程.创建事件(假,真,"新的事件")//设置事件为自动模式,初始时事件可用

变量 打开句柄 //程序B中定义 打开程序A中定义的事件
打开句柄=线程.打开事件("新的事件")
线程.等待(句柄,-1)//无限等待这个事件,进入后事件状态为占用
线程.设置事件(句柄)//事件处理完成,设置事件为可用状态
线程.关闭句柄(句柄)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--获得当前句柄-->
<function name="获得当前句柄">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>()</pram>
<example>
函数原型:|线程.获得当前句柄()|
函数说明:|获得并返回当前线程句柄|
调用例子:|句柄=线程.获得当前句柄()
</example>
</function>

</namespace>



<!--数学命名空间(中文)-->
<namespace name="数学">
<!--开方-->
<function name="开方">
<!--返回值:开方的结果-->

<!--参数:需要开方的数-->
<pram>(开方数)</pram>
<example>
函数原型:|数学.开方(开方数)|
函数说明:|求开方,返回数值结果|
调用例子:|开方数=数学.开方(9.0)
</example>
</function>

<!--求整型绝对值-->
<function name="绝对值">
<!--返回值:绝对值的结果-->

<!--参数:需要求绝对值的数-->
<pram>(原数)</pram>
<example>
函数原型:|数学.绝对值(原数)|
函数说明:|求绝对值,返回数值结果|
调用例子:|dword=数学.绝对值(-1)
</example>
</function>


<!--求正弦值-->
<function name="正弦值">
<!--返回值:正弦值的结果-->

<!--参数:需要求角度数的正弦值-->
<pram>(角度数)</pram>
<example>
函数原型:|数学.正弦值(角度数)|
函数说明:|求正弦值,返回数值结果|
调用例子:|dword=数学.正弦值(55.5)
</example>
</function>

<!--求余弦值-->
<function name="余弦值">
<!--返回值:余弦值的结果-->

<!--参数:需要求角度数的余弦值-->
<pram>(角度数)</pram>
<example>
函数原型:|数学.余弦值(角度数)|
函数说明:|求余弦值,返回数值结果|
调用例子:|dword=数学.余弦值(55.5)
</example>
</function>


<!--求正切值-->
<function name="正切值">
<!--返回值:正切值的结果-->

<!--参数:需要求角度数的正切值-->
<pram>(角度数)</pram>
<example>
函数原型:|数学.正切值(角度数)|
函数说明:|求正切值,返回数值结果|
调用例子:|dword=数学.正切值(55.5)
</example>
</function>

<!--求反正弦值-->
<function name="反正弦值">
<!--返回值:反正弦值的结果-->

<!--参数:需要求角度数的反正弦值-->
<pram>(角度数)</pram>
<example>
函数原型:|数学.反正弦值(角度数)|
函数说明:|求反正弦值,返回数值结果|
调用例子:|dword=数学.反正弦值(0.5)
</example>
</function>

<!--求反余弦值-->
<function name="反余弦值">
<!--返回值:反余弦值的结果-->

<!--参数:需要求角度数的反余弦值-->
<pram>(角度数)</pram>
<example>
函数原型:|数学.反余弦值(角度数)|
函数说明:|求反余弦值,返回数值结果|
调用例子:|dword=数学.反余弦值(0.5)
</example>
</function>


<!--求反正切值-->
<function name="反正切值">
<!--返回值:正切值的结果-->

<!--参数:需要求角度数的反正切值-->
<pram>(角度数)</pram>
<example>
函数原型:|数学.反正切值(角度数)|
函数说明:|求反正切值,返回数值结果|
调用例子:|dword=数学.反正切值(0.5)
</example>
</function>

<!--求浮点型绝对值-->
<function name="浮点绝对值">
<!--返回值:绝对值的结果-->

<!--参数:需要求绝对值的数-->
<pram>(原数)</pram>
<example>
函数原型:|数学.浮点绝对值(原数)|
函数说明:|求浮点型绝对值,返回数值结果|
调用例子:|dword=数学.浮点绝对值(-1.0)
</example>
</function>

</namespace>



<!--超级鼠标空间(中文)-->
<namespace name="超级鼠标">

<!--超级鼠标移动坐标-->
<function name="移动">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:x 鼠标绝对坐标X,y 鼠标绝对坐标Y-->
<pram>(x坐标,y坐标)</pram>
<example>
函数原型:|超级鼠标.移动(x坐标,y坐标)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|超级鼠标.移动(100,200)
</example>
</function>


<!--鼠标左键按下-->
<function name="左键按下">
<!--返回值:函数执行成功,返回真-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|超级鼠标.左键按下()|
函数说明:|左键按下|
调用例子:|超级鼠标.左键按下()
</example>
</function>


<!--鼠标右键按下-->
<function name="右键按下">
<!--返回值:函数执行成功,返回真-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|超级鼠标.右键按下()|
函数说明:|右键按下|
调用例子:|超级鼠标.右键按下()
</example>
</function>


<!--鼠标中间键按下-->
<function name="中键按下">
<!--返回值:函数执行成功,返回真-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|超级鼠标.中键按下()|
函数说明:|中键按下|
调用例子:|超级鼠标.中键按下()
</example>
</function>


<!--鼠标左键弹起-->
<function name="左键弹起">
<!--返回值:函数执行成功,返回真-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|超级鼠标.左键弹起()|
函数说明:|左键弹起|
调用例子:|超级鼠标.左键弹起()
</example>
</function>


<!--鼠标右键弹起-->
<function name="右键弹起">
<!--返回值:函数执行成功,返回真-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|超级鼠标.右键弹起()|
函数说明:|右键弹起|
调用例子:|超级鼠标.右键弹起()
</example>
</function>


<!--鼠标中间键弹起-->
<function name="中键弹起">
<!--返回值:函数执行成功,返回真-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|超级鼠标.中键弹起()|
函数说明:|中键弹起|
调用例子:|超级鼠标.中键弹起()
</example>
</function>


<!--超级鼠标左键单击-->
<function name="左键单击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:单击次数 鼠标左键单击的次数-->
<pram>(单击次数=1)</pram>
<example>
函数原型:|超级鼠标.左键单击(单击次数=1)|
函数说明:|鼠标左键单击|
调用例子:|超级鼠标.左键单击(10)
</example>
</function>

<!--超级鼠标右键单击-->
<function name="右键单击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:单击次数 鼠标右键单击次数-->
<pram>(单击次数=1)</pram>
<example>
函数原型:|超级鼠标.右键单击(单击次数=1)|
函数说明:|鼠标右键单击|
调用例子:|超级鼠标.右键单击(10)
</example>
</function>


<!--超级鼠标中键单击-->
<function name="中键单击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:单击次数 鼠标单击次数-->
<pram>(单击次数=1)</pram>
<example>
函数原型:|超级鼠标.中键单击(单击次数=1)|
函数说明:|鼠标中键单击|
调用例子:|超级鼠标.中键单击(10)
</example>
</function>

<!--超级鼠标左键双击-->
<function name="左键双击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:双击次数 鼠标左键双击的次数-->
<pram>(双击次数=1)</pram>
<example>
函数原型:|超级鼠标.左键双击(双击次数=1)|
函数说明:|鼠标左键双击|
调用例子:|超级鼠标.左键双击(10)
</example>
</function>

<!--超级鼠标右键双击-->
<function name="右键双击">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:双击次数 鼠标右键双击的次数-->
<pram>(双击次数=1)</pram>
<example>
函数原型:|超级鼠标.右键双击(双击次数=1)|
函数说明:|鼠标右键双击|
调用例子:|超级鼠标.右键双击(10)
</example>
</function>

<!--鼠标移动相对坐标-->
<function name="相对移动">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:x 鼠标相对坐标X,y 鼠标相对坐标Y-->
<pram>(x相对坐标,y相对坐标)</pram>
<example>
函数原型:|超级鼠标.相对移动(x坐标,y坐标)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|超级鼠标.相对移动(100,200)
</example>
</function>

</namespace>



<!--超级键盘空间(中文)-->
<namespace name="超级键盘">
<!--键盘按下-->
<function name="按下">
<!--返回值:函数执行成功,返回真-->

<!--参数:要模拟按下的键码（注：如是模拟按键的键位是字母,请输入字母的大小）-->
<pram>(要模拟按下的键码)</pram>
<example>
函数原型:|超级键盘.按下(要模拟按下的键码)|
函数说明:|以超级模式模拟按键,按下|
调用例子:|超级键盘.按下(32)
</example>
</function>

<!--键盘弹起-->
<function name="弹起">
<!--返回值:函数执行成功,返回真-->

<!--参数: 要模拟键盘弹起的键码（注：如是模拟按键的键位是字母,请输入字母的大小）-->
<pram>(要模拟键盘弹起的键码)</pram>
<example>
函数原型:|超级键盘.弹起(要模拟键盘弹起的键码)|
函数说明:|以超级模式模拟按键,弹起|
调用例子:|超级键盘.弹起(32)
</example>
</function>

<!--键盘:按键-->
<function name="按键">
<!--返回值:函数执行成功,返回真-->

<!--参数:键码, 按键的次数-->
<pram>(键码,按键的次数=1)</pram>
<example>
函数原型:|超级键盘.按键(键码,按键的次数=1)|
函数说明:|以超级模式模拟按键,按键|
调用例子:|超级键盘.按键(65,10)
</example>
</function>

<!--模拟字符串-->
<function name="发送字符串">
<!--返回值:函数执行成功,返回真-->

<!--参数: 要模拟键盘输入的字符串-->
<pram>(要模拟键盘输入的字符串,发送延时=50)</pram>
<example>
函数原型:|超级键盘.发送字符串(要模拟键盘输入的字符串,发送延时=50)|
函数说明:|以超级模式模拟按键,发送字符串|
调用例子:|超级键盘.发送字符串("abcd")
</example>
</function>

</namespace>


<!--会员(中文)-->
<namespace name="会员">
	
<!--验证注册码-->
<function name="验证注册码">
<!--返回值:大于0,表示返回这个注册码的剩余小时时间。返回值小于0,是相应的错误信息。-->

<!--参数:用户名 注册码-->
<pram>(注册码账号,注册码,项目名,返回信息)</pram>
<example>
函数原型:|会员.验证注册码(注册码账号,注册码,项目名,返回信息)|
函数说明:|验证注册码的有效期,并返回一个整型值,该值大于0表示注册码有效期(单位小时),小于0为错误信息,错误信息详情见帮助文档|
调用例子:|
变量 返回信息
会员.验证注册码("注册码账号","VVWR4ZXYVI820YK7UTN7LFS082","自动任务",返回信息)
//注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
辅助.消息框(返回信息)
</example>
</function>

<!--解绑注册码-->
<function name="解绑注册码">
<!--返回值:真 或 假-->

<!--参数:用户名 注册码-->
<pram>(注册码账号,注册码)</pram>
<example>
函数原型:|会员.解绑注册码(注册码账号,注册码)|
函数说明:|解绑已经绑定的注册码,成功返回真,失败返回假|
调用例子:|会员.解绑注册码("注册码账号","VVWR4ZXYVI820YK7UTN7LFS082")
//注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
</example>
</function>

<!--邮件--> 
<function name="邮件">
<!--返回值:真或假-->

<!--参数:(发件人邮箱,收件人邮箱,标题,内容-->
<pram>(发件人邮箱,收件人邮箱,标题,内容)</pram>
<example>
函数原型:|会员.邮件(发件人邮箱,收件人邮箱,标题,内容)|
函数说明:|发送邮件,成功返回真,失败返回假|
调用例子:|会员.邮件("test1@tc.com","test2@tc.com","测试","这是一封测试邮件")
</example>
</function>

<!--数据库--> 
<function name="数据库">
<!--返回值:错误代码-->

<!--参数:(连接字串,SQL语句,模式,查询项,返回二维数组-->
<pram>(连接字串,SQL语句,返回影响行数,返回的表,返回错误信息)</pram>
<example>
函数原型:|会员.数据库(连接字串,SQL语句,返回影响行数,返回的表,返回错误信息)|
函数说明:|连接数据库,执行一条SQL语句,支持ACCESS,MSSQL,MYSQL,返回的表参数是一个二维数组数据变量|
调用例子:|
连接字串="Driver=SQL SERVER;Server=127.0.0.1,1731;Database=mymssql;UID=sa;PWD="  //登陆语句,不同类型数据库略有不同,请根据自己数据库实际情况填写
SQL语句="SELECT  name, old, id ,data FROM mymssql.dbo.users"  //sql语句 每种数据库略有不同
变量 返回错误信息,返回的表,返回影响行数
会员.数据库(连接字串,SQL语句,返回影响行数,返回的表,返回错误信息)
</example>
</function>

</namespace>


<!--数组(中文)-->
<namespace name="数组空间">
<!--获取数组的维数-->
<function name="维数">
<!--返回值:返回数组的维数-->

<!--参数:array-->
<pram>(array)</pram>
<example>
函数原型:|数组空间.维数(array)|
函数说明:|获取并返回数组的维数|
调用例子:|
arrays=数组[5]
dim = 数组空间.维数(arrays)
</example>
</function>

<!--获取数组的每个维数的最大数据个数-->
<function name="大小">
<!--返回值:数组的每个维数的最大数据个数-->

<!--参数:数组,len1,len2,len3,len4,len5,len6,len7,len8-->
<pram>(array,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)</pram>
<example>
函数原型:|数组空间.大小(array,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)|
函数说明:|获取并返回数组的每个维数的最大数据个数,最多支持8维数组|
调用例子:|
arrays=数组[5]
var len1,len2
boolr=数组空间.大小(arrays,len1,len2)
</example>
</function>

<!--接2个相同维数的数组,之后返回一个新的数组-->
<function name="连接">
<!--返回值:返回一个新的数组-->

<!--参数:array1,array2-->
<pram>(array1,array2)</pram>
<example>
函数原型:|数组空间.连接(array1,array2)|
函数说明:|接2个相同维数的数组,之后返回一个新的数组(最大支持2维数组)|
调用例子:|
arrays=数组[2]
arrays[0]="aa"
arrays[1]="bb"
arrays1=数组[1]
arrays1[0]="cc"
arrays2 = 数组空间.连接(arrays,arrays1)
</example>
</function>

<!--对数组按照指定模式进行排序-->
<function name="排序">
<!--返回值:返回是否排序成功-->

<!--参数:array1-->
<pram>(array1,type=0)</pram>
<example>
函数原型:|数组空间.排序(array1,type=0)|
函数说明:|对数组按照指定模式进行排序,返回是否排序成功;type 0:ansci码从小到大排序 1:ansci码从大到小排序 2:按数字从小到大排序 3:按数字从大到小排序 4:倒序|
调用例子:|
arrays=数组[2]
arrays[0]="aa"
arrays[1]="bb"
数组空间.排序(arrays)
</example>
</function>

<!--匹配数组中的内容,组成一个新的数组-->
<function name="过滤">
<!--返回值:返回值为一维数组-->

<!--参数:array1,filterstr,type=0-->
<pram>(array1,filterstr,type=0)</pram>
<example>
函数原型:|数组空间.过滤(array1,filterstr,type=0)|
函数说明:|通过指定字符串,返回数组中所有匹配的内容,返回值为一维数组;type 0:模糊匹配 1:精确匹配|
调用例子:|
arrays=数组[2]
arrays[0]="aa"
arrays[1]="bb"
array1 = 数组空间.过滤(arrays,"a")
</example>
</function>

<!--在数组的头部或者尾部添加内容-->
<function name="增加">
<!--返回值:返回值成功或失败-->

<!--参数:array1,data,type=0-->
<pram>(array,data,type=0)</pram>
<example>
  函数原型:|数组空间.增加(array,data,type=0)|
  函数说明:|在数组的头部或者尾部添加内容(暂时仅支持1维);type  0:在头部加入  1:在尾部加入,成功返回真,失败返回假|
  调用例子:|
  arrays=数组[2]
  arrays[0]="aa"
  arrays[1]="bb"
  数组空间.增加(arrays,"cc")
</example>
</function>

<!--在数组的头部或者尾部删除内容-->
<function name="删除">
<!--返回值:返回值成功或失败-->

<!--参数:array1,type=0-->
<pram>(array,type=0)</pram>
<example>
函数原型:|数组空间.删除(array,type=0)|
函数说明:|在数组的头部或者尾部删除内容(暂时仅支持1维);type 0:在头部加入 1:在尾部加入,成功返回真,失败返回假|
调用例子:|
arrays=数组[2]
arrays[0]="aa"
arrays[1]="bb"
数组空间.删除(arrays)
</example>
</function>

<!--在数组的指定位置插入一个内容-->
<function name="插入">
<!--返回值:返回值成功或失败-->

<!--参数:array,index,data-->
<pram>(array,index,data)</pram>
<example>
  函数原型:|数组空间.插入(array,index,data)|
  函数说明:|在数组的指定位置插入一个内容(暂时仅支持1维);index:要插入的位置 data:要插入的数据,成功返回真,失败返回假|
  调用例子:|
  arrays=数组[2]
  arrays[0]="aa"
  arrays[1]="bb"
  数组空间.插入(arrays,1,"fff")
</example>
</function>

<!--在数组的指定位置删除一个内容-->
<function name="删除指定项">
<!--返回值:返回值成功或失败-->

<!--参数:array,index-->
<pram>(array,index)</pram>
<example>
  函数原型:|数组空间.删除指定项(array,index)|
  函数说明:|在数组的指定位置删除一个内容(暂时仅支持1维);index:要删除的位置,成功返回真,失败返回假|
  调用例子:|
  arrays=数组[2]
  arrays[0]="aa"
  arrays[1]="bb"
  数组空间.删除指定项(arrays,1)
</example>
</function>

<!--清空数组的数据-->
<function name="清空">
<!--返回值:返回值成功或失败-->

<!--参数:array-->
<pram>(array)</pram>
<example>
  函数原型:|数组空间.清空(array)|
  函数说明:|清空数组的数据,成功返回真,失败返回假|
  调用例子:|
  arrays=数组[2]
  arrays[0]="aa"
  arrays[1]="bb"
  数组空间.清空(arrays)
</example>
</function>

<!--在数组中查找指定内容-->
<function name="查找">
<!--返回值:返回数组的下标-->

<!--参数:arrary1,data-->
<pram>(arrary1,data)</pram>
<example>
  函数原型:|数组空间.查找(arrary1,data)|
  函数说明:|在数组中查找指定内容(暂时仅支持1维),返回数组的下标|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  aa=数组空间.查找(arrays,"aa")
</example>
</function>

<!--数组重定义-->
<function name="重定义">
<!--返回值:返回数组的下标-->

<!--参数:array,iscopy,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0-->
<pram>(array,iscopy,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)</pram>
<example>
  函数原型:|数组空间.重定义(array,iscopy,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)|
  函数说明:|重新定义数组的大小,并返回新的数组,iscopy为真改变数组大小且拷贝数据,为假只改变数组大小且不拷贝数据|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  aa=数组空间.重定义(arrays,false,8)
</example>
</function>

</namespace>


  <!--类型(中文)-->
<namespace name="类型">
    <!--将非逻辑型转换成逻辑型-->
    <function name="转逻辑型">
      <!--返回值:返回逻辑型-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|类型.转逻辑型(str)|
        函数说明:|将非逻辑型转换成逻辑型,失败返回null,成功则返回false或者true|
        调用例子:|
        help.messagebox(类型.转逻辑型("123"))
      </example>
    </function>

    <!--将非整转换成逻辑型-->
    <function name="转整型">
      <!--返回值:返回整型数值-->

      <!--参数:str-->
      <pram>(str,type=0)</pram>
      <example>
        函数原型:|类型.转整型(str,type=0)|
        函数说明:|将非整转换成逻辑型,失败返回null,成功则返回一个十进制整型数值,type:0表示参数1为十进制,1表示参数1为十六进制|
        调用例子:|
        help.messagebox(类型.转整型("123"))
      </example>
    </function>

    <!--将非浮点型转浮点型-->
    <function name="转浮点型">
      <!--返回值:返回浮点型数值-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|类型.转浮点型(str)|
        函数说明:|将非浮点型转浮点型,失败返回null,成功则返回一个浮点型数值|
        调用例子:|
        help.messagebox(类型.转浮点型("123.0001"))
      </example>
    </function>

    <!--将非字符串转字符型-->
    <function name="转字符型">
      <!--返回值:返回字符串-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|类型.转字符型(str)|
        函数说明:|将非字符串转字符型,失败返回null,成功则返回字符串|
        调用例子:|
        help.messagebox(类型.转字符型(123.010))
      </example>
    </function>


    <!--判断字符串是否为整型-->
    <function name="是否为整型">
      <!--返回值:返回整数-->

      <!--参数:str-->
      <pram>(str,type)</pram>
      <example>
        函数原型:|类型.是否为整型(str,type=0)|
        函数说明:|可以转整型返回true,否则返回false,type:0表示参数1为十进制,1表示参数1为十六进制|
        调用例子:|
        help.messagebox(类型.是否为整型("123123123123123123123))
      </example>
    </function>

    <!--判断字符串是否为浮点型-->
    <function name="是否为浮点型">
      <!--返回值:返回浮点数-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|类型.是否为浮点型(str)|
        函数说明:|可以转浮点型返回true,否则返回false|
        调用例子:|
        help.messagebox(类型.是否为浮点型("123.001))
      </example>
    </function>

    <!--判断变量是否为数组-->
    <function name="是否为数组">
      <!--返回值:返回值成功或失败-->

      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|类型.是否为数组(var)|
        函数说明:|是数组返回true,否则返回false|
        调用例子:|
        a=array[2]
        a[1]="ss"
        help.messagebox(类型.是否为数组(a),"数组")
      </example>
    </function>

    <!--获得变量类型-->
    <function name="获得类型">
      <!--返回值:返回值成功或失败-->

      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|类型.获得类型(var)|
        函数说明:|获得变量类型,返回TC现在所支持的类型：int、string、double、bool、com、array、null|
        调用例子:|
        a=array[2]
        a[1]="ss"
        help.messagebox(类型.获得类型(a))
      </example>
    </function>
    
 <!--获取数值整型部分-->
    <function name="取整">
      <!--返回值:返回整型部分值-->
      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|类型.取整(var)|
        函数说明:|获取小数点前面的数据,不四舍五入,返回值为整型值|
        调用例子:|
        help.messagebox(类型.取整(78.87))
      </example>
    </function>
    
            <!--判断变量是否为日期型-->
    <function name="是否为日期型">
      <!--返回值:返回值成功或失败-->

      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|类型.是否为日期型(var)|
        函数说明:|判断变量是否为日期型|
        调用例子:|
        t=datetime.now()
        help.messagebox(类型.是否为日期型(t),"是否为日期型")
      </example>
    </function>
    
  </namespace>


  <!--日期时间(中文)-->
  <namespace name="日期时间">
    <!--当前日期-->
    <function name="当前日期">
      <!--返回值:当时日期时间-->

      <!--参数:无-->
      <pram>()</pram>
      <example>
        函数原型:|日期时间.当前日期()|
        函数说明:|获取当前系统时间|
        调用例子:|
        help.messagebox(日期时间.当前日期())
      </example>
    </function>

    <!--指定日期-->
    <function name="指定日期">
      <!--返回值:返回日期-->

      <!--参数:str-->
      <pram>(type,value,time1)</pram>
      <example>
        函数原型:|日期时间.指定日期(type,value,time1)|
        函数说明:|获取已添加指定时间间隔的日期,type：y-年;m-月;d-日;h-时;n-分;s-秒(注:日期格式必须与示例写法一样)|
        调用例子:|
        help.messagebox(日期时间.指定日期("d",120,"2012/12/1"),"处理后的时间")
        help.messagebox(日期时间.指定日期("d",-99, "2012/12/1 11:20:30"),"处理后的时间")
      </example>
    </function>

    <!--日期间隔-->
    <function name="日期间隔">
      <!--返回值:返回整型天数-->

      <!--参数:str-->
      <pram>(type,time1,time2)</pram>
      <example>
        函数原型:|日期时间.日期间隔(type,time1,time2)|
        函数说明:|返回两个日期之间的时间间隔,type：y-年;m-月;d-日;h-时;n-分;s-秒;w-星期(注:日期格式必须与示例写法一样)|
        调用例子:|
        help.messagebox(日期时间.日期间隔("m", "2012/12/1", "2011/12/1"),"处理后的时间")
        help.messagebox(日期时间.日期间隔("h","2012/12/1 11:20:30","2012/12/3 11:20:30"),"处理后的时间")
      </example>
    </function>

    <!--返回日期的年-->
    <function name="年">
      <!--返回值:返回字符串-->

      <!--参数:time-->
      <pram>(time)</pram>
      <example>
        函数原型:|日期时间.年(time)|
        函数说明:|返回日期的年|
        调用例子:|
        at = 日期时间.当前日期()
        help.messagebox(日期时间.年(at),"年")
      </example>
    </function>

    <!--返回日期的月-->
    <function name="月">
      <!--返回值:返回日期的月-->

      <!--参数:time-->
      <pram>(time)</pram>
      <example>
        函数原型:|日期时间.月(time)|
        函数说明:|返回日期的月|
        调用例子:|
        at = 日期时间.当前日期()
        help.messagebox(日期时间.月(at),"月")
      </example>
    </function>

    <!--返回日期的日-->
    <function name="日">
      <!--返回值:返回日期的日-->

      <!--参数:time-->
      <pram>(time)</pram>
      <example>
        函数原型:|日期时间.日(time)|
        函数说明:|返回日期的日|
        调用例子:|
        at = 日期时间.当前日期()
        help.messagebox(日期时间.日(at),"日")
      </example>
    </function>

    <!--返回日期的时-->
    <function name="时">
      <!--返回值:返回日期的时-->

      <!--参数:time-->
      <pram>(time)</pram>
      <example>
        函数原型:|日期时间.时(time)|
        函数说明:|返回日期的时|
        调用例子:|
        at = 日期时间.当前日期()
        help.messagebox(日期时间.时(at),"时")
      </example>
    </function>

    <!--返回日期的分-->
    <function name="分">
      <!--返回值:返回日期的分-->

      <!--参数:time-->
      <pram>(time)</pram>
      <example>
        函数原型:|日期时间.分(time)|
        函数说明:|返回日期的分|
        调用例子:|
        at = 日期时间.当前日期()
        help.messagebox(日期时间.分(at),"分")
      </example>
    </function>

    <!--返回日期的秒-->
    <function name="秒">
      <!--返回值:返回日期的秒-->

      <!--参数:time-->
      <pram>(time)</pram>
      <example>
        函数原型:|日期时间.秒(time)|
        函数说明:|返回日期的秒|
        调用例子:|
        at = 日期时间.当前日期()
        help.messagebox(日期时间.秒(at),"秒")
      </example>
    </function>

    <!--返回日期的星期-->
    <function name="星期">
      <!--返回值:返回日期的星期几-->

      <!--参数:time-->
      <pram>(time)</pram>
      <example>
        函数原型:|日期时间.星期(time)|
        函数说明:|返回星期几,0~6 表示 周日~周六|
        调用例子:|
        at = 日期时间.当前日期()
        help.messagebox(日期时间.星期(at),"星期")
      </example>
    </function>

  </namespace>
  
  
</dll>

<dll name="控件列表" path="matchDll.dll">

<!--控件空间(中文)-->
<namespace name="标签">
<!--得到标签的文本-->
<function name="获得文本">
<!--返回值:得到标签的文本-->

<!--参数:名称 标签名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|标签.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回指定标签的文本|
调用例子:|标签.获得文本("标签0")
</example>
</function>

<!--设置标签的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 标签名称,内容 标签内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|标签.设置文本(名称,内容,父窗口名称="")|
函数说明:|设置指定标签的内容|
调用例子:|标签.设置文本("标签0","标签内容")
</example>
</function>

<!--设置颜色-->
<function name="设置颜色">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 标签名称,内容 标签内容-->
<pram>(名称,颜色值,类型=0,父窗口名称="")</pram>
<example>
函数原型:|标签.设置颜色(名称,颜色值,类型=0,父窗口名称="")|
函数说明:|设置标签颜色,模式0设置字体颜色,模式1设置背景颜色|
调用例子:|
标签.设置颜色("标签0",#ff00ff)//设置字体颜色
标签.设置颜色("标签0",#ff00ff,1)//设置背景颜色
</example>
</function>

</namespace>



<!--控件空间(中文)-->
<namespace name="编辑框">
<!--得到编辑框的文本-->
<function name="获得文本">
<!--返回值:得到编辑框的文本-->

<!--参数:名称 编辑框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|编辑框.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回指定编辑框的文本|
调用例子:|编辑框.获得文本("编辑框0")
</example>
</function>


<!--设置编辑框的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 编辑框名称,内容 标签内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|编辑框.设置文本(名称,内容,父窗口名称="")|
函数说明:|设置指定编辑框的内容|
调用例子:|编辑框.设置文本("编辑框0","内容")
</example>
</function>

</namespace>

<!--控件空间(中文)-->
<namespace name="单选框">
<!--得到单选框的文本-->
<function name="获得文本">
<!--返回值:得到单选框的文本-->

<!--参数:名称 标签名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|单选框.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回指定单选框的文本|
调用例子:|内容=单选框.获得文本("单选框0")
</example>
</function>

<!--得到单选框的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 单选框名称,内容 标签内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|单选框.设置文本(名称,内容,父窗口名称="")|
函数说明:|设置指定单选框的内容|
调用例子:|单选框.设置文本("单选框0","单选框内容")
</example>
</function>

<!--得到单选框的选中状态-->
<function name="获得状态">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 单选框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|单选框.获得状态(名称,父窗口名称="")|
函数说明:|得到指定单选框的选中状态,返回真表示选中,假表示未选中|
调用例子:|单选框.获得状态("单选框0")
</example>
</function>

<!--设置单选框的选中状态-->
<function name="选中">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 单选框名称,状态 是否选中-->
<pram>(名称,选中=true,父窗口名称="")</pram>
<example>
函数原型:|单选框.选中(名称,选中=true,父窗口名称="")|
函数说明:|设置指定单选框的选中状态,真表示选中,假表示未选中|
调用例子:|单选框.选中("单选框0",真)
</example>
</function>

</namespace>

<!--复选框 命名空间-->
<namespace name="复选框">
<!--得到复选框的文本-->
<function name="获得文本">
<!--返回值:得到复选框的文本-->

<!--参数:名称 标签名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|复选框.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回指定复选框的文本|
调用例子:|内容=复选框.获得文本("复选框0")
</example>
</function>
<!--得到复选框的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 复选框名称,内容 标签内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|复选框.设置文本(名称,内容,父窗口名称="")|
函数说明:|设置指定复选框的内容|
调用例子:|复选框.设置文本("复选框0","复选框内容")
</example>
</function>
<!--得到复选框的选中状态-->
<function name="获得状态">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 复选框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|复选框.获得状态(名称,父窗口名称="")|
函数说明:|得到指定复选框的状态,返回真表示选中,假表示未选中|
调用例子:|复选框.获得状态("复选框0")
</example>
</function>
<!--设置复选框的选中状态-->
<function name="选中">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 复选框名称,状态 是否选中-->
<pram>(名称,选中=true,父窗口名称="")</pram>
<example>
函数原型:|复选框.选中(名称,选中=true,父窗口名称="")|
函数说明:|设置指定复选框的选中状态,真表示选中,假表示未选中|
调用例子:|复选框.选中("复选框0",真)
</example>
</function>
</namespace>

<!--浏览框按钮 命名空间-->
<namespace name="浏览框">
<!--得到浏览框的文本-->
<function name="获得">
<!--返回值:得到浏览框的文本-->

<!--参数:名称 浏览框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|浏览框.获得(名称,父窗口名称="")|
函数说明:|获得并返回指定浏览框的文本|
调用例子:|内容=浏览框.获得("浏览框0")
</example>
</function>
<!--设置浏览框的内容-->
<function name="设置">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 浏览框名称,内容浏览框内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|浏览框.设置(名称,内容,父窗口名称="")|
函数说明:|设置指定浏览框的内容|
调用例子:|浏览框.设置("浏览框0","浏览框内容")
</example>
</function>
</namespace>

<!--下拉框 命名空间-->
<namespace name="下拉框">
<!--得到指定下拉框当前的选项-->
<function name="得到选项">
<!--返回值:选项的ID号-->

<!--参数:名称 下拉框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|下拉框.得到选项(名称,父窗口名称="")|
函数说明:|获得并返回选中下拉框的编号|
调用例子:|选项=下拉框.得到选项("下拉框0")
</example>
</function>
<!--设置指定下拉框当前的选项-->
<function name="设置选项">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(名称,选项,父窗口名称="")</pram>
<example>
函数原型:|下拉框.设置选项(名称,选项,父窗口名称="")|
函数说明:|设置指定下拉框当前显示内容为下拉列表中的第几项选项|
调用例子:|下拉框.设置选项("下拉框0",1)
</example>
</function>
<!--得到下拉框指定序号的内容-->
<function name="获得内容">
<!--返回值:得到下拉框指定序号的内容-->

<!--参数:名称 下拉框名称, 选项编号-->
<pram>(名称,选项编号,父窗口名称="")</pram>
<example>
函数原型:|下拉框.获得内容(名称,选项编号,父窗口名称="")|
函数说明:|得到并返回下拉框指定选项编号的内容|
调用例子:|内容=下拉框.获得内容("下拉框0",1)
</example>
</function>

<!--得到下拉框选项的个数-->
<function name="得到个数">
<!--返回值:下拉框选项的长度-->

<!--参数:名称  下拉框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|下拉框.得到个数(名称,父窗口名称="")|
函数说明:|得到并返回下拉框的个数|
调用例子:|个数=下拉框.得到个数("下拉框0")
</example>
</function>

<!--清空下拉框的所有内容-->
<function name="清空">
<!--返回值:成功或者失败-->

<!--参数:名称  下拉框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|下拉框.清空(名称,父窗口名称="")|
函数说明:|清空下拉框的所有内容|
调用例子:|下拉框.清空("下拉框0")
</example>
</function>

<!--在下拉框最后项增加内容-->
<function name="增加文本">
<!--返回值:成功或者失败-->

<!--参数:名称  下拉框名称 内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|下拉框.增加文本(名称,内容,父窗口名称="")|
函数说明:|在下拉框最后项增加内容|
调用例子:|下拉框.增加文本("下拉框0","TC")
</example>
</function>

<!--删除下拉框指定位置的文本内容-->
<function name="删除文本">
<!--返回值:成功或者失败-->

<!--参数:名称  下拉框名称 位置 -->
<pram>(名称,位置,父窗口名称="")</pram>
<example>
函数原型:|下拉框.删除文本(名称,位置,父窗口名称="")|
函数说明:|删除下拉框指定位置的文本内容|
调用例子:|下拉框.删除文本("下拉框0",4)
</example>
</function>

<!--得到下拉框的文本内容-->
<function name="获得文本">
<!--返回值:得到列表框的文本内容-->

<!--参数:名称 列表框名称  序号-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|下拉框.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回下拉框当前显示的文本内容|
调用例子:|下拉框.获得文本("下拉框0")
</example>
</function>

</namespace>

<!--分组框控件空间(中文)-->
<namespace name="分组框">
<!--得到分组框的标题文本-->
<function name="获得文本">
<!--返回值:得到控件的标题文本-->

<!--参数:名称 分组框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|分组框.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回指定分组框的标题文本内容|
调用例子:|分组框.获得文本("分组框0")
</example>
</function>

<!--设置分组框的标题-->
<function name="设置文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 分组框名称,标题 分组框内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|分组框.设置文本(名称,内容,父窗口名称="")|
函数说明:|设置指定分组框的标题文本内容|
调用例子:|分组框.设置文本("分组框0","分组框标题")
</example>
</function>
</namespace>

<!--列表框控件空间(中文)-->
<namespace name="列表框">

<!--得到列表框的文本内容-->
<function name="获得文本">
<!--返回值:得到列表框的文本内容-->

<!--参数:名称 列表框名称  序号-->
<pram>(名称,序号,父窗口名称="")</pram>
<example>
函数原型:|列表框.获得文本(名称,序号,父窗口名称="")|
函数说明:|获得并返回指定列表框的文本内容|
调用例子:|列表框.获得文本("列表框0",1)
</example>
</function>


<!--追加列表框的文本内容-->
<function name="增加文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 列表框名称,内容 列表框内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|列表框.增加文本(名称,内容,父窗口名称="")|
函数说明:|在指定列表框末尾追加文本内容|
调用例子:|列表框.增加文本("列表框0","李四")
</example>
</function>


<!--得到列表框的选中文本-->
<function name="得到选中文本">
<!--返回值:得到列表框的选中文本-->

<!--参数:名称 列表框名称 -->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|列表框.得到选中文本(名称,父窗口名称="")|
函数说明:|得到并返回列表框的选中文本|
调用例子:|列表框.得到选中文本("列表框0")
</example>
</function>


<!--得到列表框选中内容的序号-->
<function name="得到选项">
<!--返回值:得到列表框选中内容的序号-->

<!--参数:名称 列表框名称 -->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|列表框.得到选项(名称,父窗口名称="")|
函数说明:|得到并返回列表框选中内容的序号|
调用例子:|序号=列表框.得到选项("列表框0")
</example>
</function>


<!--得到列表框的文本个数-->
<function name="得到个数">
<!--返回值:返回列表框中内容的个数-->

<!--参数:名称 列表框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|列表框.得到个数(名称,父窗口名称="")|
函数说明:|获得并返回指定列表框的中内容的个数|
调用例子:|列表框.得到个数("列表框0")
</example>
</function>


<!--清空列表框的所有内容-->
<function name="清空">
<!--返回值:成功或者失败-->

<!--参数:名称  列表框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|列表框.清空(名称,父窗口名称="")|
函数说明:|清空列表框的所有内容|
调用例子:|列表框.清空("列表框0")
</example>
</function>

<!--删除列表框的指定位置内容-->
<function name="删除文本">
<!--返回值:成功或者失败-->

<!--参数:名称  列表框名称 位置-->
<pram>(名称,位置,父窗口名称="")</pram>
<example>
函数原型:|列表框.删除文本(名称,位置,父窗口名称="")|
函数说明:|删除列表框的指定位置内容|
调用例子:|列表框.删除文本("列表框0",5)
</example>
</function>

<!--设置指定列表框当前的选项-->
<function name="设置选项">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(名称,选项,父窗口名称="")</pram>
<example>
函数原型:|列表框.设置选项(名称,选项,父窗口名称="")|
函数说明:|设置下拉框当前选中第几项|
调用例子:|列表框.设置选项("列表框0",1)
</example>
</function>

<!--插入文本-->
<function name="插入文本">
<!--返回值:成功或失败-->

<!--参数:控件名称,内容,序号-->
<pram>(名称,文本,序号,父窗口名称="")</pram>
<example>
函数原型:|列表框.插入文本(名称,文本,序号,父窗口名称="")|
函数说明:|指定序号插入文本|
调用例子:|列表框.插入文本("列表框0","TC简单开发",1)
</example>
</function>

</namespace>




<!--日期框控件空间(中文)-->
<namespace name="日期框">
<!--得到日期框的文本-->
<function name="获得文本">
<!--返回值:得到控件的文本-->

<!--参数:名称 日期框名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|日期框.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回指定日期框的日期文本内容|
调用例子:|日期框.获得文本("日期框0")
</example>
</function>

<!--设置日期框的内容-->
<function name="设置文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 日期框控件名称,标题 日期框内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|日期框.设置文本(名称,内容,父窗口名称="")|
函数说明:|设置指定日期框控件的文本内容|
调用例子:|日期框.设置文本("日期框0","2011-5-5")
</example>
</function>
</namespace>

<!--图片框控件空间(中文)-->
<namespace name="图片框">
<!--设置图片框控件的图片-->
<function name="设置图片">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 图片框控件名称,图片路径 -->
<pram>(名称,路径,父窗口名称="")</pram>
<example>
函数原型:|图片框.设置图片(名称,路径,父窗口名称="")|
函数说明:|设置指定图片框控件的图片|
调用例子:|图片框.设置图片("图片框0","D:\\test.bmp")
</example>
</function>
</namespace>

<!--进度条控件空间(中文)-->
<namespace name="进度条">
<!--得到进度条的进度-->
<function name="获得进度">
<!--返回值:得到进度条的进度-->

<!--参数:名称进度条名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|进度条.获得进度(名称,父窗口名称="")|
函数说明:|获得并返回指定进度条的进度|
调用例子:|进度条.获得进度("进度条0")
</example>
</function>

<!--设置进度条的进度-->
<function name="设置进度">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 进度条控件名称,进度-->
<pram>(名称,进度,父窗口名称="")</pram>
<example>
函数原型:|进度条.设置进度(名称,进度,父窗口名称="")|
函数说明:|设置指定进度条的进度|
调用例子:|进度条.设置进度("进度条0",10)
//进度的值不能小于0和大于99
</example>
</function>
</namespace>


<!--按钮空间(中文)-->
<namespace name="按钮">
<!--得到标签的文本-->
<function name="获得文本">
<!--返回值:得到按钮的文本-->

<!--参数:名称 标签名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|按钮.获得文本(名称,父窗口名称="")|
函数说明:|获得并返回指定按钮的文本|
调用例子:|按钮.获得文本("按钮0")
</example>
</function>

<!--设置按钮的文本-->
<function name="设置文本">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 按钮名称,内容 按钮内容-->
<pram>(名称,内容,父窗口名称="")</pram>
<example>
函数原型:|按钮.设置文本(名称,内容,父窗口名称="")|
函数说明:|设置指定按钮的内容|
调用例子:|按钮.设置文本("按钮0","按钮内容")
</example>
</function>

<!--设置按钮的背景图-->
<function name="设置背景图">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 按钮名称,内容 按钮内容-->
<pram>(名称,图片路径,图片状态=4,父窗口名称="")</pram>
<example>
函数原型:|按钮.设置背景图(名称,图片路径,图片状态=4,父窗口名称="")|
函数说明:|设置指定按钮的背景图片|
调用例子:|按钮.设置背景图("按钮0","rc:button.bmp")
</example>
</function>
</namespace>

<!--控件通用空间(中文)-->
<namespace name="控件">
<!--设置控件是否有效-->
<function name="有效">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(控件名称,真假,父窗口名称="")</pram>
<example>
函数原型:|控件.有效(控件名称,真假,父窗口名称="")|
函数说明:|设置指定控件是否有效,真为有效,假则为无效|
调用例子:|控件.有效("按钮0",真)
</example>
</function>

<!--设置控件是否可见-->
<function name="可见">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(控件名称,真假,父窗口名称="")</pram>
<example>
函数原型:|控件.可见(控件名称,真假,父窗口名称="")|
函数说明:|设置指定控件是否可见,真为可见,假则为不可见|
调用例子:|控件.可见("按钮0",真)
</example>
</function>

<!--设置控件位置-->

<function name="设置位置">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(控件名称,x,y,宽度,高度,类型,父窗口名称="")</pram>
<example>
函数原型:|控件.设置位置(控件名称,x,y,宽度,高度,类型,父窗口名称="")|
函数说明:|设置控件位置及大小,type:0:设置位置与大小,1:只设置位置(忽略大小参数),2:只设置大小(忽略位置参数)|
调用例子:|是否移动=控件.设置位置("按钮0",100,200,50,80,1)
</example>
</function>

<!--创建控件-->
<function name="创建">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(控件类型,控件ID,文本,x,y,宽度,高度,属性,事件, 父窗口句柄=0)</pram>
<example>
函数原型:|控件.创建(控件类型,控件ID,文本,x,y,宽度,高度,属性,事件, 父窗口句柄=0)|
函数说明:|动态创建控件,动态参数较多详细举例见帮助文档
调用例子:|是否成功=控件.创建("标签","标签999","我的控件",10,170,65,28,"背景颜色:14215660","点击:空间名.事件响应函数")
</example>
</function>


<!--打开窗口-->
<function name="打开窗口">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(窗口名称,是否可见=真)</pram>
<example>
函数原型:|控件.打开窗口(窗口名称,是否可见=真)|
函数说明:|打开指定窗口名的子窗口,一般用在TC多界面项目中,返回窗口句柄|
调用例子:|子界面句柄=控件.打开窗口("子界面")

</example>
</function>

<!--关闭窗口-->
<function name="关闭窗口">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(窗口名称,点击类型)</pram>
<example>
函数原型:|控件.关闭窗口(窗口名称,点击类型)|
函数说明:|关闭窗口,点击类型,模态窗口模式下才用得到:用户自定义的数值(系统保留 0 右上角关闭按钮 -1 已打开,-2 错误的ID,-3 主窗口不能模态创建)|
调用例子:|
//主界面
返回值=控件.模态窗口("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
如果(返回值==1)
//你要执行的操作
如果结束
如果(返回值==2)
//你要执行的操作
如果结束

//子界面
//按钮1
是否成功=控件.关闭窗口("子界面",1)//点击这个按钮会关闭窗口
//按钮2
是否成功=控件.关闭窗口("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--模态窗口-->
<function name="模态窗口">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(窗口名称)</pram>
<example>
函数原型:|控件.模态窗口(窗口名称)|
函数说明:|打开一个模态窗口,调用该函数后程序会挂起,直到它打开的窗口被关闭|
调用例子:|
//主界面
返回值=控件.模态窗口("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
如果(返回值==1)
//你要执行的操作
如果结束
如果(返回值==2)
//你要执行的操作
如果结束

//子界面
//按钮1
是否成功=控件.关闭窗口("子界面",1)//点击这个按钮会关闭窗口
//按钮2
是否成功=控件.关闭窗口("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--获得句柄-->
<function name="获得句柄">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(窗口名称,父窗口名称="")</pram>
<example>
函数原型:|控件.获得句柄(窗口名称,父窗口名称="")|
函数说明:|获得并返回控件句柄|
调用例子:|句柄=控件.获得句柄("标签0")
</example>
</function>

<!--销毁-->
<function name="销毁">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(窗口名称,父窗口名称="")</pram>
<example>
函数原型:|控件.销毁(窗口名称,父窗口名称="")|
函数说明:|销毁指定名称的控件|
调用例子:|控件.销毁("标签0")
</example>
</function>

<!--获得子界句柄-->
<function name="获得子界面句柄">
<!--返回值:成功或失败-->

<!--参数:名称 获得子界句柄-->
<pram>(子窗口名)</pram>
<example>
函数原型:|控件.获得子界面句柄(子窗口名)|
函数说明:|获取指定子窗口的句柄|
调用例子:|控件.获得子界面句柄("子窗口")
</example>
</function>

</namespace>

<!--选项卡空间(中文)-->
<namespace name="选项卡">
<!--激活指定的Tab控件-->
<function name="激活">
<!-- 返回值：成功或者失败-->

<!--参数：选项卡的名称,Tab序号-->
<pram>(名称,序号,父窗口名称="")</pram>
<example>
函数原型:|选项卡.激活(名称,序号,父窗口名称="")|
函数说明:|设置指定的选项卡哪个Tab页面被激活|
调用例子:|
//激活选项卡0的第2个tab页面
选项卡.激活("选项卡0",1)
</example>
</function>

<!--得到选项卡当前选中选项的索引-->
<function name="得到选项">
<!-- 返回值：成功或者失败-->

<!--参数：选项卡的名称,Tab序号-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|选项卡.得到选项(名称,父窗口名称="")|
函数说明:|得到并返回选项卡当前选中选项的索引|
调用例子:|
索引值=选项卡.得到选项("选项卡0")
辅助.消息框(索引值)
</example>
</function>

<!--得到选项卡当前分页框个数-->
<function name="得到个数">
<!-- 返回值：成功或者失败-->

<!--参数：选项卡的名称,Tab序号-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|选项卡.得到个数(名称,父窗口名称="")|
函数说明:|得到并返回选项卡当前分页框个数|
调用例子:|
个数=选项卡.得到个数("选项卡0")
辅助.消息框(个数)
</example>
</function>

<!--获得句柄-->
<function name="获得分页句柄">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(名称,索引,父窗口名称="")</pram>
<example>
函数原型:|选项卡.获得分页句柄(名称,索引,父窗口名称="")|
函数说明:|获得并返回选项卡分页句柄|
调用例子:|句柄=选项卡.获得分页句柄("选项卡0",0) //获得主窗口上"选项卡0"的第一个分页句柄
</example>
</function>

</namespace>

<!--定时器空间(中文)-->
<namespace name="定时器">
<!--注册一个定时器-->
<function name="注册">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 毫秒时间-->
<pram>(控件名称,毫秒,父窗口名称="")</pram>
<example>
函数原型:|定时器.注册(控件名称,毫秒,父窗口名称="")|
函数说明:|注册一个指定的定时器,每隔多少毫秒执行一次定时器的方法|
调用例子:|
//定时器1每隔1秒执行一次
定时器.注册("定时器0",1000)
</example>
</function>

<!--销毁定时器-->
<function name="销毁">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(控件名称,父窗口名称="")</pram>
<example>
函数原型:|定时器.销毁(控件名称,父窗口名称="")|
函数说明:|销毁一个指定的定时器|
调用例子:|定时器.销毁("定时器0")
</example>
</function>
</namespace>

<!--热键空间(中文)-->
<namespace name="热键">
<!--注册一个热键-->
<function name="注册">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 -->
<pram>(控件名称,父窗口名称="")</pram>
<example>
函数原型:|热键.注册(控件名称,父窗口名称="")|
函数说明:|注册一个指定的热键|
调用例子:|热键.注册("热键0")
</example>
</function>

<!--销毁热键-->
<function name="销毁">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(控件名称,父窗口名称="")</pram>
<example>
函数原型:|热键.销毁(控件名称,父窗口名称="")|
函数说明:|销毁一个指定的热键|
调用例子:|热键.销毁("热键0")
</example>
</function>

<!--获得热键-->
<function name="获得">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(控件名称,返回键码,返回热键,父窗口名称="")</pram>
<example>
函数原型:|热键.获得(控件名称,返回键码,返回功能键,父窗口名称="")|
函数说明:|获得指定热键当前生效的热键键值组合,键码包括(键盘上一些数字和字母或方向键的按键码),功能键包括(Shift,Ctrl,Alt)|
调用例子:|
变量 返回键码,返回功能键
是否成功1=热键.获得("热键0",返回键码,返回功能键)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用热键.设置
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用热键.设置 达到保存用户上次设置热键的效果
是否成功2=热键.设置("热键0",返回键码,返回功能键)
</example>
</function>

<!--设置热键-->
<function name="设置">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(控件名称,键码,热键,父窗口名称="")</pram>
<example>
函数原型:|热键.设置(控件名称,键码,功能键,父窗口名称="")|
函数说明:|设置热键启动的方式|
调用例子:|
变量 返回键码,返回功能键
是否成功1=热键.获得("热键0",返回键码,返回功能键)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用热键.设置
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用热键.设置 达到保存用户上次设置热键的效果
是否成功2=热键.设置("热键0",返回键码,返回功能键)
</example>
</function>

</namespace>

<!--滑块空间(中文)-->
<namespace name="滑块">
<!--设置滑块的位置-->
<function name="设置位置">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称  位置-->
<pram>(控件名称,位置,父窗口名称="")</pram>
<example>
函数原型:|滑块.设置位置(控件名称,位置,父窗口名称="")|
函数说明:|设置滑块的位置|
调用例子:|滑块.设置位置("滑块0",12)
</example>
</function>

<!--得到滑块的位置-->
<function name="得到位置">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 -->
<pram>(控件名称,父窗口名称="")</pram>
<example>
函数原型:|滑块.得到位置(控件名称,父窗口名称="")|
函数说明:|得到并返回滑块的位置|
调用例子:|位置=滑块.得到位置("滑块0")
</example>
</function>
</namespace>


<!-- 网页 -->
<namespace name="网页">

<!--打开网页-->
<function name="转到">
<!--返回值:真：成功 假：失败-->

<!--参数:id:  控件名称  url 网页链接-->
<pram>(id,url,父窗口名称="")</pram>
<example>
函数原型:|网页.转到(id,url,父窗口名称="")|
函数说明:|打开一个URL网页链接|
调用列子:|网页.转到("浏览器0","www.tyuyan.com")
</example>
</function>

<!-- 判断网页是否加载完成 -->
<function name="加载完成">
<!--返回值:真：成功 假：失败-->

<!--参数:id:  控件名称 -->
<pram>(id,父窗口名称="")</pram>
<example>
函数原型:|网页.加载完成(id,父窗口名称="")|
函数说明:|判断当前网页是否加载完成,返回真表示完成,假表示未完成|
调用列子:|网页.加载完成("浏览器0")
</example>
</function>

<!-- 获取当前页的标题 -->
<function name="得到标题">
<!--返回值:: 标题-->

<!--参数: id:  控件名称  -->
<pram>(id,父窗口名称="")</pram>
<example>
函数原型:|网页.得到标题(id,父窗口名称="")|
函数说明:|获取并返回当前页的标题|
调用列子:|标题 = 网页.得到标题("浏览器0")
</example>
</function>

<!-- 网页前进 -->
<function name="前进">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称 -->
<pram>(id,父窗口名称="")</pram>
<example>
函数原型:|网页.前进(id,父窗口名称="")|
函数说明:|当前标签页网页前进一步|
调用列子:|网页.前进("浏览器0")
</example>
</function>

<!-- 网页后退 -->
<function name="后退">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称 -->
<pram>(id,父窗口名称="")</pram>
<example>
函数原型:|网页.后退(id,父窗口名称="")|
函数说明:|当前标签页网页后退一步|
调用列子:|网页.后退("浏览器0")
</example>
</function>

<!-- 网页刷新 -->
<function name="刷新">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称 -->
<pram>(id,父窗口名称="")</pram>
<example>
函数原型:|网页.刷新(id,父窗口名称="")|
函数说明:|刷新当前的网页|
调用列子:|网页.刷新("浏览器0")
</example>
</function>

<!-- 鼠标移动消息 -->
<function name="移动">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称  x 窗口x坐标  y：窗口y坐标-->
<pram>(id,x,y,父窗口名称="")</pram>
<example>
函数原型:|网页.移动(id,x,y,父窗口名称="")|
函数说明:|向当前标签的网页发送一个鼠标移动到(x,y)坐标的消息|
调用列子:|网页.移动("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键按下 -->
<function name="左键按下">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称   x x坐标 y y坐标 -->
<pram>(id,x坐标,y坐标,父窗口名称="")</pram>
<example>
函数原型:|网页.左键按下(id,x坐标,y坐标,父窗口名称="")|
函数说明:|向当前网页发送一个鼠标左键按下消息|
调用列子:|网页.左键按下("浏览器0",10,20)
</example>
</function>

<!-- 鼠标左键弹起 -->
<function name="左键弹起">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称  x x坐标 y y坐标 -->
<pram>(id,x坐标,y坐标,父窗口名称="")</pram>
<example>
函数原型:|网页.左键弹起(id,x坐标,y坐标,父窗口名称="")|
函数说明:|向当前网页发送一个鼠标左键弹起消息|
调用列子:|网页.左键弹起("浏览器0",10,20)
</example>
</function>

<!-- 左键单击事件 -->
<function name="左键单击">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称 x x坐标 y y坐标  -->
<pram>(id,x坐标,y坐标,父窗口名称="")</pram>
<example>
函数原型:|网页.左键单击(id,x坐标,y坐标,父窗口名称="")|
函数说明:|向当前的网页发送一个左键单击消息|
调用列子:|网页.左键单击("浏览器0",10,20)
</example>
</function>

<!-- 鼠标左键双击 -->
<function name="左键双击">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称  x x坐标 y y坐标 -->
<pram>(id,x坐标,y坐标,父窗口名称="")</pram>
<example>
函数原型:|网页.左键双击(id,x坐标,y坐标,父窗口名称="")|
函数说明:|向当前网页发送一个鼠标左键双击消息|
调用列子:|网页.左键双击("浏览器0",10,20)
</example>
</function>

<!-- 键盘按下消息 -->
<function name="按下">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称  keycode 键码-->
<pram>(id,keycode,父窗口名称="")</pram>
<example>
函数原型:|网页.按下(id,keycode,父窗口名称="")|
函数说明:|向当前的网页发送一个键盘按下消息|
调用列子:|网页.按下("浏览器0",66)
</example>
</function>

<!-- 键盘弹起消息 -->
<function name="弹起">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称  keycode 键码-->
<pram>(id,keycode,父窗口名称="")</pram>
<example>
函数原型:|网页.弹起(id,keycode,父窗口名称="")|
函数说明:|向当前标签的网页发送一个键盘弹起消息|
调用列子:|网页.弹起("浏览器0",66)
</example>
</function>

<!-- 键盘按键消 -->
<function name="按键">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称  keycode 键码-->
<pram>(id,keycode,父窗口名称="")</pram>
<example>
函数原型:|网页.按键(id,keycode,父窗口名称="")|
函数说明:|向当前标签网页发送一个按键消息|
调用列子:|网页.按键("浏览器0",66)
</example>
</function>

<!--  发送文本内容 -->
<function name="发送字符串">
<!--返回值:逻辑型：true 成功  false 失败-->

<!--参数:id:  控件名称  key文本消息-->
<pram>(id,keystring,父窗口名称="")</pram>
<example>
函数原型:|网页.发送字符串(id,keystring,父窗口名称="")|
函数说明:|向当前标签网页发送字符串文本消息|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
网页.发送字符串("浏览器0","TC简单开发")
</example>
</function>

<!-- 获取网页元素指定属性的信息 -->
<function name="获取元素信息">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  type:网页元素属性类型 sub:网页元素特征字符串 -->
<pram>(id,type,sub,获取信息长度=1024,父窗口名称="")</pram>
<example>
函数原型:|网页.获取元素信息(id,type,sub,获取信息长度=1024,父窗口名称="")|
函数说明:|获取网页元素指定属性的信息,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 frame:框架 text:文本,多个特征用&amp;隔开|
调用列子:|
//详细介绍请查看帮助文档
网页.转到("浏览器0","www.tyuyan.com")
text=网页.获取元素信息("浏览器0","value","id:su")
辅助.消息框(text)
</example>
</function>

<!-- 点击网页中指定特征的按钮或链接 -->
<function name="点击元素">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  sub:网页元素特征字符串 -->
<pram>(id,sub,父窗口名称="")</pram>
<example>
函数原型:|网页.点击元素(id,sub,父窗口名称="")|
函数说明:|点击网页中指定特征的按钮或链接,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
网页.点击元素("浏览器0","id:su")
</example>
</function>

<!-- 向网页中指定特征的文本框输入内容 -->
<function name="输入元素文本">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  text:文本内容  sub:网页元素特征字符串 -->
<pram>(id,text,sub,父窗口名称="")</pram>
<example>
函数原型:|网页.输入元素文本(id,text,sub,父窗口名称="")|
函数说明:|向网页中指定特征的文本框输入内容,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
网页.输入元素文本("浏览器0","TC简单开发","id:kw")
网页.点击元素("浏览器0","id:su")
</example>
</function>

<!-- 选择网页中的下拉框 -->
<function name="选择元素">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  seltext:需要选中的下拉选项的值  sub:网页元素特征字符串 -->
<pram>(id,seltext,sub,父窗口名称="")</pram>
<example>
函数原型:|网页.选择元素(id,seltext,sub,父窗口名称="")|
函数说明:|选择网页中的下拉框,支持的特征有 id:标示符 name:名称 tag:标签 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|网页.选择元素("浏览器0","北京","id:省份")
</example>
</function>

<!-- 选择/清除网页中的单选框或复选框 -->
<function name="选中元素">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  ischeck:选中或不选中  sub:网页元素特征字符串 -->
<pram>(id,ischeck,sub,父窗口名称="")</pram>
<example>
函数原型:|网页.选中元素(id,ischeck,sub,父窗口名称="")|
函数说明:|选择/清除网页中的单选框或复选框,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|网页.选中元素("浏览器0",真,"id:tc")
</example>
</function>

<!-- 得到当前网页的地址 -->
<function name="得到链接">
<!--返回值:字符串类型 :网页的地址-->

<!-- 参数:id:  控件名称   -->
<pram>(id,父窗口名称="")</pram>
<example>
函数原型:|网页.得到链接(id,父窗口名称="")|
函数说明:|得到并返回当前网页的地址|
调用列子:|
url = 网页.得到链接("浏览器0")|
辅助.消息框(url)
</example>
</function>

<!-- 得到当前网页的句柄 -->
<function name="得到窗口句柄">
<!--返回值:窗口句柄-->

<!-- 参数:id:  控件名称   -->
<pram>(id,父窗口名称="")</pram>
<example>
函数原型:|网页.得到窗口句柄(id,父窗口名称="")|
函数说明:|得到并返回当前网页的句柄|
调用列子:|句柄 = 网页.得到窗口句柄("浏览器0")
</example>
</function>

<!-- 删除IE临时文件 -->
<function name="删除临时文件">
<!--返回值:真：成功   假：失败-->

<!-- 参数:  -->
<pram>()</pram>
<example>
函数原型:|网页.删除临时文件()|
函数说明:|删除IE临时文件|
调用列子:|网页.删除临时文件()
</example>
</function>

<!-- 删除IE的Cookie -->
<function name="删除cookie">
<!--返回值:真：成功   假：失败-->

<!-- 参数: -->
<pram>()</pram>
<example>
函数原型:|网页.删除cookie()|
函数说明:|删除IE的Cookie|
调用列子:|网页.删除cookie()
</example>
</function>

<!-- 在当前网页中执行一段JS脚本 -->
<function name="执行js">
<!--返回值:-->

<!-- 参数: 控件名 js脚本-->
<pram>(id,js脚本,父窗口名称="")</pram>
<example>
函数原型:|网页.执行js(id,js脚本,父窗口名称="")|
函数说明:|在当前网页中执行一段JS脚本,获取返回值|
调用列子:|返回值 = 网页.执行js("浏览器0","var t=document.title;return t;")
</example>
</function>

<!-- 设置滚动条位置 -->
<function name="设置滚动条位置">
<!--返回值:真：成功   假：失败-->

<!-- 参数: -->
<pram>(id,xPos,yPos,父窗口名称="")</pram>
<example>
函数原型:|网页.设置滚动条位置(id,xPos,yPos,父窗口名称="")|
函数说明:|设置滚动条x,y位置|
调用列子:|网页.设置滚动条位置("浏览器0",10,10)
</example>
</function>

<!-- 提交表单 -->
<function name="提交表单">
<!--返回值:成功或者失败-->

<!-- 参数:id:  控件名称  sub:网页元素特征字符串 -->
<pram>(id,sub,父窗口名称="")</pram>
<example>
函数原型:|网页.提交表单(id,sub,父窗口名称="")|
函数说明:|提交网页中的表单,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型  index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
网页.转到("浏览器0","www.tyuyan.com")
网页.提交表单("浏览器0","id:form1")
</example>
</function>

</namespace>


<!--表格控件-->
<namespace name="表格">
<!--表格大小-->
<function name="大小">
<!--返回值:成功或失败-->

<!--参数:控件名称,返回行.返回列-->
<pram>(名称,返回行,返回列,父窗口名称="")</pram>
<example>
函数原型:|表格.大小(名称,返回行,返回列,父窗口名称="")|
函数说明:|获取表格大小(行,列的个数)|
调用例子:|
变量 r_row, r_col
表格.大小("表格0",r_row, r_col)
</example>
</function>

<!--设置大小-->
<function name="设置大小">
<!--返回值:成功或失败-->

<!--参数:控件名称,长.宽-->
<pram>(名称,行,列,父窗口名称="")</pram>
<example>
函数原型:|表格.设置大小(名称,行,列,父窗口名称="")|
函数说明:|设置表格大小(行,列的个数)|
调用例子:|表格.设置大小("表格0",100,100)
</example>
</function>

<!--固定项大小-->
<function name="固定项大小">
<!--返回值:成功或失败-->

<!--参数:控件名称,返回长.返回宽-->
<pram>(名称,返回行,返回列,父窗口名称="")</pram>
<example>
函数原型:|表格.固定项大小(名称,返回行,返回列,父窗口名称="")|
函数说明:|获得固定项大小(行,列的个数)|
调用例子:|
变量 r_row, r_col
表格.固定项大小("表格0",r_row, r_col)
</example>
</function>

<!--设置固定项大小-->
<function name="设置固定项大小">
<!--返回值:成功或失败-->

<!--参数:控件名称,长.宽-->
<pram>(名称,行数,列数,父窗口名称="")</pram>
<example>
函数原型:|表格.设置固定项大小(名称,行数,列数,父窗口名称="")|
函数说明:|设置固定项大小(行,列的个数)|
调用例子:|表格.设置固定项大小("表格0",100,100)
</example>
</function>

<!--获得内容-->
<function name="获得内容">
<!--返回值:内容-->

<!--参数:控件名称,行号.列号-->
<pram>(名称,行号,列号,父窗口名称="")</pram>
<example>
函数原型:|表格.获得内容(名称,行号,列号,父窗口名称="")|
函数说明:|获得表格某一项的数据内容|
调用例子:|
内容=表格.获得内容("表格0",1,1)
辅助.消息框(内容)
</example>
</function>

<!--设置内容-->
<function name="设置内容">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号-->
<pram>(名称,行号,列号,内容,父窗口名称="")</pram>
<example>
函数原型:|表格.设置内容(名称,行号,列号,内容,父窗口名称="")|
函数说明:|设置表格某一项的数据内容|
调用例子:|表格.设置内容("表格0",1,1,"TC简单开发")
</example>
</function>

<!--获得类型-->
<function name="获得类型">
<!--返回值:获得的类型-->

<!--参数:控件名称,行号.列号-->
<pram>(名称,行号,列号,父窗口名称="")</pram>
<example>
函数原型:|表格.获得类型(名称,行号,列号,父窗口名称="")|
函数说明:|获得表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|
类型=表格.获得类型("表格0",1,1)
</example>
</function>

<!--设置类型-->
<function name="设置类型">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号,类型-->
<pram>(名称,行号,列号,类型,父窗口名称="")</pram>
<example>
函数原型:|表格.设置类型(名称,行号,列号,类型,父窗口名称="")|
函数说明:|设置表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|表格.设置类型("表格0",1,1,1)
</example>
</function>

<!--插入行-->
<function name="插入行">
<!--返回值:成功或失败-->

<!--参数:控件名称,内容,行号-->
<pram>(名称,内容,行号,父窗口名称="")</pram>
<example>
函数原型:|表格.插入行(名称,内容,行号,父窗口名称="")|
函数说明:|插入行|
调用例子:|表格.插入行("表格0","TC简单开发",1)
</example>
</function>

<!--清空-->
<function name="清空">
<!--返回值:成功或失败-->

<!--参数:控件名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|表格.清空(名称,父窗口名称="")|
函数说明:|清空表格控件所有项|
调用例子:|表格.清空("表格0")
</example>
</function>

<!--删除行-->
<function name="删除行">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号-->
<pram>(名称,行号,父窗口名称="")</pram>
<example>
函数原型:|表格.删除行(名称,行号,父窗口名称="")|
函数说明:|删除行|
调用例子:|表格.删除行("表格0",1)
</example>
</function>

<!--删除列-->
<function name="删除列">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号-->
<pram>(名称,列号,父窗口名称="")</pram>
<example>
函数原型:|表格.删除列(名称,列号,父窗口名称="")|
函数说明:|删除列|
调用例子:|表格.删除列("表格0",1)
</example>
</function>

<!--删除非固定行-->
<function name="删除非固定行">
<!--返回值:成功或失败-->

<!--参数:控件名称-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|表格.删除非固定行(名称,父窗口名称="")|
函数说明:|删除非固定行|
调用例子:|表格.删除非固定行("表格0")
</example>
</function>

<!--获得复选框状态-->
<function name="获得复选框状态">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号-->
<pram>(名称,行号,列号,父窗口名称="")</pram>
<example>
函数原型:|表格.获得复选框状态(名称,行号,列号,父窗口名称="")|
函数说明:|获得复选框状态,返回 真 为选中,返回 假 为未选中|
调用例子:|
是否选中=表格.获得复选框状态("表格0",1,1)
</example>
</function>

<!--设置复选框状态-->
<function name="设置复选框状态">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号,状态-->
<pram>(名称,行号,列号,是否选中=true,父窗口名称="")</pram>
<example>
函数原型:|表格.设置复选框状态(名称,行号,列号,是否选中=true,父窗口名称="")|
函数说明:|设置复选框状态,参数4 设置 真 为选中,返回 假 为未选中|
调用例子:|表格.设置复选框状态("表格0",1,1,真)
</example>
</function>

<!--设置下拉框内容-->
<function name="设置下拉框内容">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(名称,行号,列号,内容,父窗口名称="")</pram>
<example>
函数原型:|表格.设置下拉框内容(名称,行号,列号,内容,父窗口名称="")|
函数说明:|设置表格中下拉框的内容,内容参数为一维数组|
调用例子:|
内容=数组[2]
内容[0]="TC"
内容[1]="简单开发"
表格.设置下拉框内容("表格0",1,1,内容)
</example>
</function>

<!--获取焦点项-->
<function name="焦点项">
<!--返回值:成功或失败-->

<!--参数:控件名称,返回长.返回宽-->
<pram>(名称,返回行数,返回列数,父窗口名称="")</pram>
<example>
函数原型:|表格.焦点项(名称,返回行数,返回列数,父窗口名称="")|
函数说明:|获得表格焦点项(焦点:当前光标所在的位置)|
调用例子:|
变量 r_row,r_col
表格.焦点项("表格0",r_row,r_col)
</example>
</function>

<!--获得行高-->
<function name="获得行高">
<!--返回值:行高-->

<!--参数:控件名称,行-->
<pram>(名称,行,父窗口名称="")</pram>
<example>
函数原型:|表格.获得行高(名称,行,父窗口名称="")|
函数说明:|获得并返回指定行的行高|
调用例子:|行高=表格.获得行高("表格0",1)
</example>
</function>

<!--设置行高-->
<function name="设置行高">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,高-->
<pram>(名称,行,高,父窗口名称="")</pram>
<example>
函数原型:|表格.设置行高(名称,行,高,父窗口名称="")|
函数说明:|设置指定行的行高|
调用例子:|表格.设置行高("表格0",1,50)
</example>
</function>

<!--获得列宽-->
<function name="获得列宽">
<!--返回值:列宽-->

<!--参数:控件名称,列-->
<pram>(名称,列,父窗口名称="")</pram>
<example>
函数原型:|表格.获得列宽(名称,列,父窗口名称="")|
函数说明:|获得并返回指定列的列高|
调用例子:|列宽=表格.获得列宽("表格0",1)
</example>
</function>

<!--设置列宽-->
<function name="设置列宽">
<!--返回值:成功或失败-->

<!--参数:控件名称,列,宽-->
<pram>(名称,列,宽,父窗口名称="")</pram>
<example>
函数原型:|表格.设置列宽(名称,列,宽,父窗口名称="")|
函数说明:|设置指定列的列高|
调用例子:|表格.设置列宽("表格0",1,50)
</example>
</function>

<!--设置项背景颜色-->
<function name="设置项背景颜色">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列,颜色值-->
<pram>(名称,行,列,颜色,父窗口名称="")</pram>
<example>
函数原型:|表格.设置项背景颜色(名称,行,列,颜色,父窗口名称="")|
函数说明:|设置表格指定项(行,列)的背景颜色|
调用例子:|表格.设置项背景颜色("表格0",1,1,#ff00ff)
</example>
</function>

<!--设置项文本颜色-->
<function name="设置项文本颜色">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列,颜色值-->
<pram>(名称,行,列,颜色,父窗口名称="")</pram>
<example>
函数原型:|表格.设置项文本颜色(名称,行,列,颜色,父窗口名称="")|
函数说明:|设置表格指定项(行,列)的文本颜色|
调用例子:|表格.设置项文本颜色("表格0",1,1,#ffff00)
</example>
</function>

<!--填充-->
<function name="填充">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列-->
<pram>(名称,父窗口名称="")</pram>
<example>
函数原型:|表格.填充(名称,父窗口名称="")|
函数说明:|以表格外围边框为边界将表格项填充到整个边界,此时滚动条将消失|
调用例子:|表格.填充("表格0")
</example>
</function>

<!--获得选中范围-->
<function name="获得选中范围">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列-->
<pram>(名称,返回开始行号,返回开始列号,返回结束行号,返回结束列号,父窗口名称="")</pram>
<example>
函数原型:|表格.获得选中范围(名称,返回开始行号,返回开始列号,返回结束行号,返回结束列号,父窗口名称="")|
函数说明:|获得表格控件里选中的范围|
调用例子:|
变量 r_beginRow,r_beginCol,r_endRow,r_end_Col
表格.获得选中范围("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>

<!--设置选中范围-->
<function name="设置选中范围">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列-->
<pram>(名称,开始行号,开始列号,结束行号,结束列号,父窗口名称="")</pram>
<example>
函数原型:|表格.设置选中范围(名称,开始行号,开始列号,结束行号,结束列号,父窗口名称="")|
函数说明:|设置表格控件里选中的范围|
调用例子:|表格.设置选中范围("表格0",0,0,10,10)
</example>
</function>

<!--获得可见范围-->
<function name="获得可见范围">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列-->
<pram>(名称,返回开始行号,返回开始列号,返回结束行号,返回结束列号,父窗口名称="")</pram>
<example>
函数原型:|表格.获得可见范围(名称,返回开始行号,返回开始列号,返回结束行号,返回结束列号,父窗口名称="")|
函数说明:|获得表格非固定项可见范围|
调用例子:|
变量 r_beginRow,r_beginCol,r_endRow,r_end_Col
表格.获得可见范围("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>

<!--设置下拉框选项-->
<function name="设置下拉框选项">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(名称,行号,列号,索引,父窗口名称="")</pram>
<example>
函数原型:|表格.设置下拉框选项(名称,行号,列号,索引,父窗口名称="")|
函数说明:|设置表格中下拉框的当前选择项|
调用例子:|表格.设置下拉框选项("表格0",1,1,0)
</example>
</function>

<!--获得下拉框选项-->
<function name="获得下拉框选项">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(名称,行号,列号,父窗口名称="")</pram>
<example>
函数原型:|表格.获得下拉框选项(名称,行号,列号,父窗口名称="")|
函数说明:|获得并返回表格中下拉框的当前选择项的索引|
调用例子:|索引=表格.获得下拉框选项("表格0",1,1)
</example>
</function>

<!--获得下拉框内容-->
<function name="获得下拉框内容">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(名称,行号,列号,内容,父窗口名称="")</pram>
<example>
函数原型:|表格.获得下拉框内容(名称,行号,列号,内容,父窗口名称="")|
函数说明:|以数组形式返回指定下拉框的所有内容|
调用例子:|
内容
是否成功=表格.获得下拉框内容("表格0",1,1,内容)
</example>
</function>

<!--获得下拉框长度-->
<function name="获得下拉框长度">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(名称,行号,列号,父窗口名称="")</pram>
<example>
函数原型:|表格.获得下拉框长度(名称,行号,列号,父窗口名称="")|
函数说明:|获得指定下拉框的长度|
调用例子:|长度=表格.获得下拉框长度("表格0",1,1)
</example>
</function>

</namespace>
</dll>

<dll name="funlist" path="matchDll.dll">


<!--鼠标空间-->
<namespace name="mouse">

<!--鼠标移动绝对坐标-->
<function name="mousemove">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:nx 鼠标绝对坐标X,ny 鼠标绝对坐标Y-->
<pram>(x,y)</pram>
<example>
函数原型:|mouse.mousemove(x,y)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|mouse.mousemove(100,200)
</example>
</function>

<!--鼠标移动相对坐标-->
<function name="moverelative">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:nx 鼠标坐标X,ny 鼠标坐标Y-->
<pram>(x,y)</pram>
<example>
函数原型:|mouse.moverelative(x,y)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|mouse.moverelative(100,200)
</example>
</function>

<!--鼠标中键单击-->
<function name="middleclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标中键单击次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|mouse.middleclick(ncount=1)|
函数说明:|鼠标中键单击|
调用例子:|mouse.middleclick(10)
</example>
</function>

<!--鼠标中键按下-->
<function name="middledown">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|mouse.middledown()|
函数说明:|鼠标中键按下|
调用例子:|mouse.middledown()
</example>
</function>

<!--鼠标中键弹起-->
<function name="middleup">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|mouse.middleup(ncount=1)|
函数说明:|鼠标中键弹起|
调用例子:|mouse.middleup()
</example>
</function>


<!--鼠标右键单击-->
<function name="rightclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标右键单击次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|mouse.rightclick(ncount=1)|
函数说明:|鼠标右键单击|
调用例子:|mouse.rightclick(10)
</example>
</function>

<!--鼠标右键双击-->
<function name="rightdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标右键双击按下的次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|mouse.rightdoubleclick(count)|
函数说明:|鼠标右键双击|
调用例子:|mouse.rightdoubleclick(10)
</example>
</function>


<!--鼠标左键单击-->
<function name="leftclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标左键单击按下的次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|mouse.leftclick(ncount=1)|
函数说明:|鼠标左键单击|
调用例子:|mouse.leftclick(10)
</example>
</function>


<!--鼠标左键双击-->
<function name="leftdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标左键双击的次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|mouse.leftdoubleclick(ncount=1)|
函数说明:|鼠标左键双击|
调用例子:|mouse.leftdoubleclick(10)
</example>
</function>


<!--鼠标左键按下-->
<function name="leftdown">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|mouse.leftdown()|
函数说明:|鼠标左键按下|
调用例子:|mouse.leftdown()
</example>
</function>


<!--鼠标右键按下-->
<function name="rightdown">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|mouse.rightdown()|
函数说明:|鼠标右键按下|
调用例子:|mouse.rightdown()
</example>
</function>


<!--鼠标左键弹起-->
<function name="leftup">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|mouse.leftup()|
函数说明:|鼠标左键弹起|
调用例子:|mouse.leftup()
</example>
</function>


<!--鼠标右键弹起-->
<function name="rightup">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|mouse.rightup()|
函数说明:|鼠标右键弹起|
调用例子:|mouse.rightup()
</example>
</function>


<!--鼠标中键向上移动-->
<function name="mousewheelup">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标中键向上移动的值-->
<pram>(ncount=1)</pram>
<example>
函数原型:|mouse.mousewheelup(ncount=1)|
函数说明:|鼠标中键上滚|
调用例子:|mouse.mousewheelup(10)
</example>
</function>


<!--鼠标中键向下移动-->
<function name="mousewheeldown">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标中键向下移动的值-->
<pram>(ncount=1)</pram>
<example>
函数原型:|mouse.mousewheeldown(ncount=1)|
函数说明:|鼠标中键向下移动|
调用例子:|mouse.mousewheeldown(10)
</example>
</function>


<!--保存鼠标当前坐标-->
<function name="savemousepos">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|mouse.savemousepos()|
函数说明:|保存鼠标当前坐标|
调用例子:|mouse.savemousepos()
</example>
</function>

<!--恢复鼠标上一次坐标-->
<function name="restoremousepos">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|mouse.restoremousepos()|
函数说明:|恢复鼠标上一次坐标|
调用例子:|mouse.restoremousepos()
</example>
</function>

<!--锁住当前鼠标-->
<function name="lockmouse">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|mouse.lockmouse()|
函数说明:|锁住当前鼠标的位置|
调用例子:|mouse.lockmouse()
</example>
</function>

<!--解锁当前鼠标-->
<function name="unlockmouse">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|mouse.unlockmouse()|
函数说明:|解除当前鼠标锁定的位置|
调用例子:|mouse.unlockmouse()
</example>
</function>


<!--获取当前鼠标的当前位置坐标-->
<function name="getmousepoint">
<!--返回值:执行成功返回当前鼠标位置坐标字符串,字符串X坐标和Y坐标以逗号隔开！例:(100,200)-->

<!--参数:无-->
<pram>(x,y)</pram>
<example>
函数原型:|mouse.getmousepoint(x,y)|
函数说明:|获取当前鼠标的当前位置坐标|
调用例子:|
var x,y
mouse.getmousepoint(x,y)
</example>
</function>


<!--获取当前鼠标句柄-->
<function name="mousehandle">
<!--返回值:返回当前鼠标句柄-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|mouse.mousehandle()|
函数说明:|获取并返回当前鼠标句柄|
调用例子:|mouse.mousehandle()
</example>
</function>

<!--获取当前鼠标特征码-->
<function name="getmouseshape">
<!--返回值:返回当前鼠标特征码-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|mouse.getmouseshape()|
函数说明:|获取并返回当前鼠标特征码|
调用例子:|mouseshape=mouse.getmouseshape()
</example>
</function>

<!-- 等待点击 -->
<function name="waitclick">
<!--返回值:返回当前鼠标动作代码-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|mouse.waitclick()|
函数说明:|等待鼠标任意点击动作,并返回鼠标点击动作代码|
调用例子:|mousecode=mouse.waitclick()
</example>
</function>
</namespace>




<!--键盘空间-->
<namespace name="keyboard">

<!--按键:按下-->
<function name="keydown">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:bkeydown 键码-->
<pram>(bkeydown)</pram>
<example>
函数原型:|keyboard.keydown(bkeydown)|
函数说明:|模拟键盘按下动作|
调用例子:|keyboard.keydown(65)
</example>
</function>


<!--按键:按下弹起-->
<function name="keypress">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:bkeydown 键码,ncount 按键的次数-->
<pram>(bkeydown,ncount=1)</pram>
<example>
函数原型:|keyboard.keypress(bkeydown,ncount=1)|
函数说明:|模拟键盘按键(按下+弹起)动作|
调用例子:|keyboard.keypress(65,10)
</example>
</function>


<!--按键:弹起-->
<function name="keyup">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:bkeydown 键码-->
<pram>(bkeydown)</pram>
<example>
函数原型:|keyboard.keyup(bkeydown)|
函数说明:|模拟键盘弹起动作|
调用例子:|keyboard.keyup(65)
</example>
</function>

<!--按键:按下一串连续的字符-->
<function name="sendkeystring">
<!-- 返回值:执行成功返回真,否则返回假 --> 
 
<!--参数:连续的字符串-->
<pram>(str,delay=50)</pram> 
<example>
函数原型:|keyboard.sendkeystring(str,delay=50)|
函数说明:|模拟键盘弹起动作发送一连串字符串|
调用例子:|keyboard.sendkeystring("hello world")
</example>
</function>



<!--按键:暂停程序等待任意按键后继续-->
<function name="waitkey">
<!-- 返回值:执行成功返回真,否则返回假 --> 
 
<!--参数:-->
<pram>()</pram> 
<example>
函数原型:|keyboard.waitkey()|
函数说明:|暂停程序等待任意按键后继续|
调用例子:|keycode=keyboard.waitkey()
</example>
</function>

</namespace>



<!--窗口命名空间-->
<namespace name="window">

<!--找到窗口-->
<function name="findwindow">
<!--返回值:执行成功返回找到窗口句柄的整形值,否则返回0-->

<!--参数:窗口名-->
<pram>(windowname,classname="")</pram>
<example>
函数原型:|window.findwindow(windowname,classname="")|
函数说明:|根据窗口名称或窗口类名返回窗口句柄|
调用例子:|hwnd=window.findwindow("World of Warcraft")
</example>
</function>


<!--设置窗口最大化-->
<function name="setwindowmax">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.setwindowmax(hwnd)|
函数说明:|设置窗口最大化|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.setwindowmax(hwnd)
</example>
</function>

<!--设置窗口最小化-->
<function name="setwindowmin">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.setwindowmin(hwnd)|
函数说明:|设置窗口最大化|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.setwindowmin(hwnd) 
</example>
</function>


<!--设置窗口标题-->
<function name="setwindowcaption">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值,windowcaption 窗口要更改的名字-->
<pram>(hwnd,windowcaption)</pram>
<example>
函数原型:|window.setwindowcaption(hwnd,windowcaption)|
函数说明:|设置窗口标题|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.setwindowcaption(hwnd,"wow")  
</example>
</function>

<!--设置窗口为置前窗口-->
<function name="setwindowtop">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd,iftop=true)</pram>
<example>
函数原型:|window.setwindowtop(hwnd,iftop=true)|
函数说明:|设置窗口永久置顶,第二参数,真为置顶,假为取消置顶,可以置顶控件|
调用例子:| 
hwnd=window.findwindow("World of Warcraft")
window.setwindowtop(hwnd,true)
</example>
</function>


<!--设置窗口的位置-->
<function name="setwindowpos">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:x 坐标X,y 坐标Y-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.setwindowpos(hwnd,x,y)|
函数说明:|设置窗口的位置|
调用例子:| 
hwnd=window.findwindow("World of Warcraft")
window.setwindowpos(hwnd,100,500)  
</example>
</function>


<!--窗口隐藏-->
<function name="hidewindow">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.hidewindow(hwnd)|
函数说明:|窗口隐藏|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.hidewindow(hwnd)
</example>
</function>

<!--显示窗口-->
<function name="showwindow">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.showwindow(hwnd)|
函数说明:|显示窗口|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.showwindow(hwnd)
</example>
</function>


<!--还原窗口-->
<function name="restorewnd">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.restorewnd(hwnd)|
函数说明:|窗口还原|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.restorewnd(hwnd)
</example>
</function>


<!--关闭窗口-->
<function name="closewnd">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd,mod=0)</pram>
<example>
函数原型:|window.closewnd(hwnd,mod=0)|
函数说明:|窗口关闭|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.closewnd(hwnd)
</example>
</function>


<!--得到窗口标题-->
<function name="getwindowcaption">
<!--返回值:窗口标题-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.getwindowcaption(hwnd)|
函数说明:|得到窗口标题|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
caption=window.getwindowcaption(hwnd)
</example>
</function>


<!--判断窗口是否存在-->
<function name="iswindow">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.iswindow(hwnd)|
函数说明:|判断窗口是否存在,返回真表示存在,假表示不存在|
调用例子:|
hwnd=window.findwindow("World of Warcraft")|
bret=window.iswindow(hwnd)
</example>
</function>

<!--得到窗口类型(窗口类名)-->
<function name="getwindowtype">
<!--返回值:窗口类型-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.getwindowtype(hwnd)|
函数说明:|得到窗口类名|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
strclass=window.getwindowtype(hwnd)
</example>
</function>


<!--得到当前窗口句柄-->
<function name="getactivewindowhwnd">
<!--返回值:hwnd 窗口句柄整形值-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|window.getactivewindowhwnd()|
函数说明:|得到当前窗口句柄|
调用例子:|hwnd=window.getactivewindowhwnd()
</example>
</function>

<!--得到鼠标移动的窗口句柄-->
<function name="getmousemovewndhand">
<!--返回值:hwnd 窗口句柄整形值-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|window.getmousemovewndhand()|
函数说明:|得到当前鼠标移动的窗口句柄|
调用例子:|hwnd=window.getmousemovewndhand()
</example>
</function>

<!--得到当前可以发送按键消息的窗口,获取当前键盘焦点的窗口句柄-->
<function name="getfocuswndhand">
<!--返回值:hwnd 窗口句柄整形值-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|window.getfocuswndhand()|
函数说明:|获取当前键盘焦点的窗口句柄|
调用例子:|hwnd=window.getfocuswndhand()
</example>
</function>


<!--向窗口按键:按键-弹起消息-->
<function name="sendkeypress">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(hwnd,key)</pram>
<example>
函数原型:|window.sendkeypress(hwnd,key)|
函数说明:|向窗口发送一个按键(按下+弹起)消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.sendkeypress(hwnd,13)
</example>
</function>

<!--向窗口按键:弹起消息-->
<function name="sendkeyup">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(hwnd,key)</pram>
<example>
函数原型:|window.sendkeyup(hwnd,key)|
函数说明:|向窗口发送一个弹起消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.sendkeyup(hwnd,13)
</example>
</function>

<!--向窗口按键:按下消息-->
<function name="sendkeydown">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(hwnd,key)</pram>
<!--举列:window.sendkeydown(6553,13)-->
<example>
函数原型:|window.sendkeydown(hwnd,key)|
函数说明:|向窗口发送一个按下消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.sendkeydown(hwnd,13)
</example>
</function>

<!--向窗口按下字符消息-->
<function name="sendchar">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值, key 窗口键码-->
<pram>(hwnd,key)</pram>
<!--举列:window.sendchar(6553, 65)-->
<example>
函数原型:|window.sendchar(hwnd,key)|
函数说明:|向窗口发送一个字符消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.sendchar(hwnd,65)
</example>
</function>

<!--向窗口按下字符消息-->
<function name="sendstring">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值, str 字符串消息-->
<pram>(hwnd,str)</pram>
<example>
函数原型:|window.sendstring(hwnd,str)|
函数说明:|向窗口发送一个连续按下字符串消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.sendstring(hwnd,"hello world")
</example>
</function>


<!-- 向窗口按键:按键-弹起消息--> 
<function name="postkeypress">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(hwnd,key)</pram> 
<example>
函数原型:|window.postkeypress(hwnd,key)|
函数说明:|向窗口后台提交按键(按下+弹起)消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.postkeypress(hwnd,13)
</example>
</function>


<!-- post向窗口按键:弹起消息--> 
<function name="postkeyup">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(hwnd,key)</pram> 
<example>
函数原型:|window.postkeyup(hwnd,key)|
函数说明:|向窗口后台提交弹起消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")|
window.postkeyup(hwnd,13)
</example>
</function>



<!-- post向窗口按键:按下消息--> 
<function name="postkeydown">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(hwnd,key)</pram> 
<example>
函数原型:|window.postkeydown(hwnd,key)|
函数说明:|向窗口后台提交弹起消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.postkeydown(hwnd,13)
</example>
</function>

<!-- post向窗口按下字符消息--> 
<function name="postchar">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:hwnd 窗口句柄整形值, key 窗口键码--> 
<pram>(hwnd,key)</pram> 
<example>
函数原型:|window.postchar(hwnd,key)|
函数说明:|向窗口后台提交按键字符消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.postchar(hwnd,65)
</example>
</function>


<!-- post向窗口按下字符消息--> 
<function name="poststring">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:hwnd 窗口句柄整形值, str 字符串消息--> 
<pram>(hwnd,str)</pram> 
<example>
函数原型:|window.poststring(hwnd,str)|
函数说明:|向窗口后台提交按下一连串字符串消息|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.poststring(hwnd,"hello world")
</example>
</function>


<!--设置窗口的位置大小-->
<function name="setwindowsize">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:width 窗口的宽,height 窗口的高-->
<pram>(hwnd,width,height)</pram>
<example>
函数原型:|window.setwindowsize(hwnd,width,height)|
函数说明:|设置窗口大小|
调用例子:| 
hwnd=window.findwindow("World of Warcraft")
window.setwindowsize(hwnd,500,500)  
</example>
</function>


<!--获取窗口的位置-->
<function name="getwindowpos">
<!--返回值:执行成功返回真,将窗口位置的X坐标,Y坐标返回-->

<!--参数:x 坐标X,y 坐标Y-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.getwindowpos(hwnd,x,y)|
函数说明:|获取窗口的位置|
调用例子:|
var x,y,hwnd
hwnd=window.findwindow("World of Warcraft")
window.getwindowpos(hwnd,x,y)  
</example>
</function>


<!--获取窗口的大小-->
<function name="getwindowsize">
<!--返回值:执行成功返回真,将窗口宽和将窗口高返回-->

<!--参数:hwnd,width 窗口的宽,height 窗口的高-->
<pram>(hwnd,width,height)</pram>
<example>
函数原型:|window.getwindowsize(hwnd,width,height)|
函数说明:|获取窗口的大小|
调用例子:| 
var width,height,hwnd
hwnd=window.findwindow("World of Warcraft")
window.getwindowsize(hwnd,width,height)  
</example>
</function>


<!--窗口坐标转屏幕坐标-->
<function name="clienttoscreen">
<!--返回值:成功或者失败-->

<!--参数窗口句柄,窗口x坐标, 窗口y坐标, 返回屏幕x坐标, 返回屏幕y坐标-->
<pram>(hwnd,wndx,wndy,scrx,scry)</pram>
<example>
函数原型:|window.clienttoscreen(hwnd,wndx,wndy,scrx,scry)|
函数说明:|窗口坐标转屏幕坐标|
调用列子:|
var ret
var scrx,scry,hwnd
hwnd=window.findwindow("TC帮助文档")
ret=window.clienttoscreen(hwnd,10,200,scrx,scry)
</example>
</function> 

<!--屏幕坐标转窗口坐标-->
<function name="screentoclient">
<!--返回值:成功或者失败-->

<!--参数窗口句柄,屏幕x坐标, 屏幕y坐标, 返回窗口x坐标, 返回窗口y坐标-->
<pram>(hwnd,scrx,scry,wndx,wndy)</pram>
<example>
函数原型:|window.screentoclient(hwnd,scrx,scry,wndx,wndy)|
函数说明:|屏幕坐标转窗口坐标|
调用列子:|
var ret
var wndx,wndy,hwnd
hwnd=window.findwindow("TC帮助文档")
ret=window.screentoclient(hwnd,10,200,wndx,wndy)
</example>
</function> 

<!--得到父窗口句柄-->
<function name="getparent">
<!--返回值:父窗口句柄-->

<!--参数窗口句柄-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.getparent(hwnd)|
函数说明:|得到父窗口句柄,返回0表示没有父窗口|
调用列子:|
var phwnd,hwnd
hwnd=window.findwindow("World of Warcraft")
phwnd= window.getparent(hwnd)
</example>
</function> 

<!--后台发送鼠标-->
<function name="mousemove">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.mousemove(hwnd,x,y)|
函数说明:|发送鼠标到窗口x,y坐标位置|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.mousemove(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键按下-->
<function name="leftdown">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.leftdown(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键按下,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.leftdown(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键弹起-->
<function name="leftup">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.leftup(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键弹起,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.leftup(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键单击-->
<function name="leftclick">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.leftclick(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键单击,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.leftclick(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标左键双击-->
<function name="leftdoubleclick">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.leftdoubleclick(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行左键单击,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.leftdoubleclick(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键按下-->
<function name="rightdown">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.rightdown(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键按下,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.rightdown(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键弹起-->
<function name="rightup">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.rightup(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键弹起,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.rightup(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键单击-->
<function name="rightclick">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.rightclick(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键单击,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.rightclick(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标右键双击-->
<function name="rightdoubleclick">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.rightdoubleclick(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行右键双击,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.rightdoubleclick(hwnd,50,20)
</example>
</function>


<!--后台发送鼠标中键按下-->
<function name="middledown">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.middledown(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键按下,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.middledown(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标中键弹起-->
<function name="middleup">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.middleup(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键弹起,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.middleup(hwnd,50,20)
</example>
</function>

<!--后台发送鼠标中键单击-->
<function name="middleclick">
<!--返回值:成功或者失败-->

<!--参数:窗口句柄,x坐标, y坐标-->
<pram>(hwnd,x,y)</pram>
<example>
函数原型:|window.middleclick(hwnd,x,y)|
函数说明:|后台发送鼠标到窗口x,y坐标位置执行中键单击,坐标体系相对于客户区坐标|
调用例子:|
hwnd=window.findwindow("World of Warcraft")
window.middleclick(hwnd,50,20)
</example>
</function>

<!--得到自身窗口句柄-->
<function name="getmyhwnd">
<!--返回值:hwnd 窗口句柄整形值-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|window.getmyhwnd()|
函数说明:|得到自身窗口句柄,只能获取主窗口句柄|
调用例子:|hwnd=window.getmyhwnd()
</example>
</function>

<!--通过句柄获取路径-->
<function name="getpath">
<!--返回值:path 程序路径-->

<!--参数:无-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.getpath(hwnd)|
函数说明:|通过句柄获取指定窗口程序的路径|
调用例子:|
hwnd=window.getmyhwnd()
path=window.getpath(hwnd)
help.messagebox(path)
</example>
</function>


<!--设置窗口为置前窗口-->
<function name="activate">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:hwnd 窗口句柄整形值-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.activate(hwnd)|
函数说明:|激活窗口,并置顶一次|
调用例子:| 
hwnd=window.findwindow("TC帮助文档")
window.activate(hwnd)
</example>
</function>

<!--获取窗口客户区大小-->
<function name="getclientrect">
<!--返回值:执行成功返回真失败返回假-->

<!--参数:窗口句柄,窗口的宽,窗口的高-->
<pram>(hwnd,rCX,rCY,rwidth,rheight)</pram>
<example>
函数原型:|window.getclientrect(hwnd,rCX,rCY,rwidth,rheight)|
函数说明:|获取窗口的位置及客户区大小(不包含标题栏大小)|
调用列子:|
var hwnd,rCX,rCY,rwidth,rheight
hwnd=window.findwindow("World of Warcraft")
window.getclientrect(hwnd,rCX,rCY,rwidth,rheight)
</example>
</function>

<!--抓取当前活动窗口指定坐标点的图像-->
<function name="getpixelcolor">
<!--返回值:返回的是颜色值的十六进制字符型数据-->

<!--参数:窗口句柄, 点的x坐标, 点的y坐标-->
<pram>(hwnd,x坐标,y坐标)</pram>
<example>
函数原型:|window.getpixelcolor(hwnd,x,y)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|
var hwnd,intcolor
hwnd=window.findwindow("World of Warcraft")
intcolor=window.getpixelcolor(hwnd,300,300)
</example>
</function>

<!--在当前活动窗口区域内找色-->
<function name="findrectpixelcolor">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像,返回真,否则返回假-->

<!--参数:窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值 颜色16进制数,检索方式,返回x坐标,返回y坐标-->
<pram>(窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,dir,返回x坐标,返回y坐标)</pram>
<example>
函数原型:| window.findrectpixelcolor(窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,dir,返回x坐标,返回y坐标)|
函数说明:|在当前活动窗口区域内找色|
调用列子:|
var hwnd,x,y
var isfind
hwnd=window.findwindow("World of Warcraft")
isfind=window.findrectpixelcolor(hwnd,10,10,500,600,#1E3C04,0,x,y)
</example>
</function>

<!--在当前活动窗口区域内模糊找色-->
<function name="findrectpixelcolorex">
<!--返回值:给出的图像值如果是当前活动窗口区域指定坐标点的图像点,如果找到在参数里返回,否则返回空-->

<!--参数:窗口句柄,左上角x坐标,左上角y坐标,右下角x坐标,右下角y坐标,颜色值 颜色16进制数,相似度,检索方式,返回x坐标,返回y坐标-->
<pram>(窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,相似度,dir,返回x坐标,返回y坐标)</pram>
<example>
函数原型:| window.findrectpixelcolorex(窗口句柄,左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,颜色值,相似度,dir,返回x坐标,返回y坐标)|
函数说明:|在当前活动窗口区域内模糊找图像点,找到图像点,坐标值保存在返回的x坐标和返回的y坐标 变量里。未找到则返回的x坐标和返回的y坐标这2个变量的值为-1|
调用列子:|
//相似度的值规定范围(0.5-1.0),推荐使用0.8|
var hwnd,x,y
var isfind
hwnd=window.findwindow("World of Warcraft")
isfind=window.findrectpixelcolorex(hwnd,10,10,500,600,#1E3C04,0.8,0,x,y)
</example>
</function>

<!--后台找图功能-->
<function name="findpic">
<!-- 返回值:找到则返回相应图片的序号,未找到则返回0--> 
 
<!-- 参数:窗口句柄 左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径,色偏,相似度,检索方式,返回找到的x坐标,y坐标--> 
<pram>(hwnd,left,top,right,buttom,path,offset,sim,dir,x,y)</pram> 
<example>
函数原型:|window.findpic(hwnd,left,top,right,buttom,path,offset,sim,dir,x,y)| 
函数说明:|后台找图功能| 
调用列子:|
//说明:支持多张图片(图片与图片中间使用 竖线隔开)和根据四角的颜色判断是否为透明图|
var x,y,picindex,hwnd
hwnd=window.findwindow("World of Warcraft")
picindex=window.findpic(hwnd,0,0,1440,900,"d:\\111.bmp",#101010,1.0,1,x,y)
</example> 
</function>

<!--设置焦点-->
<function name="setfocus">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(handle)</pram>
<example>
函数原型:|window.setfocus(handle)|
函数说明:|设置键盘焦点到指定窗口,返回值为上次键盘焦点所在窗口的句柄|
调用例子:|
handle=control.gethandle("编辑框0")
window.setfocus(handle)
</example>
</function>

<!--设置焦点-->
<function name="isvisual">
<!--返回值:成功或失败-->

<!--参数:窗口句柄-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.isvisual(hwnd)|
函数说明:|判断一个窗口是否可见,返回真表示可见,返回假表示不可见,对控件同样有效|
调用例子:|
hwnd=control.gethandle("编辑框0")
help.messagebox(window.isvisual(hwnd))
</example>
</function>

<!--是否有效-->
<function name="isenable">
<!--返回值:成功或失败-->

<!--参数:窗口句柄-->
<pram>(hwnd)</pram>
<example>
函数原型:|window.isenable(hwnd)|
函数说明:|判断一个窗口是否有效,返回真表示可用,返回假表示不可用,对控件同样有效|
调用例子:|
hwnd=control.gethandle("编辑框0")
help.messagebox(window.isenable(hwnd))
</example>
</function>

<!--sendmessage-->
<function name="sendmessage">
<!--返回值:成功或失败-->

<!--参数:hwnd,msg,wparam,iparam-->
<pram>(hwnd,msg,wparam,iparam)</pram>
<example>
函数原型:|window.sendmessage(hwnd,msg,wparam,iparam)|
函数说明:|将指定的消息发送到一个窗口,同win32 api 里面的SendMessage等同的效果|
调用例子:|
hwnd=window.getmyhwnd()
window.sendmessage(hwnd,274,61488,0)//向TC窗口自身发送最大化的消息
</example>
</function>

<!--postmessage-->
<function name="postmessage">
<!--返回值:成功或失败-->

<!--参数:hwnd,msg,wparam,iparam-->
<pram>(hwnd,msg,wparam,iparam)</pram>
<example>
函数原型:|window.postmessage(hwnd,msg,wparam,iparam)|
函数说明:|将一个消息放入到与指定窗口创建的线程相联系消息队列里,同win32 api 里面的PostMessage等同的效果|
调用例子:|
hwnd=window.getmyhwnd()
window.postmessage(hwnd,274,61488,0)//向TC窗口自身提交最大化的消息
</example>
</function>

</namespace>



<!--文件命名空间-->
<namespace name="file">

<!--打开文件,判断文件是否存在 -->
<function name="openfile">
<!--返回值:执行成功返回文件句柄,否则返回0-->

<!--参数:path文件名以及文件路径-->
<pram>(path,attribute="rw")</pram>
<!--举列:file.openfile("d:\\1.txt")-->
<example>
函数原型:|file.openfile(path,attribute="")|
函数说明:|打开文件操作成功返回文件句柄,失败返回0,,属性见帮助文档|
调用例子:|
handle=file.openfile("d:\\1.txt")
help.sleep(5000)
file.closefile(handle)
</example>
</function>


<!--关闭文件-->
<function name="closefile">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:handle文件句柄-->
<pram>(handle)</pram>
<example>
函数原型:|file.closefile(handle)|
函数说明:|关闭文件操作|
调用例子:|
handle=file.openfile("d:\\1.txt")
help.sleep(5000)
file.closefile(handle)
</example>
</function>


<!--创建文件-->
<function name="createfile">
<!--返回值:执行成功返回文件句柄,否则返回0-->

<!--参数:path文件名以及文件路径,attribute 属性-->
<pram>(path,attribute)</pram>
<example>
函数原型:|file.createfile(path,attribute)|
函数说明:|创建文件,成功返回句柄,失败返回0,默认属性有("创建文件"),默认创建为ascii编码文件,更多属性见帮助文档|
调用例子:|file.createfile("d:\\1.txt","rw")
</example>
</function>


<!--写文件ascii-->
<function name="writefile">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:handle文件句柄的整形值,inputstr要写入文件的内容-->
<pram>(handle,inputstr)</pram>
<example>
函数原型:|file.writefile(handle,inputstr)|
函数说明:|在文件中当前位置写入指定的内容|
调用例子:|
handle=file.openfile("d:\\1.txt")
file.writefile(handle,"aaaaa")
</example>
</function>


<!--在文件当前写入一行内容ascii-->
<function name="writefileline">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:filehandle文件句柄,str字符串-->
<pram>(filehandle,str)</pram>
<example>
函数原型:|file.writefileline(filehandle,str)|
函数说明:|写入一行内容并换行|
调用例子:|
handle=file.openfile("d:\\1.txt")
file.writefileline(handle,"aaaaaa")
</example>
</function>


<!--写文件末尾-->
<function name="writefileend">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:handle文件句柄,inputstr要写入文件的内容-->
<pram>(handle,inputstr)</pram>
<example>
函数原型:|file.writefileend(handle,inputstr)|
函数说明:|在文件末尾写入内容|
调用例子:|
handle=file.openfile("d:\\1.txt")
file.writefileend(handle,"aaaa")
</example>
</function>


<!--读文件ascii-->
<function name="readfile">
<!--返回值:返回读出的内容-->

<!--参数:handle文件句柄,readSize 具体的读出多少字节-->
<pram>(handle,readSize)</pram>
<example>
函数原型:|file.readfile(handle,readSize)|
函数说明:|读出文件指定个数的内容并返回读出内容字符串|
调用例子:|
handle=file.openfile("d:\\1.txt")
read=file.readfile(handle,10)
</example>
</function>


<!--根据文件的当前读写位置读一行内容ascii-->
<function name="readfileline">
<!--返回值:读出的内容-->

<!--参数:filehandle 文件句柄-->
<pram>(filehandle)</pram>
<example>
函数原型:|file.readfileline(filehandle)|
函数说明:|在文件当前位置,读一行内容并返回读出内容字符串|
调用例子:|
handle=file.openfile("d:\\1.txt")
read=file.readfileline(handle)
</example>
</function>


<!--移动文件-->
<function name="movefile">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:formpath要被移动的文件名和路径,topath要移动到具体的文件位置以及移动后更改的文件名-->
<pram>(formpath,topath)</pram>
<example>
函数原型:|file.movefile(formpath,topath)|
函数说明:|移动文件|
调用例子:|file.movefile("e:\\2.txt","d:\\1.txt")
</example>
</function>


<!--拷贝文件-->
<function name="copyfile">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:oldname要被拷贝的文件名,newname拷贝的文件名-->
<pram>(oldname,newname)</pram>
<example>
函数原型:|file.copyfile(oldname,newname)|
函数说明:|拷贝文件|
调用例子:|file.copyfile("d:\\bb.txt","d:\\aa.txt")
</example>
</function>


<!--重命名文件-->
<function name="renamefile">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:oldname要被更改的文件名,newname新的文件名-->
<pram>( oldname,newname)</pram>
<example>
函数原型:|file.renamefile( oldname,newname)|
函数说明:|重命名文件|
调用例子:|file.renamefile("d:\\aa.txt","d:\\bb.txt")
</example>
</function>


<!--删除文件-->
<function name="deletefile">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:path文件名以及文件路径-->
<pram>( path)</pram>
<!--举列:file.deletefile("d:\\1.txt")-->
<example>
函数原型:|file.deletefile( path)|
函数说明:|删除文件|
调用例子:|file.deletefile("d:\\1.txt")
</example>
</function>


<!--得到文件的长度-->
<function name="getfilelength">
<!--返回值:返回文件的长度-->

<!--参数:path 设置文件的路径和文件夹名-->
<pram>(filePath)</pram>
<!--举列:file.getfilelength(filePath)-->
<example>
函数原型:|file.getfilelength(filePath)|
函数说明:|读出文件长度并返回文件字符个数|
调用例子:|
len=file.getfilelength(filePath)
</example>
</function>




<!--创建文件夹-->
<function name="createfolder">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:path文件夹的路径和文件夹名-->
<pram>(path)</pram>
<!--举列:file.createfolder("d:\\bb")-->
<example>
函数原型:|file.createfolder(path)|
函数说明:|创建文件夹|
调用例子:|file.createfolder("d:\\bb")
</example>
</function>


<!--复制文件夹-->
<function name="copyfolder">
<!--返回值:执行成功返回0值,否则返回非0值-->

<!--参数:oldname传进要被拷贝的文件名,newname复制新的文件名-->
<pram>(oldname,newname)</pram>
<example>
函数原型:|file.copyfolder(oldname,newname)|
函数说明:|复制文件夹|
调用例子:|file.copyfolder("d:\\bbb\\*.*","d:\\aaa")
</example>
</function>


<!--重命名文件夹-->
<function name="renamefolder">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:newname新文件夹名,oldname要被更改的文件夹名-->
<pram>(newname,oldname)</pram>
<example>
函数原型:|file.renamefolder(newname,oldname)|
函数说明:|重命名文件夹|
调用例子:|file.renamefolder("d:\\bb","d:\\aa")
</example>
</function>


<!--删除文件夹-->
<function name="deletefolder">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:path文件夹的路径和文件夹名-->
<pram>(path)</pram>
<example>
函数原型:|file.deletefolder(path)|
函数说明:|删除文件夹|
调用例子:|file.deletefolder("d:\\bb")
</example>
</function>


<!--设置文件属性-->
<function name="setfileattribute">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:handle文件句柄,attribute文件属性-->
<pram>(path,attribute)</pram>
<example>
函数原型:|file.setfileattribute(path,attribute)|
函数说明:|设置文件属性|
调用例子:|file.setfileattribute("d:\\bb.txt","wr")
</example>
</function>


<!--设置文件的读写的位置-->
<function name="setfilepostion">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:filehand 文件句柄的整形值,pos 位置-->
<pram>(filehand,pos)</pram>
<example>
函数原型:|file.setfilepostion(filehand,pos)|
函数说明:|设置文件读写位置|
调用例子:|
handle=file.openfile("d:\\1.txt")
file.setfilepostion(handle,"begin")
file.setfilepostion(handle,"end")
</example>
</function>

<!--判断文件或文件夹是否存在-->
<function name="exist">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:文件句柄,位置-->
<pram>(path)</pram>
<example>
函数原型:|file.exist(path)|
函数说明:|判断文件或文件夹是否存在,真表示存在,假表示不存在|
调用例子:|
ret=file.exist("c:\\1.txt")
if(ret)
help.messagebox("文件存在")
else
help.messagebox("文件不存在")
endif
</example>
</function>

<!--读文件-->
<function name="readfileex">
<!--返回值:返回读出的内容-->

<!--参数:文件路径-->
<pram>(path)</pram>
<example>
函数原型:|file.readfileex(path)|
函数说明:|根据路径读文件,返回文件内容字符串|
调用例子:|help.messagebox(file.readfileex("d:\\1.txt"))
</example>
</function>

<!--遍历-->
<function name="traverse">
<!--返回值:返回读出的内容-->

<!--参数:真或假-->
<pram>(path,rFolder,rFile)</pram>
<example>
函数原型:|file.traverse(path,rFolder,rFile)|
函数说明:|遍历指定路径中的文件夹及文件,详细说明见帮助文档|
调用例子:|
var  rFolder,rFile
file.traverse("D:\\test",rFolder,rFile)
</example>
</function>

<!--对话框-->
<function name="dialog">
<!--返回值:返回读出的内容-->

<!--参数:真或假-->
<pram>(mode,title="",parentHwnd=0)</pram>
<example>
函数原型:|file.dialog(mode,title="",parentHwnd=0)|
函数说明:|弹出文件对话框,返回选择的路径,mode 0:保存文件,1:打开文件,2,选择文件夹|
调用例子:|path=file.dialog(0)
</example>
</function>

<!--文件加密-->
<function name="fileencrypt">
  <!--返回值:加密后字串-->

  <!--参数:源数据,密钥-->
  <pram>(FilePath,EncryptFilePath,key)</pram>
  <example>
    函数原型:|file.fileencrypt(FilePath,EncryptFilePath,key)|
    函数说明:|通过密钥,加密指定文件,并保存加密后文件到指定目录,成功返回真,否则返回假|
    调用例子:|
    file.fileencrypt("D:\\源文件.txt","D:\\加密后文件.txt","123")
    file.filedecrypt("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
  </example>
</function>

<!--文件解密-->
<function name="filedecrypt">
  <!--返回值:加密后字串-->

  <!--参数:源数据,密钥-->
  <pram>(EncryptFilePath,DecryptFilePath,key)</pram>
  <example>
    函数原型:|file.filedecrypt(EncryptFilePath,DecryptFilePath,key)|
    函数说明:|通过密钥,解密指定文件,并保存解密后文件到指定目录,成功返回真,否则返回假|
    调用例子:|
    file.fileencrypt("D:\\源文件.txt","D:\\加密后文件.txt","123")
    file.filedecrypt("D:\\加密后文件.txt","D:\\解密后文件.txt","123")
  </example>
</function>

</namespace>



<!--字符串命名空间-->
<namespace name="str">

<!--2个字符串的连接-->
<function name="strcat">
<!--返回值:返回字符串-->

<!--参数:str1 连接字符串1,str2 连接字符串2-->
<pram>(str1,str2)</pram>
<example>
函数原型:|str.strcat(str1,str2)|
函数说明:|连接字符串,返回新的字符串|
调用例子:|help.messagebox(str.strcat("aaa","bbb"))
</example>
</function>


<!--字符串小写-->
<function name="strlowercase">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:str 要改成小写的字符串-->
<pram>(str1)</pram>
<example>
函数原型:|str.strlowercase(str1)|
函数说明:|字符串小写,返回新的字符串|
调用例子:|help.messagebox(str.strlowercase("ABC"))
</example>
</function>

<!--字符串大写-->
<function name="struppercase">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:str 要改成大写的字符串-->
<pram>(str1)</pram>
<example>
函数原型:|str.struppercase(str1)|
函数说明:|字符串大写,返回新的字符串|
调用例子:|help.messagebox(str.struppercase("abc"))
</example>
</function>


<!--2个字符串的比较-->
<function name="strcompare">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->

<!--参数:str1字符串1,str2字符串2-->
<pram>(str1,str2)</pram>
<example>
函数原型:|str.strcompare(str1,str2)|
函数说明:|比较2个字符串,返回值==0表示相等,>0表示字符串1大于字符串2,反之则字符串1小于字符串2|
调用例子:|str.strcompare("aaa","bbb")
</example>
</function>


<!--去掉字符串头尾指定字符-->
<function name="strtrim">
<!--返回值:返回排除了要比较的字符串-->

<!--参数:compstr要比较字符串,sourcestr 源数据-->
<pram>(compstr,sourcestr=" ")</pram>
<example>
函数原型:|str.strtrim(compstr,sourcestr=" ")|
函数说明:|去掉字符串头尾指定字符,返回处理后字符串|
调用例子:|help.messagebox(str.strtrim("abcdefgabcdefgabc","abc"))
</example>
</function>


<!--移除前几位或后几位字符串-->
<function name="strcut">
<!--返回值:返回已砍掉几位的字符串-->

<!--参数:str 字符串,从前头砍掉的几位,前后-->
<pram>(str,ncount,beginOrend)</pram>
<example>
函数原型:|str.strcut(str,ncount,beginOrend)|
函数说明:|移除前几位或后几位字符串,返回处理后新的字符串|
调用例子:|help.messagebox(str.strcut("abcdefghijiklnm",5,false))
</example>
</function>


<!--字符串中截取指定区域的字符串-->
<function name="strsub">
<!--返回值:返回截取到的指定区域的字符串-->

<!--参数:str字符串,begin 截取的开头位置,end 截取的末尾的位置-->
<pram>(str,begin,end)</pram>
<example>
函数原型:|str.strsub(str,begin,end)|
函数说明:|字符串中截取指定区域的字符串,返回处理后新的字符串|
调用例子:|help.messagebox(str.strsub("abcdefghijklmn",2,5))
</example>
</function>


<!--得到字符串长度-->
<function name="strleng">
<!--返回值:返回整形-->

<!--参数:str 求出长度信息的字符串-->
<pram>(str)</pram>
<example>
函数原型:|str.strleng(str)|
函数说明:|得到字符串长度并且返回长度|
调用例子:|str.strleng("abdcdef")
</example>
</function>


<!--字符串中加字符-->
<function name="addchar">
<!--返回值:返回字符串-->

<!--参数:str字符串,key 字符ascii值-->
<pram>(str,key)</pram>
<example>
函数原型:|str.addchar(str,key)|
函数说明:|字符串中加字符,返回处理后新的字符串|
调用例子:|help.messagebox(str.addchar("abcdefghijklmn",13))
</example>
</function>


<!--字符串中找字符-->
<function name="findchar">
<!--返回值:返回找到字符的位置-->

<!--参数:str字符串,key 字符ascii值-->
<pram>(str,key)</pram>
<example>
函数原型:|str.findchar(str,key)|
函数说明:|在第一个字符串查找第二个字符串,并返回第一次出现该字符的位置|
调用例子:|str.findchar("abcdefghijklmn",65)
</example>
</function>


<!--在第一个字符串查找第一个字符串,并返回第一次出现该字符的位置-->
<function name="findstr">
<!--返回值:返回第一次出现该字符串的位置-->

<!--参数:compstr要比较字符串,sourcestr 源数据-->
<pram>(compstr,sourcestr)</pram>
<example>
函数原型:|str.findstr(compstr,sourcestr)|
函数说明:|在第一个字符串查找第二个字符串,并返回第一次出现该字符串的位置|
调用例子:|str.findstr("uuuuabcdefgg","abc")
</example>
</function>


<!--根据给出的字符的位置,在字符串中找到对应的字符-->
<function name="strgetat">
<!--返回值:返回找到字符的ASCII码-->

<!--参数:str字符串,pos 要找到字符的位置-->
<pram>(str,post)</pram>
<example>
函数原型:|str.strgetat(str,post)|
函数说明:|返回找到字符的ASCII码|
调用例子:|str.strgetat("abcdefghijklmn",6)
</example>
</function>


<!--2个字符串都截取前面几个字符的进行比较-->
<function name="strcompcnt">
<!--返回值:返回整形1表示第1个字符串大于第2个字符-->
<!--返回值:返回整形-1表示第1个字符串小于第2个字符-->
<!--返回值:返回整形0表示第1个字符串等于第2个字符-->

<!--参数:str1字符串1,str2字符串2,count 截取多少位-->
<pram>(str1,str2,count)</pram>
<example>
函数原型:|str.strcompcnt(str1,str2,count)|
函数说明:|比较字符串前几位的asiic值,返回值==0表示相等,>0表示字符串1大于字符串2,反之则字符串1小于字符串2|
调用例子:|str.strcompcnt("abcdefg","bcdefghi",5)
</example>
</function>

<!--格式化字符串-->
<function name="format">
<!--返回值:返回格式化之后的字符串-->

<!--参数: 字符串 格式-->
<pram>(str)</pram>
<example>
函数原型:|str.format(字符串,...)|
函数说明:|格式化字符串,返回处理后新的字符串|
调用例子:|
str=str.format("%d%s%f",3,"bbb",1.223)
help.messagebox(str)
</example>
</function>

<!--字符串倒序-->
<function name="reverse">
<!--返回值:返回倒序后的字符串-->

<!--参数:str字符串-->
<pram>(str)</pram>
<example>
函数原型:|str.reverse(str)|
函数说明:|字符串倒序,返回处理后新的字符串|
调用例子:|help.messagebox(str.reverse("abc"))
</example>
</function>

<!--字符串替换-->
<function name="replace">
<!--返回值:返回倒序后的字符串-->

<!--参数:str字符串-->
<pram>(str1,str2,str3)</pram>
<example>
函数原型:|str.replace(str1,str2,str3)|
函数说明:|字符串替换,查找并替换字符串中指定子串,1=需要替换的源字符串 2=需要被替换的字串 3=用于替换的子串|
调用例子:|help.messagebox(str.replace("a1b1c1","1","2"))
</example>
</function>

<!--字符串分割-->
<function name="split">
<!--返回值:返回倒序后的字符串-->

<!--参数:str字符串-->
<pram>(sourcestr,splitstr,rstr)</pram>
<example>
函数原型:|str.split(sourcestr,splitstr,rstr)|
函数说明:|字符串分割,根据分隔符把源串分割,返回串是一维的字符串数组,没有找到分割符时,返回 假|
调用例子:|
var rstr
var sourcestr="AB:CD:EF:GH:JK",splitstr=":"
isok=str.split(sourcestr,splitstr,rstr)
</example>
</function>

  <!--aes加密-->
  <function name="aesencrypt">
    <!--返回值:加密后字串-->

    <!--参数:源数据,密钥-->
    <pram>(sourcestr,key)</pram>
    <example>
      函数原型:|str.aesencrypt(sourcestr,key)|
      函数说明:|通过AES加密算法加密传入源数据字串,密钥为自定义,解密需要用到,返回加密后字符串|
      调用例子:|
      var rstr,soucestr="TChello",key="qwer",derstr
      rstr=str.aesencrypt(soucestr,key)
      help.messagebox(rstr)
      derstr=str.aesdecrypt(rstr,key)
      help.messagebox(derstr) //成功解密输出"TChello"
    </example>
  </function>

  <!--aes解密-->
  <function name="aesdecrypt">
    <!--返回值:解密后字串-->

    <!--参数:源数据,密钥-->
    <pram>(sourcestr,key)</pram>
    <example>
      函数原型:|str.aesdecrypt(sourcestr,key)|
      函数说明:|通过AES解密算法解密数据,需要用于加密的密钥,返回解密后字符串|
      调用例子:|
      var rstr,soucestr="TChello",key="qwer",derstr
      rstr=str.aesencrypt(soucestr,key)
      help.messagebox(rstr)
      derstr=str.aesdecrypt(rstr,key)
      help.messagebox(derstr) //成功解密输出"TChello"
    </example>
  </function>

  <!--md5加密-->
  <function name="md5">
    <!--返回值:加密后字串-->

    <!--参数:源数据-->
    <pram>(sourcestr)</pram>
    <example>
      函数原型:|str.md5(sourcestr)|
      函数说明:|通过MD5加密算法加密传入源数据字串,该加密算法无解密算法,返回数据的MD5值|
      调用例子:|
      var rstr,sourcestr="TChello"
      rstr=str.md5(sourcestr)
      help.messagebox(rstr)
    </example>
  </function>
  

</namespace>


<!--颜色空间-->
<namespace name="color">

<!--在当前活动窗口区域内找色-->
<function name="findrectpixelcolor">
<!--返回值:给出的颜色值如果是当前活动窗口区域指定坐标点的颜色,返回真,否则返回假-->

<!--参数:x 左上角的x坐标,y 左上角的y坐标,righbottomx 右下角的x坐标,righbottomy 右下角的y坐标, color 颜色的16进制值,dir 检索方式,返回的x坐标,返回的y坐标-->
<pram>(x,y,righbottomx,righbottomy,color,dir,returnx,returny)</pram>
<example>
函数原型:|color.findrectpixelcolor(x,y,righbottomx,righbottomy,color,dir,returnx,returny)|
函数说明:|在当前活动窗口区域内找颜色点|
调用列子:|
var x,y
color.findrectpixelcolor(10,10,500,600,#12EC3D,1,x,y)
</example>
</function>


<!--抓取当前活动窗口指定坐标点的颜色-->
<function name="getpixelcolor">
<!--返回值:返回颜色信息值字符串-->

<!--参数:点的x坐标,点的y坐标-->
<pram>(x,y)</pram>
<example>
函数原型:|color.getpixelcolor(x坐标,y坐标)|
函数说明:|抓取当前活动窗口指定坐标点的颜色|
调用列子:|
strcolor=color.getpixelcolor(300,300)
</example>
</function>


<!--在当前活动窗口区域内模糊找色点-->
<function name="findrectpixelcolorex">
<!--返回值:给出的颜色值如果是当前活动窗口区域指定坐标点的颜色点,找到以字符串形式返回颜色点的X坐标和Y坐标,并以分号区分开,否则返回空-->

<!--参数:x 左上角的x坐标,y 左上角的y坐标,righbottomx 右下角的x坐标,righbottomy 右下角的y坐标,color 颜色的16进制值,相似度, dir 检索方式,返回的x坐标,返回的y坐标-->
<pram>(x,y,righbottomx,righbottomy,color,likes,dir,returnx,returny)</pram>
<example>
函数原型:|color.findrectpixelcolorex(x,y,righbottomx,righbottomy,color,likes,dir,returnx,returny)|
函数说明:|在窗口区域内模糊找图像点,找到图像点,返回的x坐标,返回的y坐标2值不为-1,反之等于-1|
调用列子:|
var x,y
color.findrectpixelcolorex(10,10,500,600,#12EC3D,0.8,1,x,y)
</example>
</function>


<!--在当前活动窗口区域内找图-->
<function name="findpic">
<!-- 返回值:图像格式正确返回true,错误返回false--> 
 
<!-- 参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,bmp位图路径,色偏,相似度,检索方式,返回找到的x坐标,y坐标--> 
<pram>(left,top,right,buttom,path,offset,sim,dir,x,y)</pram> 
<example>
函数原型:|color.findpic(left,top,right,buttom,path,offset,sim,dir,x,y)|
函数说明:|在当前活动窗口区域内找图,返回的x,y为找到图的左上角坐标| 
调用列子:|
var isfind,x,y
isfind=color.findpic(0,0,1440,900,"d:\\111.bmp",#101010,1.0,0,x,y)|
</example> 
</function>


<!--16进制颜色值的字符串转10进制整型-->
<function name="hextoint">
<!--返回值:返回的是颜色值的十进制整型数据-->

<!--参数:16进制颜色值-->
<pram>(16进制颜色值)</pram>
<example>
函数原型:|color.hextoint(16进制颜色值)|
函数说明:|16进制颜色值的字符串转10进制整型|
调用列子:|
intcolor=color.hextoint("BBEEFF")
</example>
</function>

<!--16进制颜色值得到R G B值的-->
<function name="hextorgb">
<!--返回值:把16进制的颜色值转换为RGB值,分别以R值的十进制值,G值的十进制值,B值的十进制值进行返回。-->

<!--参数:16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值-->
<pram>(16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值)</pram>
<example>
函数原型:|color.hextorgb(16进制的颜色值,R值的十进制值,G值的十进制值,B值的十进制值)|
函数说明:|16进制颜色值得到R G B值的|
调用列子:|
var R,G,B
boolcolor=color.hextorgb(#BBEEFF,R,G,B)
</example>
</function>


<!--根据R G B的值获取16进制颜色值-->
<function name="rgbtohex">
<!--返回值:返回的是颜色值的十六进制字符型数据-->

<!--参数:R值的十进制值,G值的十进制值,B值的十进制值-->
<pram>(R值的十进制值,G值的十进制值,B值的十进制值)</pram>
<example>
函数原型:|color.rgbtohex(R值的十进制值,G值的十进制值,B值的十进制值)|
函数说明:|根据R G B的值获取16进制颜色值,返回的是颜色值的十六进制字符型数据|
调用列子:|
color=color.rgbtohex(50,100,150)
</example>
</function>

<!--找多点颜色值-->
<function name="findmutilcolor">
<!--返回值:返回真或者是假-->

<!--参数:参数:左上角的x坐标,左上角的y坐标,右下角的x坐标,右下角的y坐标,第一点色,偏移点组,相似度,检索方式,返回找到的x坐标,y坐标-->
<pram>(left,top,right,buttom,Color,OffsetPoint,sim,dir,x,y)</pram>
<example>
函数原型:|color.findmutilcolor(left,top,right,buttom,Color,OffsetPoint,sim,dir,x,y)|
函数说明:|多点找色,先得到第一个颜色的坐标,之后根据偏移点组的数据判断各个点的颜色,如果条件全部符合,返回第一个颜色的坐标|
调用列子:|详情请看帮助文档
</example>
</function>

</namespace>


<!--进程命名空间-->
<namespace name="process">

<!--打开进程-->
<function name="openprocess">
<!--返回值:返回进程句柄-->

<!--参数:进程路径-->
<pram>(path,type=0)</pram>
<example>
函数原型:|process.openprocess(path,type=0)|
函数说明:|打开一个进程,0为普通模式,1为超级模式,成功返回进程句柄,失败返回0|
调用例子:|process.openprocess("d:\\MF\\wow.exe")
</example>
</function>


<!--读进程:读取一个字节的int数值 -->
<function name="readbyte">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(inputhandle,lpBaseAddress)</pram>
<example>
函数原型:|process.readbyte(inputhandle,lpBaseAddress)|
函数说明:|读取进程中一个内存地址的一个8位整型数|
调用例子:|
var handle,read
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.readbyte(handle,#4FC000)
</example>
</function>


<!--读进程:读取16位数值(int)针对2个字节的整形-->
<function name="read2byte">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(inputhandle,lpBaseAddress)</pram>
<example>
函数原型:|process.read2byte(inputhandle,lpBaseAddress)|
函数说明:|读取进程中一个内存地址的一个16位整型数|
调用例子:|
var handle,read
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.read2byte(handle,#4FC000)
</example>
</function>


<!--读进程:读取32位整形数值 int-->
<function name="read4byte">
<!--返回值:执行成功返回读到的数据,否则返回0-->

<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(inputhandle,lpBaseAddress)</pram>
<example>
函数原型:|process.read4byte(inputhandle,lpBaseAddress)|
函数说明:|读取进程中一个内存地址的一个32位整型数|
调用例子:|
var handle,read
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.read4byte(handle,#4FC000)
</example>
</function>


<!--读进程:根据地址读取指定长度的字符串,count表示字符串的长度-->
<function name="readstring">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址,count读出具体字符-->
<pram>(inputhandle,lpBaseAddress,count,type=0)</pram>
<example>
函数原型:|process.readstring(inputhandle,lpBaseAddress,count,type=0)|
函数说明:|读进程,根据地址读取指定长度的字符,类型0为ascii码,1为unicode编码|
调用例子:|
handle=process.openprocess("D:\\Test.exe")
read=process.readstring(handle,#4FC000,7)
</example>
</function>


<!--读进程:读取64位浮点值double-->
<function name="readdouble">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(inputhandle,lpBaseAddress)</pram>
<example>
函数原型:|process.readdouble(inputhandle,lpBaseAddress)|
函数说明:|读进程:读取32位浮点数值|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.readdouble(handle,#4FC000)
</example>
</function>


<!--读进程:读取32位浮点数值 float-->
<function name="readfloat">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:inputhandle 程序句柄,lpBaseAddress 要读的数据地址-->
<pram>(inputhandle,lpBaseAddress)</pram>
<example>
函数原型:|process.readfloat(inputhandle,lpBaseAddress)|
函数说明:|读进程:读取32位浮点数值|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
read=process.readfloat(handle,#4FC000)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="findbyte">
<!--返回值:返回找到第一个匹配数据地址的一个字节的int值,否则返回0-->

<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(handle,number,lpbegin,lpend)</pram>
<example>
函数原型:|process.findbyte(handle,number,lpbegin,lpend)|
函数说明:| 搜索指定8位整型值并返回第一次找到该值的地址|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
address=process.findbyte(handle,5,#4FC000,#7fffffff)
</example>
</function>

<!--搜索指定值并返回该值地址-->
<function name="find2byte">
<!--返回值:返回找到第一个匹配数据地址的int值,否则返回0-->

<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(handle,number,lpbegin,lpend)</pram>
<example>
函数原型:|process.find2byte(handle,number,lpbegin,lpend)|
函数说明:|搜索指定16位整型值并返回第一次找到该值的地址|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
address=process.find2byte(handle,5,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="find4byte">
<!--返回值:返回找到第一个匹配数据地址的整形值,否则返回0-->

<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(handle,number,lpbegin,lpend)</pram>
<example>
函数原型:|process.find4byte(handle,number,lpbegin,lpend)|
函数说明:| 搜索指定32位整型值并返回第一次找到该值的地址|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
address=process.find4byte(handle,5,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="findstring">
<!--返回值:返回找到第一个匹配数据地址的string字符串,否则返回0-->

<!--参数:inputhandle 程序句柄, str传进去的字符串,lpbegin起始地址,lpend结束地址-->
<pram>(handle,str,lpbegin,lpend,type=0)</pram>
<example>
函数原型:|process.findstring(handle,str,lpbegin,lpend,type=0)|
函数说明:| 搜索指定字符串并返回该值地址,类型0为ascii码,1为unicode编码|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
address=process.findstring(handle,"abcdefg",#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="finddouble">
<!--返回值:返回找到第一个匹配数据地址的double值,否则返回0-->

<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(handle,number,lpbegin,lpend)</pram>
<example>
函数原型:|process.finddouble(handle,number,lpbegin,lpend)|
函数说明:| 搜索指定值并返回该值地址|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
address=process.finddouble(handle,8.15,#4FC000,#7fffffff)
</example>
</function>


<!--搜索指定值并返回该值地址-->
<function name="findfloat">
<!--返回值:返回找到第一个匹配数据地址的float值,否则返回0-->

<!--参数:inputhandle 程序句柄, number数值,lpbegin起始地址,lpend结束地址-->
<pram>(handle,number,lpbegin,lpend)</pram>
<example>
函数原型:|process.findfloat(handle,number,lpbegin,lpend)|
函数说明:| 搜索指定值并返回该值地址|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
address=process.findfloat(handle,8.15,#4FC000,#7fffffff)
</example>
</function>



                                                  
<!--等待窗口初始化完成--> 
<function name="waitfor">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:inputhandle 句柄,time 时间-->
<pram>(inputhandle,time)</pram>
<example>
函数原型:|process.waitfor(inputhandle,time)|
函数说明:|等待窗口初始化完成|
调用例子:|
handle=process.openprocess("D:\\MF\\Wow.exe")
process.waitfor(handle,10000)
</example>
</function>


<!--通过窗口名获取进程的句柄--> 
<function name="getprocessid">
<!--返回值:执行成功返回进程句柄,否则返回0-->

<!--参数:应用程序的窗口名-->
<pram>(窗口名)</pram>
<example>
函数原型:|process.getprocessid(窗口名)|
函数说明:|通过窗口名获取进程的ID|
调用例子:|id=process.getprocessid("大话西游")
</example>
</function>

<!--通过进程句柄关闭指定进程--> 
<function name="closeprocess">
<!--返回值:指定进程成功关闭返回为真,否则返回为假-->

<!--参数:进程句柄-->
<pram>(进程句柄)</pram>
<example>
函数原型:|process.closeprocess(进程句柄)|
函数说明:|通过进程句柄关闭指定进程|
调用例子:|
id=process.getprocessid("大话西游")
exit=process.closeprocess(id)
</example>
</function>

<!--搜索字节数组并返回该值地址-->
<function name="findbytearray">
<!--返回值:返回找到第一个匹配整型整形值的数据地址,否则返回0-->

<!--参数:进程句柄 要查找数据的进程句柄, 字节数组,起始地址,结束地址-->
<pram>(进程句柄,字节数组,起始地址,结束地址)</pram>
<example>
函数原型:|process.findbytearray(进程句柄,字节数组,起始地址,结束地址)|
函数说明:|搜索指定字节数组数据并返回第一次找到该值的地址|
调用例子:|
var handle,addr
handle=process.openprocess("D:\\MF\\Wow.exe")
addr=process.findbytearray(handle,"10 F0 A0 04",#4FC000,#7fffffff)
</example>
</function>

<!--扩展打开进程-->
<function name="openprocessex">
<!--返回值:返回进程句柄-->

<!--参数:进程路径-->
<pram>(path,param)</pram>
<!--举列:process.openprocess("d:\\1.exe")-->
<example>
函数原型:|process.openprocessex(path,param)|
函数说明:|打开一个进程,如不需使用第二参数,第二参数可为空字符|
调用例子:|process.openprocessex("rc:B.exe","我是参数")
</example>
</function>

<!--获取进程参数-->
<function name="getparam">
<!--返回值:返回进程的句柄-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|process.getparam()|
函数说明:|获取process.getparam()打开进程传入的参数(必须在被打开进程中调用,才能正确获取)|
调用例子:|paramvalue=process.getparam()
</example>
</function>

<!-- 读取字节数组 -->
<function name="readbytearray">
<!--返回值: 读取的值-->

<!--参数:进程句柄 起始地址,个数 -->
<pram>(phandle,beginAddr,ncout)</pram>
<example>
函数原型:|process.readbytearray(phandle,beginAddr,ncout)|
函数说明:|从指定的内存地址开始读取指定个数的字节数据|
调用例子:|
phandle=process.openprocess("D:\\MF\\Wow.exe")
// 读取的字符型数据格式为"23 3F 5A" 全是16进制数据,以空格符隔开
data=process.readbytearray(phandle,#4FC000,4)
</example>
</function>

<!--获取窗口句柄-->
<function name="getwndhwnd">
<!--返回值:返回进程的句柄-->

<!--参数:无-->
<pram>(handle,type=0)</pram>
<example>
函数原型:|process.getwndhwnd(handle,type=0)|
函数说明:|通过进程相关信息获取窗口句柄,type：0 通过进程句柄,1 通过进程PID|
调用例子:|
handle=process.openprocess("d:\\MF\\wow.exe")
process.waitfor(hanlde,1000)
hwnd=process.getwndhwnd(handle)
</example>
</function>


</namespace>


<!--辅助命名空间-->
<namespace name="help">

<!--延时-->
<function name="sleep">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:million 窗口延时多少毫秒-->
<pram>(million)</pram>
<example>
函数原型:|help.sleep(million)|
函数说明:|程序延时多少毫秒再执行|
调用例子:|help.sleep(5000)
</example>
</function>


<!--消息对话框-->
<function name="messagebox">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:content 对话框的内容-->
<pram>(content,caption="TC")</pram>
<example>
函数原型:|help.messagebox(content,caption="TC")|
函数说明:|消息对话框|
调用例子:|help.messagebox("这是消息框")
</example>
</function>


<!--剪切板-->
<function name="setclip">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:content 对话框的内容-->
<pram>(content)</pram>
<example>
函数原型:|help.setclip(content)|
函数说明:|把内容写入剪切板|
调用例子:|help.setclip("aaa")
</example>
</function>


<!--粘贴-->
<function name="getclip">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|help.getclip()|
函数说明:|读取剪切板,并返回读取到的字符串|
调用例子:|help.getclip()
</example>
</function>


<!--拨mp3音乐-->
<function name="playmp">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数: mp3音乐路径以及名字-->
<pram>(mp3)</pram>
<example>
函数原型:|help.playmp(mp3)|
函数说明:|播放音乐,该函数由线程方法实现,所以不能再写入线程调用|
调用例子:|
ID = help.playmp("d:\\测试歌曲.mp3")
help.sleep(15000)
help.stopmp(ID)
</example>
</function>

<!--停止拨mp3音乐-->
<function name="stopmp">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数: mp3音乐路径以及名字-->
<pram>(ID)</pram>
<example>
函数原型:|help.stopmp(ID)|
函数说明:|停止播放音乐|
调用例子:|
ID = help.playmp("d:\\测试歌曲.mp3")
help.sleep(15000)
help.stopmp(ID)
</example>
</function>


<!-- 当前窗口截图 --> 
<function name="printscreen">
<!-- 返回值:截图成功返回真,否则返回假--> 
 
<!-- 参数:x左上角,y右上角,rightbottom左下角,rightbottom右下角--> 
<pram>(x,y,leftdown,rightbottom,path)</pram> 
<!-- 举列:help.printscreen(10,10,200,300,"c://aa.bmp")--> 
<example>
函数原型:|help.printscreen(x,y,leftdown,rightbottom,path)|
函数说明:|窗口截图|
调用例子:|help.printscreen(10,10,200,300,"c:\\aa.bmp")
</example>
</function>


<!--确认消息对话框-->
<function name="confirmationbox">
<!--返回值:0:终止, 1:取消, 2:继续, 3:忽略, 4:否, 5:确定, 6:重试, 7:是-->

<!--参数:content 对话框的内容-->
<pram>(Text,Caption,type,istop)</pram>
<example>
函数原型:|help.confirmationbox(Text,Caption,type,istop)|
函数说明:|弹出对话框,对话框类型:0:确定,1:确定--取消,2:是--否,3:是--否--取消,4:重试--取消,5:取消--重试--继续, 6:终止--重试--忽略 返回值:0:终止,1:取消,2:继续,3:忽略,4:否,5:确定,6:重试,7:是|
调用例子:|ret=help.confirmationbox("这是确认对话框","我是标题",3,true)
</example>
</function>


<!-- 在写配置文件的信息--> 
<function name="writeini">
<!-- 返回值:执行成功返回真,否则返回假--> 
 
<!-- 参数:captionname配置文件的属性名,caption 配置文件属性字段 setcaption 设置配置文件属性,filepath配置文件路径--> 
<pram>(captionname,caption,setcaption,filepath)</pram> 
<example>
函数原型:|help.writeini(captionname,caption,setcaption,filepath)|
函数说明:|在写配置文件的信息|
调用例子:|help.writeini("RealmName","East","serverGerman","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!-- 在读配置文件的信息--> 
<function name="readini">
<!-- 返回值:执行成功返回真,否则返回假,返回读出的数据 --> 
 
<!-- 参数:captionname配置文件的属性名,caption 配置文件属性字段,filepath配置文件路径--> 
<pram>(captionname,caption,filepath)</pram> 
<example>
函数原型:| help.readini(captionname,caption,filepath)|
函数说明:|读配置文件的信息,成功返回非空字符串,失败返回长度等于0的空字符串|
调用例子:|help.readini("RealmName","East","D:\\MF\\WTF\\Config.ini")
</example>
</function>


<!--随机函数-->
<function name="randto">
<!--返回值:返回随机的整形-->

<!--参数:范围-->
<pram>(begin,end)</pram>
<example>
函数原型:|randto(begin,end)|
函数说明:|得到并返回一个指定范围内随机函数|
调用例子:|number=help.randto(10,30)
</example>
</function>

<!--获取资源路径--> 
<function name="getrcpath">
<!--返回值:执行成功返回当前路径,否则返回空-->

<!--参数:空-->
<pram>(path)</pram>
<example>
函数原型:|help.getrcpath(rcpath)|
函数说明:|获取rc:(资源)路径的真实全路径,支持多路径|
调用例子:|path=help.getrcpath("rc:1.bmp")
help.messagebox(path)
</example>
</function>

<!--执行CMD命令--> 
<function name="cmd">
<!-- 返回值:执行CMD命令成功返回真--> 
 
<!-- 参数:cmdstr,isHide--> 
<pram>(cmdstr,isHide)</pram> 
<example>
函数原型:|help.cmd(cmdstr,isHide)|
函数说明:|执行CMD命令,第一个参数是命令,第二个参数表示是否隐藏,true是隐藏,false不隐藏|
调用例子:|ret=help.cmd("www.tyuyan.com",false)
</example>
</function>

<!--退出自身进程--> 
<function name="exit">
<!-- 返回值:退出成功返回真--> 
 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|help.exit()|
函数说明:|退出自身进程|
调用例子:|exit=help.exit()
</example>
</function>

<!--蜂鸣器--> 
<function name="beep">
<!-- 返回值:退出成功返回真--> 
 
<!-- 参数:频率--> 
<pram>(频率,时长)</pram> 
<example>
函数原型:|help.beep(频率,时长)|
函数说明:|控制蜂鸣器发音|
调用例子:|help.beep(1000,1000)
</example>
</function>

<!--判断插件是否注册--> 
<function name="isregister">
<!-- 返回值:注册成功返回真--> 
 
<!-- 参数:插件接口名--> 
<pram>(portname)</pram> 
<example>
函数原型:|help.isregister(portname)|
函数说明:|通过插件接口,判断插件是否注册|
调用例子:|
ret=help.isregister("dm.dmsoft")
if(ret)
help.messagebox("插件已注册")
endif
</example>
</function>

<!--注册插件--> 
<function name="regdll">
<!-- 返回值:注册成功返回真--> 
 
<!-- 参数:插件接口名--> 
<pram>(path,type)</pram> 
<example>
函数原型:|help.regdll(path,type)|
函数说明:|注册或卸载插件,第二参数为true注册插件,为false卸载插件|
调用例子:|
ret=help.regdll("c:\\dm.dll",true)
if(ret)
help.messagebox("插件注册成功")
endif
</example>
</function>

<!--最小化到托盘--> 
<function name="settray">
<!--返回值:成功返回true,失败返回false-->

<!--参数:托盘名称-->
<pram>(name,min_state=true)</pram>
<example>
函数原型:|help.settray(name,min_state=true)|
函数说明:|设置程序托盘化(任务栏右下角创建程序小图标),为真托盘化后不隐藏程序窗口,为假托盘化后隐藏程序窗口|
调用例子:|help.settray("my_tray",false)
</example>
</function>

<!--托盘提示--> 
<function name="settraytip">
<!--返回值:成功返回true,失败返回false-->

<!--参数:名称-->
<pram>(tipText,tipTime,title="",titleStyle=0)</pram>
<example>
函数原型:|help.settraytip(tipText,tipTime,title="",titleStyle=0)|
函数说明:|托盘弹出气泡提示,需先设置托盘,标题为空,不显示标题,标题图标样式在显示标题时才有效(0:无图标,1:信息图标,2:警告图标,3:错误图标,4:本程序用户图标)|
调用例子:|
help.settray("我的托盘",false)
help.settraytip("提示内容",3000)
</example>
</function>
</namespace>


<!--网络-->
<namespace name="net">

<!--向页面提交内容-->
<function name="urlsubnetrequest">
<!--返回值:提交是否成功-->

<!--参数:subpath 要提交的web地址-->
<pram>(subpath)</pram>
<example>
函数原型:|net.urlsubnetrequest(subpath)|
函数说明:|向页面提交内容|
调用列子:|net.urlsubnetrequest("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--提交一个页面并读一个页面的内容-->
<function name="urlgetnetrequest">
<!--返回值:读到的页面内容-->

<!--参数:subpath 要提交的web地址-->
<pram>(subpath,codingtype=0)</pram>
<example>
函数原型:|net.urlgetnetrequest(subpath,codingtype=0)|
函数说明:|读取页面的内容,编码类型: 0: 使用UTF-8转换 1: 使用UTF-7转换 2: 符号字符集 3: 当前线程ANSI代码页 4: Macintosh代码页 5: OEM代码页 6: ANSI字符集|
调用例子:|net.urlgetnetrequest("http://192.168.12.203/Group.aspx?group=1")
</example>
</function>

<!--初始化--> 
<function name="wsastartup">
<!--返回值:真或假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|net.wsastartup()|
函数说明:|初始化网络环境,使用网络编程函数前需要先用该函数初始化|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--关闭初始化--> 
<function name="close">
<!--返回值:真或假-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|net.close()|
函数说明:|网络程序结束后释放网络资源,关闭初始化|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--创建套接字--> 
<function name="socket">
<!--返回值:整型值-->

<!--参数:模式-->
<pram>(type)</pram>
<example>
函数原型:|net.socket(type)|
函数说明:|创建套接字,返回套接字句柄 1:创建流式套接字(TCP) 2:数据报套接字(UDP)|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--关闭套接字--> 
<function name="closesocket">
<!--返回值:真或假-->

<!--参数:套接字句柄-->
<pram>(sockhandle)</pram>
<example>
函数原型:|net.closesocket(sockhandle)|
函数说明:|网络程序结束后,关闭套接字,释放资源|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--绑定--> 
<function name="bind">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(sockhandle,port)</pram>
<example>
函数原型:|net.bind(sockhandle,port)|
函数说明:|绑定套接字,并开启指定端口|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--监听--> 
<function name="listen">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(sockhandle,ncout)</pram>
<example>
函数原型:|net.listen(sockhandle,ncout)|
函数说明:|监听套接字,指定可同时连接数|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--接受--> 
<function name="accept">
<!--返回值:新的套接字句柄-->

<!--参数:套接字句柄,端口-->
<pram>(sockhandle,rIP)</pram>
<example>
函数原型:|net.accept(sockhandle,rIP)|
函数说明:|接受一个客户端的连接,返回一个新的套接字句柄(程序结束后记得释放该套接字句柄),第二参数返回该客户端的ip地址|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--发送--> 
<function name="send">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(sockhandle,sendBuff)</pram>
<example>
函数原型:|net.send(sockhandle,sendBuff)|
函数说明:|向一个绑定的套接字发送字符串,成功返回非0值,失败返回0|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--接收--> 
<function name="recv">
<!--返回值:接收串-->

<!--参数:套接字句柄,端口-->
<pram>(sockhandle,rcveBuff)</pram>
<example>
函数原型:|net.recv(sockhandle,rcveBuff)|
函数说明:|接收一个绑定套接字发送过来的数据,成功返回非0值,失败返回0|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(1) //创建流式(TCP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
var rIP,SendTemp="客户端,你好,我是服务器",rRcvTemp
ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
net.send(ClientHandle,SendTemp)//向指定客户端发送一串字符串
net.recv(ClientHandle,rRcvTemp) //接收从客户端发送的字串
help.messagebox(rRcvTemp) //打印从客户端接收的字串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--连接--> 
<function name="connect">
<!--返回值:真或假-->

<!--参数:套接字句柄,端口-->
<pram>(sockhandle,ServerIp,ServerPor t)</pram>
<example>
函数原型:|net.connect(sockhandle,ServerIp,ServerPort)|
函数说明:|客户端向服务器发送一个连接(服务器接受连接后即可与服务器通讯),如果没有连接该函数将会等待,直到有连接过来为止|
调用例子:|
net.wsastartup() //初始化网络环境
ClientHandle=net.socket(1) //创建流式(TCP)套接字
net.connect(ClientHandle,"127.0.0.1",9999) //这里测试所以连接的是本机
var SendTemp="服务器,你好,我是客户端",rRcvTemp
net.recv(ClientHandle,rRcvTemp) //接收从服务器发送的字串
help.messagebox(rRcvTemp) //打印从服务器接收的字串
net.send(ClientHandle,SendTemp)//向指定服务器发送一串字符串
net.closesocket(ClientHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--接收来自--> 
<function name="recvfrom">
<!--返回值:接收串-->

<!--参数:套接字句柄,地址,端口-->
<pram>(sockhandle,recvbuff,recvlength,rIP,rPort)</pram>
<example>
函数原型:|net.recvfrom(sockhandle,recvbuff,recvlength,rIP,rPort)|
函数说明:|接收指定地址发送过来的数据(一般用于UDP通讯),成功返回非0值,失败返回0|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(2) //创建数据报(UDP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
var rPort
var rRcvTemp,rIP,SendTemp="你好,收到我发的消息了没"
net.sendto(ServerHandle,SendTemp,"127.0.0.1",9999) //向指定地址端发送一串字符串
net.recvfrom(ServerHandle,rRcvTemp,100,rIP,rPort) //接收数据
help.messagebox(rRcvTemp) //打印从指定地址接收的字串
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--发送到--> 
<function name="sendto">
<!--返回值:真或假-->

<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(sockhandle,sendbuff,ip,port)</pram>
<example>
函数原型:|net.sendto(sockhandle,sendbuff,ip,port)|
函数说明:|发送字符串到指定地址(一般用于UDP通讯),成功返回非0值,失败返回0|
调用例子:|
net.wsastartup() //初始化网络环境
ServerHandle=net.socket(2) //创建数据报(UDP)套接字
net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
var rPort
var rRcvTemp,rIP,SendTemp="你好,收到我发的消息了没"
net.sendto(ServerHandle,SendTemp,"127.0.0.1",9999) //向指定地址端发送一串字符串
net.recvfrom(ServerHandle,rRcvTemp,100,rIP,rPort) //接收数据
help.messagebox(rRcvTemp) //打印从指定地址接收的字串
net.closesocket(ServerHandle) //关闭套接字释放资源
net.close() //关闭网络环境释放资源
</example>
</function>

<!--域名解析--> 
<function name="dns">
<!--返回值:ip地址-->

<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>(IDN)</pram>
<example>
函数原型:|net.dns(IDN)|
函数说明:|域名解析,传入域名,返回IP地址|
调用例子:|r_ip=net.dns("www.tyuyan.com")
</example>
</function>

  <!--发送文件-->
  <function name="sendfile">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    
    <!--参数:套接字句柄,端口-->
    <pram>(sockhandle,filename)</pram>
    <example>
      函数原型:|net.sendfile(sockhandle,filename)|
      函数说明:|发送指定目录下的文件到网络,返回值类型:0 成功,-1 套接字错误,-2 发送文件路径错误,-3 网络异常|
      调用例子:|
      net.wsastartup() //初始化网络环境
      ClientHandle=net.socket(1) //创建流式(TPC)套接字
      net.connect(ClientHandle,"127.0.0.1",9999) //这里测试所以连接的是本机
      sendret=net.sendfile(ClientHandle,"E:\\1.bmp") //发送文件
      if(sendret!=0)
      help.messagebox("发送文件失败")
      endif
      net.closesocket(ClientHandle) //关闭套接字释放资源
      net.close() //关闭网络环境释放资源
    </example>
  </function>

  <!--接收文件-->
  <function name="recvfile">
    <!--返回值:成功返回0 失败返回小于0的数 -->
    
    <!--参数:套接字句柄,端口-->
    <pram>(sockhandle,filename)</pram>
    <example>
      函数原型:|net.recvfile(sockhandle,filename)|
      函数说明:|接收网络文件,并保存带指定目录下的文件,返回值类型:0 成功,-1 套接字错误,-2 发送文件路径错误,-3 网络异常|
      调用例子:|
      net.wsastartup() //初始化网络环境
      ServerHandle=net.socket(1) //创建流式(TPC)套接字
      net.bind(ServerHandle,9999) //开启了计算机的9999端口,供外界连接
      net.listen(ServerHandle,5) //监听套接字,设置可连接数为5个
      var  rIP
      ClientHandle=net.accept(ServerHandle,rIP)//这里程序会挂起等待,直到有客户端连接到来
      rRcv=net.recvfile(ClientHandle,"E:\\2.bmp") //接收从客户端发送文件并保存到E盘下2.bmp
      if(rRcv!=0)
      help.messagebox("接收文件失败")
      endif
      net.closesocket(ClientHandle) //关闭套接字释放资源
      net.closesocket(ServerHandle) //关闭套接字释放资源
      net.close() //关闭网络环境释放资源
    </example>
  </function>
  
  <!--获取错误信息--> 
<function name="getlasterror">
<!--返回值:错误值-->

<!--参数:套接字句柄,地址,端口,发送内容-->
<pram>()</pram>
<example>
函数原型:|net.getlasterror()|
函数说明:|获得最近一次失败操作的错误情况,错误值详情见帮助文档|
调用例子:|error=net.getlasterror()
</example>
</function>

<!--拨号--> 
<function name="dialing">
<!--返回值:错误值-->

<!--参数:宽带连接名,账号,密码-->
<pram>(ConnectionName,Account,Pwd)</pram>
<example>
函数原型:|net.dialing(ConnectionName,Account,Pwd)|
函数说明:|调用本地宽带连接进行拨号,拨号成功返回0|
调用例子:|
error= net.dialing("ADSL","123","123")//连接名,账号,密码根据实际情况填写
help.sleep(15000) 
net.disconnect("ADSL")//等待15秒后断开连接
</example>
</function>

<!--断开--> 
<function name="disconnect">
<!--返回值:错误值-->

<!--参数:无-->
<pram>(ConnectionName)</pram>
<example>
函数原型:|net.disconnect(ConnectionName)|
函数说明:|断开宽带连接|
调用例子:|
error= net.dialing("ADSL","123","123")//连接名,账号,密码根据实际情况填写
help.sleep(15000) 
net.disconnect("ADSL")//等待15秒后断开连接
</example>
</function>

<!--是否连接--> 
<function name="isconnect">
<!--返回值:错误值-->

<!--参数:无-->
<pram>(ConnectionName)</pram>
<example>
函数原型:|net.isconnect(ConnectionName)|
函数说明:|判断某个宽带连接是否处于连接状态,返回真表示连接,假表示未连接|
调用例子:|
if(net.isconnect("ADSL")==false) //如果未连接则连接
error= net.dialing("ADSL","123","123")//连接名,账号,密码根据实际情况填写
help.sleep(15000) 
net.disconnect("ADSL")//等待15秒后断开连接
endif
</example>
</function>

</namespace>



<!--系统空间-->
<namespace name="system">

<!--得到当前系统时间-->
<function name="getsystime">
<!--返回值:显示系统时间-->

<!--参数:无-->
<pram>(模式)</pram>
<example>
函数原型:|system.getsystime(模式)|
函数说明:|根据模式的不同,返回不同格式的系统时间字符串,更多见帮助文档|
调用列子:|system.getsystime(1)
</example>
</function>

<!--得到当前屏幕分辩率的高度-->
<function name="getscreen">
<!--返回值:显示分辨率高度-->

<!--参数:无-->
<pram>(x,y)</pram>
<example>
函数原型:|system.getscreen(x,y)|
函数说明:|得到当前屏幕分辩率的高度|
调用列子:|
var x,y
system.getscreen(x,y)
</example>
</function>

<!--得到当前系统的版本信息-->
<function name="getsysinfo">
<!--返回值:版本信息-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:| system.getsysinfo()|
函数说明:|获得并返回系统版本信息字符串,更多见帮助文档|
调用列子:|system.getsysinfo()
</example>
</function>


<!--获取当前进程的全路径--> 
<function name="getprocesspath">
<!--返回值:执行成功返回进程路径,否则返回0-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|system.getprocesspath()|
函数说明:|获取并返回当前进程程序的全路径|
调用例子:|system.getprocesspath()
</example>
</function>


<!--获取操作系统启动到现在所经过的毫秒数--> 
<function name="gettickcount">
<!-- 返回值:操作系统启动到现在所经过的毫秒数--> 
 
<!-- 参数:空--> 
<pram>()</pram> 
<example>
函数原型:|system.gettickcount()|
函数说明:|获取操作系统启动到现在所经过的毫秒数|
调用例子:|time=system.gettickcount()
</example>
</function>


<!--设置当前屏幕的分辩率-->
<function name="setscreen">
<!--返回值:返回true为修改分辨率成功,false为修改分辨率失败-->

<!--参数:无-->
<pram>(分辨率宽度,分辨率高度)</pram>
<example>
函数原型:|system.setscreen(分辨率宽度 ,分辨率高度)|
函数说明:|设置当前屏幕的分辩率|
调用列子:|system.setscreen(1024,768)
</example>
</function>

<!--获取当前路径--> 
<function name="getcurrentpath">
<!--返回值:执行成功返回当前路径,否则返回0-->

<!--参数:空-->
<pram>()</pram>
<example>
函数原型:|system.getcurrentpath()|
函数说明:|获取当前路径|
调用例子:|path=system.getcurrentpath()
</example>
</function>

<!--设置当前路径--> 
<function name="setcurrentpath">
<!--返回值:成功或者失败-->

<!--参数:路径-->
<pram>(路径)</pram>
<example>
函数原型:|system.setcurrentpath(路径)|
函数说明:|设置程序路径|
调用例子:|system.setcurrentpath("D:\\")
</example>
</function>

<!--获取系统特殊目录--> 
<function name="getsyspath">
<!--返回值:执行成功返回当前路径,否则返回0-->

<!--参数:空-->
<pram>(type)</pram>
<example>
函数原型:|system.getsyspath(type)|
函数说明:|获取系统特殊目录,有0~5六种模式获取6个不同路径,详情见帮助文档|
调用例子:|
path=system.getsyspath(0)
help.messagebox(path)
</example>
</function>

<!--创建注册表项--> 
<function name="regcreate">
<!--返回值:真或假-->

<!--参数:模式-->
<pram>(path,name)</pram>
<example>
函数原型:|system.regcreate(path,name)|
函数说明:|创建注册表项|
调用例子:|
ret=system.regcreate("HKEY_CURRENT_USER\\Software","TC你好")
//在注册表HKEY_CURRENT_USER\Software 路径下创建项,项名称为TC你好
</example>
</function>

<!--创建或修改注册表键值--> 
<function name="regcreatekey">
<!--返回值:真或假-->

<!--参数:模式-->
<pram>(path,name,vlaue,vlauetype)</pram>
<example>
函数原型:|system.regcreatekey(path,name,vlaue,vlauetype)|
函数说明:|创建,修改注册表键值,如果键值不存在则创建,存在则修改|
调用例子:|
ret=system.regcreatekey("HKEY_CURRENT_USER\\Software\\TC你好","TC很好","这里是键值的内容",0)
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下创建键值,键名为"TC很好",键值内容为"这里是键值的内容"
</example>
</function>

<!--获取注册表键名对应的键值,并返回--> 
<function name="reggetvalue">
<!--返回值:键值-->

<!--参数:模式-->
<pram>(path,name)</pram>
<example>
函数原型:|system.reggetvalue(path,name)|
函数说明:|获取注册表键名对应的键值,并返回字符串内容|
调用例子:|
ret=system.reggetvalue("HKEY_CURRENT_USER\\Software\\TC你好","TC很好")
//在注册表HKEY_CURRENT_USER\Software\TC你好 路径下查找键名为"TC很好"的键值,并返回键值
help.messagebox(ret)
</example>
</function>

<!--删除注册表项或键值--> 
<function name="regdelete">
<!--返回值:真或假-->

<!--参数:模式-->
<pram>(path,name,type)</pram>
<example>
函数原型:|system.regdelete(path,name,type)|
函数说明:|删除注册表项或键值|
调用例子:|
ret=system.regdelete("HKEY_CURRENT_USER\\Software","TC你好",0)
//在注册表HKEY_CURRENT_USER\Software 路径下删除项TC你好,模式0为删除项,1为删除键值
</example>
</function>

<!--枚举-->
<function name="enum">
<!--返回值:返回枚举到的类型值-->

<!--参数:窗口名-->
<pram>(name,type)</pram>
<example>
函数原型:|system.enum(name,type)|
函数说明:|根据类型枚举需要的类型,返回枚举后的结果,未找到返回空字符,type:0:窗口名枚举窗口句柄,1:类名枚举窗口句柄,2:进程名枚举进程句柄,3:父窗口句柄枚举子窗口句柄(参数1为空串"",将以桌面句柄为父窗口句柄)|
调用例子:|
ret=system.enum("计算器",0)
help.messagebox(ret)
</example>
</function>

<!--定时关机-->
<function name="shutdown">
<!--返回值:返回关机的时间-->

<!--参数:sec 具体的几秒后关机-->
<pram>(sec)</pram>
<example>
函数原型:|shutdown(sec)|
函数说明:|设定几秒后关机|
调用例子:|system.shutdown(5)
</example>
</function>

</namespace>



<!-- 任务的支持函数--> 
<namespace name="thread">

<!-- 任务的开启函数--> 
<function name="beginthread">
 
<!--参数:funcname要被任务的函数-->
<pram>(funcname,param)</pram> 
<example>
函数原型:|thread.beginthread(funcname,param)|
函数说明:|线程的开启函数,并将第二参数作为参数传给被调用的函数,返回线程句柄|
调用列子:|
//定义一个线程函数
function  threadfunction(param) //这里接收线程开启时传入的参数
help.messagebox("thread" + param)
return 0
endfunction
//调用线程函数方法
function start()
thread.beginthread("我的程序.threadfunction","我是参数")
help.sleep(5000)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!-- 任务的开启函数--> 
<function name="beginthreadex">
 
<!--参数:funcname要被任务的函数-->
<pram>(funcname,openparam,fundestory,closeparam)</pram> 
<example>
函数原型:|thread.beginthreadex(funcname,openparam,fundestory,closeparam)|
函数说明:|线程的扩展开启函数,返回线程句柄|
调用列子:|
//定义一个线程函数
function threadfunction(param) //这里接收线程开启时传入的参数
help.messagebox("thread" + param)
return 0
endfunction
//定义一个线程函数
function threadfundesotry(param) //这里接收线程销毁时传入的参数
help.messagebox("desotry" + param )
return 0
endfunction
//调用线程函数方法
function start()
thread.beginthreadex("我的程序.threadfunction","我是参数A","我的程序.threadfundesotry","我是参数B")
help.sleep(5000)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!-- 任务的关闭函数--> 
<function name="closethread">
 
<!--参数:handle要关闭的任务函数句柄-->
<pram>(handle,type=0)</pram> 
<example>
函数原型:|thread.closethread(handle,type=0)|
函数说明:|关闭指定句柄的线程,type：0 安全关闭,1 强制关闭,可能会引起崩溃,慎用,线程扩展开启的销毁函数也不会被调用|
调用列子:|
//定义一个线程函数
function  threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程关闭功能
function  start()
var handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
thread.closethread(handle)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>


<!--单任务的等待-->
<function name="waitforthread">
<!--返回值:返回执行状态的整形-->
 
<!--参数:handle任务句柄,sec等待几秒-->
<pram>(handle,sec)</pram> 
<example>
函数原型:|thread.waitforthread(handle,sec)|
函数说明:|线程等待,第二参数小于等于-1 时为无限等待模式|
调用列子:|
//定义一个线程函数
function  threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程等待功能
function start()
var handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
state=thread.waitforthread(handle,10)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!--关闭句柄-->
<function name="closehandle">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(handle)</pram>
<example>
函数原型:|thread.closehandle(handle)|
函数说明:|通过句柄,关闭内核对象,释放资源|
调用例子:|
var handle//一般定义成全局句柄
handle=thread.createevent(false,true,"新的事件")//设置事件为自动模式,初始时事件可用
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--任务暂停-->
<function name="suspendthread">
<!--返回值:函数执行成功,返回真-->
 
<!--参数:handle 任务句柄整形值-->
<pram>(handle)</pram> 
<example>
函数原型:|thread.suspendthread(handle)|
函数说明:|线程暂停,想关闭线程,需要先恢复线程,或者强制关闭|
调用列子:|
//定义一个线程函数
function  threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程暂停--恢复等功能
function start()
var handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
thread.suspendthread(handle)
help.sleep(2000)
thread.resumethread(handle)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!--任务恢复-->
<function name="resumethread">
<!--返回值:函数执行成功,返回真-->
 
<!--参数:handle 任务句柄整形值-->
<pram>(handle)</pram> 
<example>
函数原型:|thread.resumethread(handle)|
函数说明:|线程恢复|
调用列子:|
//定义一个线程函数
function  threadfunction()
help.messagebox("thread")
return 0
endfunction
//在这里调用线程方法函数并写入线程暂停--恢复等功能
function start()
var handle
handle=thread.beginthread("我的程序.threadfunction","")
help.sleep(2000)
thread.suspendthread(handle)
help.sleep(2000)
thread.resumethread(handle)
return 0
endfunction
//在开始点击函数中调用start()函数
</example>
</function>

<!--创建临界区-->
<function name="createcritical">
<!--返回值:true-->

<!--参数:无-->
<pram>()</pram>
<example>
函数原型:|thread.createcritical()|
函数说明:|创建临界区对象,返回临界区对象句柄,0表示创建失败|
调用例子:|
handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--进入临界区-->
<function name="entercritical">
<!--返回值:true-->

<!--参数:句柄-->
<pram>(handle)</pram>
<example>
函数原型:|thread.entercritical(handle)|
函数说明:|进入临界区,使临界区处于占用状态,让其他想进入临界区的线程挂起等待,直到离开临界区其他线程才能进入|
调用例子:|
handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--离开临界区-->
<function name="leavecritical">
<!--返回值:true-->

<!--参数:句柄-->
<pram>(handle)</pram>
<example>
函数原型:|thread.leavecritical(handle)|
函数说明:|离开临界区,使临界区处于空闲状态,让等待线程进入临界区|
调用例子:|
handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--进入临界区-->
<function name="deletecritical">
<!--返回值:true-->

<!--参数:句柄-->
<pram>(handle)</pram>
<example>
函数原型:|thread.deletecritical(handle)|
函数说明:|删除临界区对象|
调用例子:|
handle=thread.createcritical()
thread.entercritical(handle)
thread.leavecritical(handle)
thread.deletecritical(handle)
//详细使用方法参见帮助文档
</example>
</function>

<!--创建事件-->
<function name="createevent">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(bManualReset,bInitialState,eventName="")</pram>
<example>
函数原型:|thread.createevent(bManualReset,bInitialState,eventName="")|
函数说明:|创建并返回一个事件对象句柄,失败返回0|
调用例子:|
var handle//一般定义成全局句柄
handle=thread.createevent(false,true,"新的事件")//设置事件为自动模式,初始时事件可用
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--设置事件-->
<function name="setevent">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(handle)</pram>
<example>
函数原型:|thread.setevent(handle)|
函数说明:|设置事件对象可用|
调用例子:|
var handle//一般定义成全局句柄
handle=thread.createevent(false,true,"新的事件")//设置事件为自动模式,初始时事件可用
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--重置事件-->
<function name="resetevent">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(handle)</pram>
<example>
函数原型:|thread.resetevent(handle)|
函数说明:|设置事件对象不可用|
调用例子:|
var handle//一般定义成全局句柄
handle=thread.createevent(true,true,"新的事件")//设置事件为手动模式,初始时事件可用
thread.waitforthread(handle,-1)//无限等待这个事件
thread.resetevent(handle)//设置事件为不可用状态,其他在等待的线程将挂起等待
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--打开事件-->
<function name="openevent">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>(eventName)</pram>
<example>
函数原型:|thread.openevent(eventName)|
函数说明:|通过事件名打开事件,事件须存在,可以跨进程打开别的进程中创建的事件,失败返回0|
调用例子:|
var handle//一般定义成全局句柄 程序A中定义
handle=thread.createevent(false,true,"新的事件")//设置事件为自动模式,初始时事件可用

var openHnalde //程序B中定义 打开程序A中定义的事件
openHnalde=thread.openevent("新的事件")
thread.waitforthread(handle,-1)//无限等待这个事件,进入后事件状态为占用
thread.setevent(handle)//事件处理完成,设置事件为可用状态
thread.closehandle(handle)//清理内核对象,释放资源
//详细使用方法参见帮助文档
</example>
</function>

<!--获得当前句柄-->
<function name="getcurrenthandle">
<!--返回值:句柄-->

<!--参数:句柄-->
<pram>()</pram>
<example>
函数原型:|thread.getcurrenthandle()|
函数说明:|获得并返回当前线程句柄|
调用例子:|handle=thread.getcurrenthandle()
</example>
</function>

</namespace>


<!--数学命名空间-->
<namespace name="math">
<!--开方-->
<function name="sqrt">
<!--返回值:开方的结果-->

<!--参数:开方数-->
<pram>(dword)</pram>
<example>
函数原型:|math.sqrt(dword)|
函数说明:|求开方,返回数值结果|
调用例子:|dword=math.sqrt(9.0)
</example>
</function>

<!--求整型绝对值-->
<function name="abs">
<!--返回值:绝对值的结果-->

<!--参数:需要求绝对值的数-->
<pram>(dword)</pram>
<example>
函数原型:|math.abs(dword)|
函数说明:|求绝对值|
调用例子:|dword=math.abs(-1)
</example>
</function>

<!--求sin值-->
<function name="sin">
<!--返回值:绝对值的结果-->

<!--参数:需要求角度数的sin值-->
<pram>(dword)</pram>
<example>
函数原型:|math.sin(dword)|
函数说明:|求sin值|
调用例子:|dword=math.sin(55.5)
</example>
</function>


<!--求cos值-->
<function name="cos">
<!--返回值:绝对值的结果-->

<!--参数:需要求角度数的cos值-->
<pram>(dword)</pram>
<example>
函数原型:|math.cos(dword)|
函数说明:|求cos值|
调用例子:|dword=math.cos(55.5)
</example>
</function>

<!--求tan值-->
<function name="tan">
<!--返回值:绝对值的结果-->

<!--参数:需要求角度数的tan值-->
<pram>(dword)</pram>
<example>
函数原型:|math.tan(dword)|
函数说明:|求tan值|
调用例子:|dword=math.tan(55.5)
</example>
</function>

<!--求反sin值-->
<function name="asin">
<!--返回值:绝对值的结果-->

<!--参数:需要求角度数的反sin值-->
<pram>(dword)</pram>
<example>
函数原型:|math.asin(dword)|
函数说明:|求反sin值|
调用例子:|dword=math.asin(0.5)
</example>
</function>


<!--求反cos值-->
<function name="acos">
<!--返回值:绝对值的结果-->

<!--参数:需要求角度数的反cos值-->
<pram>(dword)</pram>
<example>
函数原型:|math.acos(dword)|
函数说明:|求反cos值|
调用例子:|dword=math.acos(0.5)
</example>
</function>


<!--求反tan值-->
<function name="atan">
<!--返回值:绝对值的结果-->

<!--参数:需要求角度数的反tan值-->
<pram>(dword)</pram>
<example>
函数原型:|math.atan(dword)|
函数说明:|求反tan值|
调用例子:|dword=math.atan(0.5)
</example>
</function>

<!--求浮点型绝对值-->
<function name="absdouble">
<!--返回值:绝对值的结果-->

<!--参数:需要求绝对值的数-->
<pram>(dword)</pram>
<example>
函数原型:|math.absdouble(dword)|
函数说明:|求绝对值|
调用例子:|dword=math.absdouble(-1.0)
</example>
</function>

</namespace>



<!--超级鼠标空间-->
<namespace name="drivemouse">

<!--鼠标移动坐标-->
<function name="mousemove">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:nx 鼠标绝对坐标X,ny 鼠标绝对坐标Y-->
<pram>(x,y)</pram>
<example>
函数原型:|drivemouse.mousemove(x坐标,y坐标)|
函数说明:|移动鼠标到指定的(x,y)坐标的绝对位置|
调用例子:|drivemouse.mousemove(100,200)
</example>
</function>


<!--鼠标左键按下-->
<function name="leftdown">
<!--返回值:函数执行成功,返回真-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|drivemouse.leftdown()|
函数说明:|鼠标左键按下|
调用例子:|drivemouse.leftdown()
</example>
</function>


<!--鼠标右键按下-->
<function name="rightdown">
<!--返回值:函数执行成功,返回真-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|drivemouse.rightdown()|
函数说明:|鼠标右键按下|
调用例子:|drivemouse.rightdown()
</example>
</function>

<!--鼠标中间键按下-->
<function name="middledown">
<!--返回值:函数执行成功,返回真-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|middledown()|
函数说明:|鼠标中间键按下|
调用例子:|drivemouse.middledown()
</example>
</function>

<!--鼠标左键弹起-->
<function name="leftup">
<!--返回值:函数执行成功,返回真-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|drivemouse.leftup()|
函数说明:|鼠标左键弹起|
调用例子:|drivemouse.leftup()
</example>
</function>

<!--鼠标右键弹起-->
<function name="rightup">
<!--返回值:函数执行成功,返回真-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|drivemouse.rightup()|
函数说明:|鼠标右键弹起|
调用例子:|drivemouse.rightup()
</example>
</function>

<!--鼠标中间键弹起-->
<function name="middleup">
<!--返回值:函数执行成功,返回真-->

<!--参数:-->
<pram>()</pram>
<example>
函数原型:|drivemouse.middleup()|
函数说明:|鼠标中间键弹起|
调用例子:|drivemouse.middleup()
</example>
</function>

<!--鼠标左键单击-->
<function name="leftclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标左键单击按下的次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|drivemouse.leftclick(ncount=1)|
函数说明:|鼠标左键单击|
调用例子:|drivemouse.leftclick(10)
</example>
</function>

<!--鼠标右键单击-->
<function name="rightclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标右键单击次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|drivemouse.rightclick(ncount=1)|
函数说明:|鼠标右键单击|
调用例子:|drivemouse.rightclick(10)
</example>
</function>

<!--鼠标中键单击-->
<function name="middleclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标中键单击次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|drivemouse.middleclick(ncount=1)|
函数说明:|鼠标中键单击|
调用例子:|drivemouse.middleclick(10)
</example>
</function>

<!--鼠标左键双击-->
<function name="leftdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标左键双击的次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|drivemouse.leftdoubleclick(ncount=1)|
函数说明:|鼠标左键双击|
调用例子:|drivemouse.leftdoubleclick(10)
</example>
</function>

<!--鼠标右键双击-->
<function name="rightdoubleclick">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:ncount 鼠标右键双击按下的次数-->
<pram>(ncount=1)</pram>
<example>
函数原型:|drivemouse.rightdoubleclick(ncount=1)|
函数说明:|鼠标右键双击|
调用例子:|drivemouse.rightdoubleclick(10)
</example>
</function>

<!--鼠标移动相对坐标-->
<function name="moverelative">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:nx 鼠标坐标X,ny 鼠标坐标Y-->
<pram>(x,y)</pram>
<example>
函数原型:|drivemouse.moverelative(x,y)|
函数说明:|移动鼠标到(x,y)坐标的相对的位置|
调用例子:|drivemouse.moverelative(100,200)
</example>
</function>

</namespace>


<!--超级键盘空间-->
<namespace name="drivekeyboard">
<!--键盘按下-->
<function name="keydown">
<!--返回值:函数执行成功,返回真-->

<!--参数:charbuff 要模拟键盘按下的字符-->
<pram>(charbuff)</pram>
<example>
函数原型:|drivekeyboard.keydown(charbuff)|
函数说明:|以超级模式模拟按键,键盘按下|
调用例子:|drivekeyboard.keydown(32)
</example>
</function>

<!--键盘弹起-->
<function name="keyup">
<!--返回值:函数执行成功,返回真-->

<!--参数:charbuff 要模拟键盘弹起的字符-->
<pram>(charbuff)</pram>
<example>
函数原型:|drivekeyboard.keyup(charbuff)|
函数说明:|以超级模式模拟按键,键盘弹起|
调用例子:|drivekeyboard.keyup(32)
</example>
</function>

<!--按键:按下弹起-->
<function name="keypress">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:bkeydown 键码,ncount 按键的次数-->
<pram>(bkeydown,ncount=1)</pram>
<example>
函数原型:|drivekeyboard.keypress(bkeydown,ncount=1)|
函数说明:|以超级模式模拟按键,按键:按下弹起|
调用例子:|drivekeyboard.keypress(65,10)
</example>
</function>

<!--模拟字符串-->
<function name="keystring">
<!--返回值:函数执行成功,返回真-->

<!--参数:str 要模拟键盘输入的字符串-->
<pram>(str,delay=50)</pram>
<example>
函数原型:|drivekeyboard.keystring(str,delay=50)|
函数说明:|以超级模式模拟按键,模拟发送字符串|
调用例子:|drivekeyboard.keystring("abcd")
</example>
</function>

</namespace>


<!--vip(英文)-->
<namespace name="vip">
	
<!--验证注册码-->
<function name="checkregcode">
<!--返回值:返回值:大于0,表示返回这个注册码的剩余小时时间。返回值小于0,是相应的错误信息。-->

<!--参数:用户名 注册码-->
<pram>(RegCode_ID,regcode,proname,r_info)</pram>
<example>
函数原型:|vip.checkregcode(RegCode_ID,regcode,proname,r_info)|
函数说明:|验证注册码有效期,如注册码与账号均有效,将注册码与账号绑定,并返回一个整型值,该值大于0表示注册码有效期(单位小时),小于0为错误信息,错误信息详情见帮助文档(注:该功能会员登陆可用)|
调用例子:|
var r_info
vip.checkregcode("RegCode_ID","VVWR4ZXYVI820YK7UTN7LFS082","proname",r_info)
//RegCode_ID注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
help.messagebox(r_info)
</example>
</function>

<!--解绑-->
<function name="unbindregcode">
<!--返回值:true 或 false-->

<!--参数:用户名 注册码-->
<pram>(RegCode_ID,regcode)</pram>
<example>
函数原型:|vip.unbindregcode(RegCode_ID,regcode)|
函数说明:|解绑已经绑定的注册码,成功返回真,失败返回假|
调用例子:|
vip.unbindregcode("RegCode_ID","VVWR4ZXYVI820YK7UTN7LFS082")
//RegCode_ID注册码账号,该账号是用户登录网站后,点击 个人中心 >> 注册码管理 >> 管理注册码下的 注册码账号
</example>
</function>

<!--邮件--> 
<function name="email">
<!--返回值:真或假-->

<!--参数:(发件人邮箱,收件人邮箱,标题,内容-->
<pram>(fromEmail,toEmail,title,text)</pram>
<example>
函数原型:|vip.email(fromEmail,toEmail,title,text)|
函数说明:|发送邮件,成功返回真,失败返回假)|
调用例子:|vip.email("test1@tc.com","test2@tc.com","测试","这是一封测试邮件")
</example>
</function>

<!--数据库--> 
<function name="database">
<!--返回值:错误代码-->

<!--参数:(连接字串,SQL语句,模式,查询项,返回二维数组-->
<pram>(conStr,sqlStr,rline,rtext,rerror)</pram>
<example>
函数原型:|vip.database(conStr,sqlStr,rline,rtext,rerror)|
函数说明:|连接数据库,执行一条SQL语句,支持ACCESS,MSSQL,MYSQL,返回的rtext参数是一个二维数组数据变量|
调用例子:|
var conStr="Driver=SQL SERVER;Server=127.0.0.1,1731;Database=mymssql;UID=sa;PWD=" //登陆语句,不同类型数据库略有不同,请根据自己数据库实际情况填写
sqlStr="SELECT  name, old, id ,data FROM mymssql.dbo.users"  //sql语句 每种数据库略有不同
var rline  //返回受影响的行数
var rtext,rerror //返回错误信息
vip.database(conStr,sqlStr,rline,rtext,rerror)
</example>
</function>

</namespace>


<!--数组命名空间-->
<namespace name="arraysp">
<!--获取数组的维数-->
<function name="dims">
<!--返回值:返回数组的维数-->

<!--参数:数组-->
<pram>(array)</pram>
<example>
函数原型:|arraysp.dims(array)|
函数说明:|获取并返回数组的维数|
调用例子:|
arrays=array[5]
dim = arraysp.dims(arrays)
</example>
</function>

<!--获取数组的每个维数的最大数据个数-->
<function name="size">
<!--返回值:数组的每个维数的最大数据个数-->

<!--参数:array,len1,len2,len3,len4,len5,len6,len7,len8-->
<pram>(array,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)</pram>
<example>
函数原型:|arraysp.size(array,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)|
函数说明:|获取并返回数组的每个维数的最大数据个数,最多支持8维数组|
调用例子:|
arrays=array[5]
var len1,len2
boolr=arraysp.size(arrays,len1,len2)
</example>
</function>

<!--接2个相同维数的数组,之后返回一个新的数组-->
<function name="cat">
<!--返回值:返回一个新的数组-->

<!--参数:array1,array2-->
<pram>(array1,array2)</pram>
<example>
函数原型:|arraysp.cat(array1,array2)|
函数说明:|接2个相同维数的数组,之后返回一个新的数组(最大支持2维数组)|
调用例子:|
arrays=array[2]
arrays[0]="aa"
arrays[1]="bb"
arrays1=array[1]
arrays1[0]="cc"
arrays2 = arraysp.cat(arrays,arrays1)
</example>
</function>

<!--对数组按照指定模式进行排序-->
<function name="sort">
<!--返回值:返回是否排序成功-->

<!--参数:array1-->
<pram>(array1,type=0)</pram>
<example>
函数原型:|arraysp.sort(array1,type=0)|
函数说明:|对数组按照指定模式进行排序;type 0:ansci码从小到大排序 1:ansci码从大到小排序 2:按数字从小到大排序 3:按数字从大到小排序 4:倒序,只支持一维数组|
调用例子:|
arrays=array[2]
arrays[0]="aa"
arrays[1]="bb"
arraysp.sort(arrays)
</example>
</function>

<!--匹配数组中的内容,组成一个新的数组-->
<function name="filter">
<!--返回值:返回值为一维数组-->

<!--参数:array1,filterstr,type=0-->
<pram>(array1,filterstr,type=0)</pram>
<example>
函数原型:|arraysp.filter(array1,filterstr,type=0)|
函数说明:|通过指定字符串,返回数组中所有匹配的内容,返回值为一维数组;type 0:模糊匹配 1:精确匹配|
调用例子:|
arrays=array[2]
arrays[0]="aa"
arrays[1]="bb"
array1 = arraysp.filter(arrays,"a")
</example>
</function>

<!--在数组的头部或者尾部添加内容-->
<function name="add">
<!--返回值:返回值成功或失败-->

<!--参数:array1,data,type=0-->
<pram>(array,data,type=0)</pram>
<example>
  函数原型:|arraysp.add(array,data,type=0)|
  函数说明:|在数组的头部或者尾部添加内容(暂时仅支持1维);type  0:在头部加入  1:在尾部加入,成功返回真,失败返回假|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  arraysp.add(arrays,"cc")
</example>
</function>

<!--在数组的头部或者尾部删除内容-->
<function name="delete">
<!--返回值:返回值成功或失败-->

<!--参数:array1,type=0-->
<pram>(array,type=0)</pram>
<example>
  函数原型:|arraysp.delete(array,type=0)|
  函数说明:|在数组的头部或者尾部删除内容(暂时仅支持1维);type  0:在头部加入  1:在尾部加入,成功返回真,失败返回假|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  arraysp.delete(arrays)
</example>
</function>

<!--在数组的指定位置插入一个内容-->
<function name="insertat">
<!--返回值:返回值成功或失败-->

<!--参数:array,index,data-->
<pram>(array,index,data)</pram>
<example>
  函数原型:|arraysp.insertat(array,index,data)|
  函数说明:|在数组的指定位置插入一个内容(暂时仅支持1维);index:要插入的位置 data:要插入的数据,成功返回真,失败返回假|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  arraysp.insertat(arrays,1,"fff")
</example>
</function>

<!--在数组的指定位置删除一个内容-->
<function name="deleteat">
<!--返回值:返回值成功或失败-->

<!--参数:array,index-->
<pram>(array,index)</pram>
<example>
  函数原型:|arraysp.deleteat(array,index)|
  函数说明:|在数组的指定位置删除一个内容(暂时仅支持1维);index:要删除的位置,成功返回真,失败返回假|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  arraysp.deleteat(arrays,1)
</example>
</function>

<!--清空数组的数据-->
<function name="clear">
<!--返回值:返回值成功或失败-->

<!--参数:array-->
<pram>(array)</pram>
<example>
  函数原型:|arraysp.clear(array)|
  函数说明:|清空数组的数据,成功返回真,失败返回假|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  arraysp.clear(arrays)
</example>
</function>

<!--在数组中查找指定内容-->
<function name="find">
<!--返回值:返回数组的下标-->

<!--参数:arrary1,data-->
<pram>(arrary1,data)</pram>
<example>
  函数原型:|arraysp.find(arrary1,data)|
  函数说明:|在数组中查找指定内容(暂时仅支持1维),从下标0开始查找,返回找到的第一个下标|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  aa=arraysp.find(arrays,"aa")
</example>
</function>

<!--数组重定义-->
<function name="alloc">
<!--返回值:返回新的数组-->

<!--参数:array,iscopy,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0-->
<pram>(array,iscopy,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)</pram>
<example>
  函数原型:|arraysp.alloc(array,iscopy,len1=0,len2=0,len3=0,len4=0,len5=0,len6=0,len7=0,len8=0)|
  函数说明:|重新定义数组的大小,并返回新的数组,iscopy为真改变数组大小且拷贝数据,为假只改变数组大小且不拷贝数据|
  调用例子:|
  arrays=array[2]
  arrays[0]="aa"
  arrays[1]="bb"
  aa=arraysp.alloc(arrays,false,8)
</example>
</function>



</namespace>


  <!--类型(英文)-->
<namespace name="type">
    <!--将非逻辑型转换成逻辑型-->
    <function name="cbool">
      <!--返回值:返回逻辑型-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|type.cbool(str)|
        函数说明:|转换成逻辑型,失败返回null|
        调用例子:|
        help.messagebox(type.cbool("123"))
      </example>
    </function>

    <!--将非整转换成整型-->
    <function name="cint">
      <!--返回值:返回整型数值-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|type.cint(str)|
        函数说明:|强转为整型,失败返回null,type:0表示参数1为十进制,1表示参数1为十六进制|
        调用例子:|
        help.messagebox(type.cint("123"))
      </example>
    </function>

    <!--将非浮点型转浮点型-->
    <function name="cdouble">
      <!--返回值:返回浮点型数值-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|type.cdouble(str)|
        函数说明:|强转为浮点型,失败返回null值|
        调用例子:|
        help.messagebox(type.cdouble("123.0001"))
      </example>
    </function>

    <!--将非字符串转字符型-->
    <function name="cstring">
      <!--返回值:返回字符串-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|type.cstring(str)|
        函数说明:|强转为字符型,失败返回null|
        调用例子:|
        help.messagebox(type.cstring(123.010))
      </example>
    </function>


    <!--判断字符串是否为整型-->
    <function name="isint">
      <!--返回值:返回整数-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|type.isint(str)|
        函数说明:|判断字符串是否为整型数值,type:0表示参数1为十进制,1表示参数1为十六进制|
        调用例子:|
        help.messagebox(type.isint("123123123123123123123))
      </example>
    </function>

    <!--判断字符串是否为浮点型-->
    <function name="isdouble">
      <!--返回值:返回浮点数-->

      <!--参数:str-->
      <pram>(str)</pram>
      <example>
        函数原型:|type.isdouble(str)|
        函数说明:|判断字符串是否为浮点型数值|
        调用例子:|
        help.messagebox(type.isdouble("123.001))
      </example>
    </function>
    
    <!--判断变量是否为数组-->
    <function name="isarray">
      <!--返回值:返回值成功或失败-->

      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|type.isarray(var)|
        函数说明:|判断变量是否为数组|
        调用例子:|
        a=array[2]
        a[1]="ss"
        help.messagebox(type.isarray(a),"数组")
      </example>
    </function>
    
    <!--获得变量类型-->
    <function name="vartype">
      <!--返回值:返回值成功或失败-->

      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|type.vartype(var)|
        函数说明:|获得变量类型,返回TC现在所支持的类型：int、string、double、bool、com、array、null|
        调用例子:|
        a=array[2]
        a[1]="ss"
        help.messagebox(type.vartype(a))
      </example>
    </function>
    
    <!--获取数值整型部分-->
    <function name="int">
      <!--返回值:返回整型部分值-->
      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|type.int(var)|
        函数说明:|获取小数点前面的数据,不四舍五入,返回值为整型值|
        调用例子:|
        help.messagebox(type.int(78.87))
      </example>
    </function>
    
        <!--判断变量是否为日期型-->
    <function name="isdatetime">
      <!--返回值:返回值成功或失败-->

      <!--参数:var-->
      <pram>(var)</pram>
      <example>
        函数原型:|type.isdatetime(var)|
        函数说明:|判断变量是否为日期型|
        调用例子:|
        t=datetime.now()
        help.messagebox(type.isdatetime(t),"是否为日期型")
      </example>
    </function>
    
  </namespace>

<!--datetime(英文)-->
<namespace name="datetime">
<!--当前日期-->
<function name="now">
<!--返回值:当时日期时间-->

<!--参数:无-->
<pram>()</pram>
<example>
  函数原型:|datetime.now()|
  函数说明:|获取当前系统时间|
  调用例子:|
  help.messagebox(datetime.now())
</example>
</function>

<!--指定日期-->
<function name="add">
<!--返回值:返回日期-->

<!--参数:str-->
<pram>(type,value,time1)</pram>
<example>
  函数原型:|datetime.add(type,value,time1)|
  函数说明:|获取已添加指定时间间隔的日期,type：y-年;m-月;d-日;h-时;n-分;s-秒(注:日期格式必须与示例写法一样)|
  调用例子:|
  help.messagebox(datetime.add("d",120,"2012/12/1"),"处理后的时间")
  help.messagebox(datetime.add("d",-99, "2012/12/1 11:20:30"),"处理后的时间")
</example>
</function>

<!--日期间隔-->
<function name="diff">
<!--返回值:返回整型天数-->

<!--参数:str-->
<pram>(type,time1,time2)</pram>
<example>
  函数原型:|datetime.diff(type,time1,time2)|
  函数说明:|返回两个日期之间的时间间隔,type：y-年;m-月;d-日;h-时;n-分;s-秒;w-星期(注:日期格式必须与示例写法一样)|
  调用例子:|
  help.messagebox(datetime.diff("m", "2012/12/1", "2011/12/1"),"处理后的时间")
  help.messagebox(datetime.diff("h","2012/12/1 11:20:30","2012/12/3 11:20:30"),"处理后的时间")
</example>
</function>

<!--返回日期的年-->
<function name="year">
<!--返回值:返回字符串-->

<!--参数:time-->
<pram>(time)</pram>
<example>
  函数原型:|datetime.year(time)|
  函数说明:|返回日期的年|
  调用例子:|
  at = datetime.now()
  help.messagebox(datetime.year(at),"年")
</example>
</function>

<!--返回日期的月-->
<function name="month">
<!--返回值:返回日期的月-->

<!--参数:time-->
<pram>(time)</pram>
<example>
  函数原型:|datetime.month(time)|
  函数说明:|返回日期的月|
  调用例子:|
  at = datetime.now()
  help.messagebox(datetime.month(at),"月")
</example>
</function>

<!--返回日期的日-->
<function name="day">
<!--返回值:返回日期的日-->

<!--参数:time-->
<pram>(time)</pram>
<example>
  函数原型:|datetime.day(time)|
  函数说明:|返回日期的日|
  调用例子:|
  at = datetime.now()
  help.messagebox(datetime.day(at),"日")
</example>
</function>

<!--返回日期的时-->
<function name="hour">
<!--返回值:返回日期的时-->

<!--参数:time-->
<pram>(time)</pram>
<example>
  函数原型:|datetime.hour(time)|
  函数说明:|返回日期的时|
  调用例子:|
  at = datetime.now()
  help.messagebox(datetime.hour(at),"时")
</example>
</function>

<!--返回日期的分-->
<function name="minute">
<!--返回值:返回日期的分-->

<!--参数:time-->
<pram>(time)</pram>
<example>
  函数原型:|datetime.minute(time)|
  函数说明:|返回日期的分|
  调用例子:|
  at = datetime.now()
  help.messagebox(datetime.minute(at),"分")
</example>
</function>

<!--返回日期的秒-->
<function name="second">
<!--返回值:返回日期的秒-->

<!--参数:time-->
<pram>(time)</pram>
<example>
  函数原型:|datetime.second(time)|
  函数说明:|返回日期的秒|
  调用例子:|
  at = datetime.now()
  help.messagebox(datetime.second(at),"秒")
</example>
</function>

<!--返回日期的星期-->
<function name="week">
<!--返回值:返回日期的星期几-->

<!--参数:time-->
<pram>(time)</pram>
<example>
  函数原型:|datetime.week(time)|
  函数说明:|返回星期几,0~6 表示 周日~周六|
  调用例子:|
  at = datetime.now()
  help.messagebox(datetime.week(at),"星期")
</example>
</function>

</namespace>  
  
</dll>

<dll name="controllist" path="matchDll.dll">
<!--标签控件空间-->
<namespace name="statictext">
<!--得到标签的文本-->
<function name="gettext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 标签名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|statictext.gettext(name,parentID="")|
函数说明:|获得并返回指定标签的文本|
调用例子:|statictext.gettext("标签0")
</example>
</function>

<!--设置标签的内容-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 标签名称,内容 标签内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|statictext.settext(name,content,parentID="")|
函数说明:|设置指定标签的内容|
调用例子:|statictext.settext("标签0","标签内容")
</example>
</function>

<!--设置颜色-->
<function name="setcolor">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 标签名称,内容 标签内容-->
<pram>(name,color,type=0,parentID="")</pram>
<example>
函数原型:|statictext.setcolor(name,color,type=0,parentID="")|
函数说明:|设置标签颜色,模式0设置字体颜色,模式1设置背景颜色|
调用例子:|
statictext.setcolor("标签0",#ff00ff)//设置字体颜色
statictext.setcolor("标签0",#ff00ff,1)//设置背景颜色
</example>
</function>
</namespace>



<!--编辑框控件空间-->
<namespace name="edit">
<!--得到编辑框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 编辑框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|edit.gettext(name,parentID="")|
函数说明:|获得指定编辑框的文本|
调用例子:|edit.gettext("编辑框0")
</example>
</function>

<!--设置编辑框的文本-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 编辑框名称,内容 标签内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|edit.settext(name,content,parentID="")|
函数说明:|设置指定编辑框的内容|
调用例子:|edit.settext("编辑框0","内容")
</example>
</function>

</namespace>

<!--单选框控件空间-->
<namespace name="radio">
<!--得到单选框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 标签名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|radio.gettext(name,parentID="")|
函数说明:|获得指定单选框的文本|
调用例子:|content|content=radio.gettext("单选框0")
</example>
</function>

<!--得到单选框的文本-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 单选框名称,内容 标签内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|radio.settext(name,content,parentID="")|
函数说明:|设置指定单选框的内容|
调用例子:|radio.settext("单选框0","单选框内容")
</example>
</function>

<!--得到单选框的选中状态-->
<function name="getstate">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 单选框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|radio.getstate(name,parentID="")|
函数说明:|得到指定单选框的选中状态,返回真表示选中,假表示未选中|
调用例子:|radio.getstate("单选框0")
</example>
</function>

<!--设置单选框的选中状态-->
<function name="setstate">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 单选框名称,状态 是否选中-->
<pram>(name,ischoice=true,parentID="")</pram>
<example>
函数原型:|radio.setstate(name,ischoice=true,parentID="")|
函数说明:|设置指定单选框的选中状态,真表示选中,假表示未选中|
调用例子:|radio.setstate("单选框0",true)
</example>
</function>

</namespace>

<!--复选框 命名空间-->
<namespace name="check">
<!--得到复选框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 标签名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|check.gettext(name,parentID="")|
函数说明:|获得指定复选框的文本|
调用例子:|content=check.gettext("复选框0")
</example>
</function>
<!--得到复选框的文本-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 复选框名称,内容 标签内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|check.settext(name,content,parentID="")|
函数说明:|设置指定复选框的内容|
调用例子:|check.settext("复选框0","复选框内容")
</example>
</function>
<!--得到复选框的选中状态-->
<function name="getstate">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 复选框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|check.getstate(name,parentID="")|
函数说明:|得到指定复选框的状态,返回真表示选中,假表示未选中|
调用例子:|check.getstate("复选框0")
</example>
</function>
<!--设置复选框的选中状态-->
<function name="setstate">
<!--返回值:选中返回真,否则返回假-->

<!--参数:名称 复选框名称,状态 是否选中-->
<pram>(name,ischoice=true,parentID="")</pram>
<example>
函数原型:|check.setstate(name,ischoice=true,parentID="")|
函数说明:|设置指定复选框的选中状态,真表示选中,假表示未选中|
调用例子:|check.setstate("复选框0",true)
</example>
</function>
</namespace>

<!--浏览框按钮 命名空间-->
<namespace name="browse">
<!--得到浏览框的文本-->
<function name="gettext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 浏览框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|browse.gettext(name,parentID="")|
函数说明:|获得指定浏览框的文本|
调用例子:|content=browse.gettext("浏览框0")
</example>
</function>
<!--设置浏览框的内容-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 浏览框名称,内容浏览框内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|browse.settext(name,content,parentID="")|
函数说明:|设置指定浏览框的内容|
调用例子:|browse.settext("浏览框0","浏览框内容")
</example>
</function>
</namespace>

<!--下拉框 命名空间-->
<namespace name="combo">
<!--得到指定下拉框的当前选项-->
<function name="getcursel">
<!--返回值:选项的ID号-->

<!--参数:名称 下拉框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|combo.getcursel(name,parentID="")|
函数说明:|获得选中下拉框的编号|
调用例子:|option=combo.getcursel("下拉框0")
</example>
</function>
<!--设置指定下拉框的当前选项-->
<function name="setcursel">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(name,index,parentID="")</pram>
<example>
函数原型:|combo.setcursel(name,index,parentID="")|
函数说明:|设置指定下拉框当前显示内容为下拉列表中的第几项选项|
调用例子:|combo.setcursel("下拉框0",1)
</example>
</function>
<!--得到下拉框指定序号的内容-->
<function name="gettextbycur">
<!--返回值:内容-->

<!--参数:名称 下拉框名称, 选项编号-->
<pram>(name,number,parentID="")</pram>
<example>
函数原型:|combo.gettextbycur(name,number,parentID="")|
函数说明:|得到下拉框指定选项编号的内容|
调用例子:|content=combo.gettextbycur("下拉框0",1)
</example>
</function>
<!--得到下拉框选项的长度-->
<function name="getcount">
<!--返回值:下拉框选项的长度-->

<!--参数:名称  下拉框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|combo.getcount(name,parentID="")|
函数说明:|得到并返回下拉框选项的长度|
调用例子:|length=combo.getcount("下拉框0")
</example>
</function>

<!--清空下拉框的所有内容-->
<function name="deleteall">
<!--返回值:成功或者失败-->

<!--参数:名称  下拉框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|combo.deleteall(name,parentID="")|
函数说明:|清空下拉框的所有内容|
调用例子:|combo.deleteall("下拉框0")
</example>
</function>

<!--在下拉框最后项增加内容-->
<function name="addtext">
<!--返回值:成功或者失败-->

<!--参数:名称  下拉框名称 内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|combo.addtext(name,content,parentID="")|
函数说明:|在下拉框最后项增加内容|
调用例子:|combo.addtext("下拉框0","TC")
</example>
</function>

<!--删除下拉框指定位置的文本内容-->
<function name="deletetext">
<!--返回值:成功或者失败-->

<!--参数:名称  下拉框名称 位置 -->
<pram>(name,pos,parentID="")</pram>
<example>
函数原型:|combo.deletetext(name,pos,parentID="")|
函数说明:|删除下拉框指定位置的文本内容|
调用例子:|combo.deletetext("下拉框0",4)
</example>
</function>

<!--得到下拉框的文本内容-->
<function name="gettext">
<!--返回值:得到列表框的文本内容-->

<!--参数:名称 列表框名称  序号-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|combo.gettext(name,parentID="")|
函数说明:|获得并返回下拉框当前显示的文本内容|
调用例子:|combo.gettext("下拉框0")
</example>
</function>

</namespace>



<!--分组框控件空间(中文)-->
<namespace name="group">
<!--得到分组框的标题文本-->
<function name="gettext">
<!--返回值:得到控件的标题文本-->

<!--参数:名称 分组框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|group.gettext(name,parentID="")|
函数说明:|获得指定分组框的标题文本内容|
调用例子:|group.gettext("分组框0")
</example>
</function>

<!--设置分组框的标题-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 分组框名称,标题 分组框内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|group.settext(name,content,parentID="")|
函数说明:|设置指定分组框的标题文本内容|
调用例子:|group.settext("分组框0","分组框标题")
</example>
</function>
</namespace>

<!--列表框控件空间(中文)-->
<namespace name="list">


<!--得到列表框的文本内容-->
<function name="gettext">
<!--返回值:得到列表框的文本内容-->

<!--参数:名称 列表框名称  序号-->
<pram>(name,number,parentID="")</pram>
<example>
函数原型:|list.gettext(name,number,parentID="")|
函数说明:|获得指定列表框的文本内容|
调用例子:|list.gettext("列表框0",1)
</example>
</function>

<!--追加列表框的文本内容-->
<function name="addstring">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 列表框名称,内容 列表框内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|list.addstring(name,content,parentID="")|
函数说明:|在指定列表框末尾追加文本内容|
调用例子:|list.addstring("列表框0","李四")
</example>
</function>

<!--得到列表框的选中文本-->
<function name="getchecktext">
<!--返回值:得到列表框的选中文本-->

<!--参数:名称 列表框名称 -->
<pram>(name,parentID="")</pram>
<example>
函数原型:|list.getchecktext(name,parentID="")|
函数说明:|得到列表框的选中文本|
调用例子:|list.getchecktext("列表框0")
</example>
</function>

<!--得到列表框选中内容的序号-->
<function name="getcursel">
<!--返回值:得到列表框选中内容的序号-->

<!--参数:名称 列表框名称 -->
<pram>(name,parentID="")</pram>
<example>
函数原型:|list.getcursel(name,parentID="")|
函数说明:|得到列表框选中内容的序号|
调用例子:|number=list.getcursel("列表框0")
</example>
</function>

<!--得到列表框的文本个数-->
<function name="getcount">
<!--返回值:返回列表框中内容的个数-->

<!--参数:名称 列表框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|list.getcount(name,parentID="")|
函数说明:|获得指定列表框的中内容的个数|
调用例子:|list.getcount("列表框0")
</example>
</function>

<!--清空列表框的所有内容-->
<function name="deleteall">
<!--返回值:成功或者失败-->

<!--参数:名称  列表框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|list.deleteall(name,parentID="")|
函数说明:|清空列表框的所有内容|
调用例子:|list.deleteall("列表框0")
</example>
</function>
<!--删除列表框的指定位置内容-->
<function name="deletetext">
<!--返回值:成功或者失败-->

<!--参数:名称  列表框名称 位置-->
<pram>(name,pos,parentID="")</pram>
<example>
函数原型:|list.deletetext(name,pos,parentID="")|
函数说明:|删除列表框的指定位置内容|
调用例子:|list.deletetext("列表框0",5)
</example>
</function>

<!--设置指定列表框当前的选项-->
<function name="setcursel">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 下拉框名称,内容下拉框内容-->
<pram>(id,index,parentID="")</pram>
<example>
函数原型:|list.setcursel(id,index,parentID="")|
函数说明:|设置下拉框当前选中第几项|
调用例子:|list.setcursel("列表框0",1)
</example>
</function>

<!--插入文本-->
<function name="inserttext">
<!--返回值:成功或失败-->

<!--参数:控件名称,内容,序号-->
<pram>(id,text,index,parentID="")</pram>
<example>
函数原型:|list.inserttext(id,text,index,parentID="")|
函数说明:|指定序号插入文本|
调用例子:|list.inserttext("列表框0","TC简单开发",1)
</example>
</function>

</namespace>


<!--日期框控件空间(中文)-->
<namespace name="date">
<!--得到日期框的文本-->
<function name="gettext">
<!--返回值:得到控件的文本-->

<!--参数:名称 日期框名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|date.gettext(name,parentID="")|
函数说明:|获得指定日期框的日期文本内容|
调用例子:|date.gettext("日期框0")
</example>
</function>

<!--设置日期框的内容-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 日期框控件名称,标题 日期框内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|date.settext(name,content,parentID="")|
函数说明:|设置指定日期框控件的文本内容|
调用例子:|date.settext("日期框0","2011-5-5")
</example>
</function>
</namespace>

<!--图片框控件空间(中文)-->
<namespace name="picture">
<!--设置图片框控件的图片-->
<function name="setpicture">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 图片框控件名称,图片路径 -->
<pram>(name,path,parentID="")</pram>
<example>
函数原型:|picture.setpicture(name,path,parentID="")|
函数说明:|设置指定图片框控件的图片|
调用例子:|picture.setpicture("图片框0","D:\\test.bmp")
</example>
</function>
</namespace>

<!--进度条控件空间(中文)-->
<namespace name="progress">
<!--得到进度条的进度-->
<function name="getprogress">
<!--返回值:得到进度条的进度-->

<!--参数:名称进度条名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|progress.getprogress(name,parentID="")|
函数说明:|获得指定进度条的进度|
调用例子:|progress.getprogress("进度条0")
</example>
</function>

<!--设置进度条的进度-->
<function name="setprogress">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 进度条控件名称,进度-->
<pram>(name,进度,parentID="")</pram>
<example>
函数原型:|progress.setprogress(name,进度,parentID="")|
函数说明:|设置指定进度条的进度|
调用例子:|progress.setprogress("进度条0",10)
//进度的值不能小于0和大于99
</example>
</function>
</namespace>

<!--按钮空间(中文)-->
<namespace name="button">
<!--得到标签的文本-->
<function name="gettext">
<!--返回值:得到按钮的文本-->

<!--参数:名称 标签名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|button.gettext(name,parentID="")|
函数说明:|获得指定按钮的文本|
调用例子:|button.gettext("按钮0")
</example>
</function>

<!--设置按钮的文本-->
<function name="settext">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 按钮名称,内容 按钮内容-->
<pram>(name,content,parentID="")</pram>
<example>
函数原型:|button.settext(name,content,parentID="")|
函数说明:|设置指定按钮的内容|
调用例子:|button.settext("按钮0","按钮内容")
</example>
</function>

<!--设置按钮的背景图-->
<function name="setbkimage">
<!--返回值:执行成功返回真,否则返回假-->

<!--参数:名称 按钮名称,内容 按钮内容-->
<pram>(名称,图片路径,图片状态=4,父窗口名称="")</pram>
<example>
函数原型:|button.setbkimage(名称,图片路径,图片状态=4,父窗口名称="")|
函数说明:|设置指定按钮的背景图片|
调用例子:|button.setbkimage("按钮0","rc:button.bmp")
</example>
</function>
</namespace>


<!--控件通用空间(中文)-->
<namespace name="control">
<!--设置控件是否有效-->
<function name="enable">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(name,istrue,parentID="")</pram>
<example>
函数原型:|control.enable(name,istrue,parentID="")|
函数说明:|设置指定控件是否有效,真为有效,假则为无效|
调用例子:|control.enable("按钮0",true)
</example>
</function>

<!--设置控件是否可见-->
<function name="show">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(name,istrue,parentID="")</pram>
<example>
函数原型:|control.show(name,istrue,parentID="")|
函数说明:|设置指定控件是否可见,真为可见,假则为不可见|
调用例子:|control.show("按钮0",true)
</example>
</function>


<!--设置控件位置-->
<function name="setpos">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(name,x,y,width,height,type,parentID="")</pram>
<example>
函数原型:|control.setpos(name,x,y,width,height,type,parentID="")|
函数说明:|设置控件位置及大小,type:0:设置位置与大小,1:只设置位置(忽略大小参数),2:只设置大小(忽略位置参数)|
调用例子:|ismove=control.setpos("按钮0",100,200,50,80,1)
</example>
</function>

<!--创建控件-->
<function name="create">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(controlType,controlID,Text,x,y,width,height,attribute,event, parentHandle=0)</pram>
<example>
函数原型:|control.create(controlType,controlID,Text,x,y,width,height,attribute,event, parentHandle=0)|
函数说明:|动态创建控件,动态参数较多详细举例见帮助文档
调用例子:|isok=control.create("statictext","标签999","我的控件",10,170,65,28,"背景颜色:14215660","点击:空间名.事件响应函数")

</example>
</function>

<!--打开窗口-->
<function name="openwindow">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(ID,visible=true)</pram>
<example>
函数原型:|control.openwindow(ID,visible=true)|
函数说明:|打开指定窗口名的子窗口,一般用在TC多界面项目中,返回窗口句柄|
调用例子:|winHwnd=control.openwindow("子界面")

</example>
</function>

<!--关闭窗口-->
<function name="closewindow">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(ID,rtype)</pram>
<example>
函数原型:|control.closewindow(ID,rtype)|
函数说明:|关闭窗口,点击类型,模态窗口模式下才用得到:用户自定义的数值(系统保留 0 右上角关闭按钮 -1 已打开,-2 错误的ID,-3 主窗口不能模态创建)|
调用例子:|
//主界面
ret=control.domodal("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
if(ret==1)
//你要执行的操作
endif
if(ret==2)
//你要执行的操作
endif

//子界面
//按钮1
isok=control.closewindow("子界面",1)//点击这个按钮会关闭窗口
//按钮2
isok=control.closewindow("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--模态窗口-->
<function name="domodal">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(ID)</pram>
<example>
函数原型:|control.domodal(ID)|
函数说明:|打开一个模态窗口,调用该函数后程序会挂起,直到它打开的窗口被关闭|
调用例子:|
//主界面
ret=control.domodal("子界面")//这里会卡出,弹出子界面关闭操作,等待返回值
if(ret==1)
//你要执行的操作
endif
if(ret==2)
//你要执行的操作
endif

//子界面
//按钮1
isok=control.closewindow("子界面",1)//点击这个按钮会关闭窗口
//按钮2
isok=control.closewindow("子界面",2)//点击这个按钮会关闭窗口
</example>
</function>

<!--获得句柄-->
<function name="gethandle">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(ID,parentID="")</pram>
<example>
函数原型:|control.gethandle(ID,parentID="")|
函数说明:|获得控件句柄|
调用例子:|handle=control.gethandle("标签0")
</example>
</function>

<!--destroy-->
<function name="destroy">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(ID,parentID="")</pram>
<example>
函数原型:|control.destroy(ID,parentID="")|
函数说明:|销毁控件|
调用例子:|control.destroy("标签0")
</example>
</function>

<!--获得子界句柄-->
<function name="getchildhwnd">
<!--返回值:成功或失败-->

<!--参数:名称 获得子界句柄-->
<pram>(子窗口名)</pram>
<example>
函数原型:|control.getchildhwnd(子窗口名)|
函数说明:|获取指定子窗口的句柄|
调用例子:|control.getchildhwnd("子窗口")
</example>
</function>

</namespace>

<!--选项卡空间(中文)-->
<namespace name="tab">
<!--激活指定的Tab控件-->
<function name="active">
<!-- 返回值：成功或者失败-->

<!--参数：选项卡的名称,Tal序号-->
<pram>(name,number,parentID="")</pram>
<example>
函数原型:|tab.active(name,number,parentID="")|
函数说明:|设置指定的选项卡哪个Tab页面被激活|
调用例子:|
//激活选项卡0的第2个tab页面
tab.active("选项卡0",1)
</example>
</function>

<!--得到选项卡当前选中选项的索引-->
<function name="getcursel">
<!-- 返回值：成功或者失败-->

<!--参数：选项卡的名称,Tab序号-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|tab.getcursel(name,parentID="")|
函数说明:|得到选项卡当前选中选项的索引|
调用例子:|
index=tab.getcursel("选项卡0")
help.messagebox(index)
</example>
</function>

<!--得到选项卡当前分页框个数-->
<function name="getcount">
<!-- 返回值：成功或者失败-->

<!--参数：选项卡的名称,Tab序号-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|tab.getcount(name,parentID="")|
函数说明:|得到选项卡当前分页框个数|
调用例子:|
num=tab.getcount("选项卡0")
help.messagebox(num)
</example>
</function>

<!--获得句柄-->
<function name="getpagehandle">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 真假-->
<pram>(ID,index,parentID="")</pram>
<example>
函数原型:|control.getpagehandle(ID,index,parentID="")|
函数说明:|获得选项卡分页句柄|
调用例子:|handle=tab.getpagehandle("选项卡0",0) //获得主窗口上"选项卡0"的第一个分页句柄
</example>
</function>

</namespace>

<!--定时器空间(中文)-->
<namespace name="timer">
<!--注册一个定时器-->
<function name="register">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 毫秒时间-->
<pram>(name,timems,parentID="")</pram>
<example>
函数原型:|timer.register(name,timems,parentID="")|
函数说明:|注册一个指定的定时器,每隔多少毫秒执行一次定时器的方法|
调用例子:|
//定时器1每隔1秒执行一次
timer.register("定时器0",1000)
</example>
</function>

<!--销毁定时器-->
<function name="kill">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|timer.kill(name,parentID="")|
函数说明:|销毁一个指定的定时器|
调用例子:|timer.kill("定时器0")
</example>
</function>
</namespace>


<!--热键空间(中文)-->
<namespace name="hotkey">
<!--注册一个热键-->
<function name="register">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 -->
<pram>(name,parentID="")</pram>
<example>
函数原型:|hotkey.register(name,parentID="")|
函数说明:|注册一个指定的热键|
调用例子:|hotkey.register("热键0")
</example>
</function>

<!--销毁热键-->
<function name="destroy">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(name,parentID="")</pram>
<example>
函数原型:|hotkey.destroy(name,parentID="")|
函数说明:|销毁一个指定的热键|
调用例子:|hotkey.destroy("热键0")
</example>
</function>

<!--获得热键-->
<function name="get">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(controlname,retvk,retmod,parentID="")</pram>
<example>
函数原型:|hotkey.get(controlname,retvk,retmod,parentID="")|
函数说明:|获得指定热键当前生效的热键键值组合,retvk(键盘上一些数字和字母或方向键的按键码),retmod包括(Shift,Ctrl,Alt)|
调用例子:|
var retvk,retmod
ret1=hotkey.get("热键0",retvk,retmod)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用hotkey.set
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用hotkey.set达到保存用户上次设置热键的效果
ret2=hotkey.set("热键0",retvk,retmod)
</example>
</function>

<!--设置热键-->
<function name="set">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称-->
<pram>(controlname,vk,mod,parentID="")</pram>
<example>
函数原型:|hotkey.set(controlname,vk,mod,parentID="")|
函数说明:|设置热键启动的方式|
调用例子:|
var retvk,retmod
ret1=hotkey.get("热键0",retvk,retmod)
//根据获得的热键键值再设置热键,举例为了简单,所以又直接调用hotkey.set
//实际上可以把返回键码和返回功能键的值写入配置文件,下次打开程序读取配置文件,再调用hotkey.set达到保存用户上次设置热键的效果
ret2=hotkey.set("热键0",retvk,retmod)
</example>
</function>

</namespace>


<!--滑块空间(中文)-->
<namespace name="slide">
<!--设置滑块的位置-->
<function name="setpos">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称  位置-->
<pram>(name,pos,parentID="")</pram>
<example>
函数原型:|slide.setpos(name,pos,parentID="")|
函数说明:|设置滑块的位置|
调用例子:|slide.setpos("滑块0",12)
</example>
</function>

<!--得到滑块的位置-->
<function name="getpos">
<!--返回值:成功或失败-->

<!--参数:名称 控件名称 -->
<pram>(name,parentID="")</pram>
<example>
函数原型:|slide.getpos(name,parentID="")|
函数说明:|得到并返回滑块的位置|
调用例子:|pos=slide.getpos("滑块0")
</example>
</function>
</namespace>

<!--网页操作-->
<namespace name="web">

<!--打开网页-->
<function name="go">
<!--返回值:真：成功 假：失败-->

<!--参数:id:  控件名称  url 网页链接-->
<pram>(id,url,parentID="")</pram>
<example>
函数原型:|web.go(id,url,parentID="")|
函数说明:|打开一个URL网页链接|
调用列子:|web.go("浏览器0","www.tyuyan.com")
</example>
</function>

<!-- 判断网页是否加载完成 -->
<function name="loadcomplete">
<!--返回值:真：成功 假：失败-->

<!--参数:id:  控件名称 -->
<pram>(id,parentID="")</pram>
<example>
函数原型:|web.loadcomplete(id,parentID="")|
函数说明:|判断当前网页是否加载完成,返回真表示完成,假表示未完成|
调用列子:|web.loadcomplete("浏览器0")
</example>
</function>

<!-- 获取当前页的标题 -->
<function name="gettitle">
<!--返回值:: 标题-->

<!--参数: id:  控件名称  -->
<pram>(id,parentID="")</pram>
<example>
函数原型:|web.gettitle(id,parentID="")|
函数说明:|获取当前页的标题|
调用列子:|titile = web.gettitle("浏览器0")
</example>
</function>

<!-- 网页前进 -->
<function name="forward">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称 -->
<pram>(id,parentID="")</pram>
<example>
函数原型:|web.forward(id,parentID="")|
函数说明:|当前标签页网页前进一步|
调用列子:|web.forward("浏览器0")
</example>
</function>

<!-- 网页后退 -->
<function name="back">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称 -->
<pram>(id,parentID="")</pram>
<example>
函数原型:|web.back(id,parentID="")|
函数说明:|当前标签页网页后退一步|
调用列子:|web.back("浏览器0")
</example>
</function>

<!-- 网页刷新 -->
<function name="refresh">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称 -->
<pram>(id,parentID="")</pram>
<example>
函数原型:|web.refresh(id,parentID="")|
函数说明:|刷新当前的网页|
调用列子:|web.refresh("浏览器0")
</example>
</function>

<!-- 鼠标移动消息 -->
<function name="moveto">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称  x 窗口x坐标  y 窗口y坐标-->
<pram>(id,x,y,parentID="")</pram>
<example>
函数原型:|web.moveto(id,x,y,parentID="")|
函数说明:|向当前标签的网页发送一个鼠标移动到(x,y)坐标的消息|
调用列子:|web.moveto("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键按下 -->
<function name="leftdown">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称  x 窗口x坐标  y 窗口y坐标  -->
<pram>(id,x,y,parentID="")</pram>
<example>
函数原型:|web.leftdown(id,x,y,parentID="")|
函数说明:|向当前网页发送一个鼠标左键按下消息|
调用列子:|web.leftdown("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键弹起 -->
<function name="leftup">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称   x 窗口x坐标  y 窗口y坐标  -->
<pram>(id,x,y,parentID="")</pram>
<example>
函数原型:|web.leftup(id,x,y,parentID="")|
函数说明:|向当前网页发送一个鼠标左键弹起消息|
调用列子:|web.leftup("浏览器0",100,200)
</example>
</function>

<!-- 左键单击事件 -->
<function name="leftclick">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称   x 窗口x坐标  y 窗口y坐标 -->
<pram>(id,x,y,parentID="")</pram>
<example>
函数原型:|web.leftclick(id,x,y,parentID="")|
函数说明:|向当前的网页发送一个左键单击消息|
调用列子:|web.leftclick("浏览器0",100,200)
</example>
</function>

<!-- 鼠标左键双击 -->
<function name="leftdoubleclick">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称 x 窗口x坐标  y 窗口y坐标 -->
<pram>(id,x,y,parentID="")</pram>
<example>
函数原型:|web.leftdoubleclick(id,x,y,parentID="")|
函数说明:|向当前网页发送一个鼠标左键双击消息|
调用列子:|web.leftdoubleclick("浏览器0",10,20)
</example>
</function>

<!-- 键盘按下消息 -->
<function name="keydown">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称  keycode 键码-->
<pram>(id,keycode,parentID="")</pram>
<example>
函数原型:|web.keydown(id,keycode,parentID="")|
函数说明:|向当前的网页发送一个键盘按下消息|
调用列子:|web.keydown("浏览器0",66)
</example>
</function>

<!-- 键盘弹起消息 -->
<function name="keyup">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称  keycode 键码-->
<pram>(id,keycode,parentID="")</pram>
<example>
函数原型:|web.keyup(id,keycode,parentID="")|
函数说明:|向当前标签的网页发送一个键盘弹起消息|
调用列子:|web.keyup("浏览器0",66)
</example>
</function>

<!-- 键盘按键消 -->
<function name="keypress">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称  keycode 键码-->
<pram>(id,keycode,parentID="")</pram>
<example>
函数原型:|web.keypress(id,keycode,parentID="")|
函数说明:|向当前标签网页发送一个按键消息|
调用列子:|web.keypress("浏览器0",66)
</example>
</function>

<!--  发送文本内容 -->
<function name="sendstring">
<!--返回值:bool：true 成功  false 失败-->

<!--参数:id:  控件名称  key文本消息-->
<pram>(id,keystring,parentID="")</pram>
<example>
函数原型:|web.sendstring(id,keystring,parentID="")|
函数说明:|向当前标签网页发送字符串文本消息|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
web.sendstring("浏览器0","TC简单开发")
</example>
</function>

<!-- 获取网页元素指定属性的信息 -->
<function name="htmlget">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  type:网页元素属性类型 sub:网页元素特征字符串 -->
<pram>(id,type,sub,length=1024,parentID="")</pram>
<example>
函数原型:|web.htmlget(id,type,sub,length=1024,parentID="")|
函数说明:|获取网页元素指定属性的信息,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
//详细介绍请查看帮助文档
web.go("浏览器0","www.tyuyan.com")
text=web.htmlget("浏览器0","value","id:su")
help.messagebox(text)
</example>
</function>

<!-- 点击网页中指定特征的按钮或链接 -->
<function name="htmlclick">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  sub:网页元素特征字符串 -->
<pram>(id,sub,parentID="")</pram>
<example>
函数原型:|web.htmlclick(id,sub,parentID="")|
函数说明:|点击网页中指定特征的按钮或链接,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
web.htmlclick("浏览器0","id:su")
</example>
</function>

<!-- 向网页中指定特征的文本框输入内容 -->
<function name="htmlinput">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  text:文本内容  sub:网页元素特征字符串 -->
<pram>(id,text,sub,parentID="")</pram>
<example>
函数原型:|web.htmlinput(id,text,sub,parentID="")|
函数说明:|向网页中指定特征的文本框输入内容,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
web.htmlinput("浏览器0","TC简单开发","id:kw")
web.htmlclick("浏览器0","id:su")
</example>
</function>

<!-- 选择网页中的下拉框 -->
<function name="htmlselect">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  seltext:需要选中的下拉选项的值  sub:网页元素特征字符串 -->
<pram>(id,seltext,sub,parentID="")</pram>
<example>
函数原型:|web.htmlselect(id,seltext,sub,parentID="")|
函数说明:|选择网页中的下拉框,支持的特征有 id:标示符 name:名称 tag:标签 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|web.htmlselect("浏览器0","北京","id:省份")
</example>
</function>

<!-- 选择/清除网页中的单选框或复选框 -->
<function name="htmlcheck">
<!--返回值:字符串类型,获取到的网页元素的值-->

<!-- 参数:id:  控件名称  ischeck:选中或不选中  sub:网页元素特征字符串 -->
<pram>(id,ischeck,sub,parentID="")</pram>
<example>
函数原型:|web.htmlcheck(id,ischeck,sub,parentID="")|
函数说明:|选择/清除网页中的单选框或复选框,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型 value:值 index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|web.htmlcheck("浏览器0",true,"id:tc")
</example>
</function>

<!-- 得到当前网页的地址 -->
<function name="geturl">
<!--返回值:字符串类型 :网页的地址-->

<!-- 参数:id:  控件名称   -->
<pram>(id,parentID="")</pram>
<example>
函数原型:|web.geturl(id,parentID="")|
函数说明:|得到当前网页的地址|
调用列子:|
url = web.geturl("浏览器0")
help.messagebox(url)
</example>
</function>

<!-- 得到当前网页的句柄 -->
<function name="gethwnd">
<!--返回值:窗口句柄-->

<!-- 参数:id:  控件名称   -->
<pram>(id,parentID="")</pram>
<example>
函数原型:|web.gethwnd(id,parentID="")|
函数说明:|得到当前网页的句柄|
调用列子:|hwnd = web.gethwnd("浏览器0")
</example>
</function>

<!-- 删除IE临时文件 -->
<function name="cleartemp">
<!--返回值:真：成功   假：失败-->

<!-- 参数: -->
<pram>()</pram>
<example>
函数原型:|web.cleartemp()|
函数说明:|删除IE临时文件|
调用列子:|web.cleartemp()
</example>
</function>

<!-- 删除IE的Cookie -->
<function name="clearcookie">
<!--返回值:真：成功   假：失败-->

<!-- 参数:-->
<pram>()</pram>
<example>
函数原型:|web.clearcookie()|
函数说明:|删除IE的Cookie|
调用列子:|web.clearcookie()
</example>
</function>

<!-- 在当前网页中执行一段JS脚本 -->
<function name="runjs">
<!--返回值:执行结果-->

<!-- 参数: 控件名 js脚本-->
<pram>(id,js脚本,parentID="")</pram>
<example>
函数原型:|web.runjs(id,js脚本,parentID="")|
函数说明:|在当前网页中执行一段JS脚本,获取返回值|
调用列子:|ret = web.runjs("浏览器0","var t=document.title;return t;")
</example>
</function>

<!-- 设置滚动条位置 -->
<function name="setscollpos">
<!--返回值:真：成功   假：失败-->

<!-- 参数: -->
<pram>(id,xPos,yPos,parentID="")</pram>
<example>
函数原型:|web.setscollpos(id,xPos,yPos,parentID="")|
函数说明:|设置滚动条x,y位置|
调用列子:|web.setscollpos("浏览器0",10,10)
</example>
</function>

<!-- 提交表单 -->
<function name="postform">
<!--返回值:成功或者失败-->

<!-- 参数:id:  控件名称  sub:网页元素特征字符串 -->
<pram>(id,sub,父窗口名称="")</pram>
<example>
函数原型:|web.postform(id,sub,父窗口名称="")|
函数说明:|提交网页中的表单,支持的特征有 id:标示符 name:名称 class:类名 tag:标签 type:类型  index:索引号 text:文本 frame:框架 ,多个特征用&amp;隔开|
调用列子:|
web.go("浏览器0","www.tyuyan.com")
web.postform("浏览器0","id:form1")
</example>
</function>

</namespace>


<!--表格控件-->
<namespace name="grid">
<!--表格大小-->
<function name="getsize">
<!--返回值:成功或失败-->

<!--参数:控件名称,返回行.返回列-->
<pram>(Control_ID,r_row,r_col,parentID="")</pram>
<example>
函数原型:|grid.getsize(Control_ID,r_row,r_col,parentID="")|
函数说明:|获取表格大小(行,列的个数)|
调用例子:|r_row, r_col
grid.getsize("表格0",r_row, r_col)
</example>
</function>

<!--设置大小-->
<function name="setsize">
<!--返回值:成功或失败-->

<!--参数:控件名称,长.宽-->
<pram>(Control_ID,row,col,parentID="")</pram>
<example>
函数原型:|grid.setsize(Control_ID,row,col,parentID="")|
函数说明:|设置表格大小(行,列的个数)|
调用例子:|grid.setsize("表格0",100,100)
</example>
</function>

<!--固定项大小-->
<function name="getfixedsize">
<!--返回值:成功或失败-->

<!--参数:控件名称,返回长.返回宽-->
<pram>(Control_ID,r_row,r_col,parentID="")</pram>
<example>
函数原型:|grid.getfixedsize(Control_ID,r_row,r_col,parentID="")|
函数说明:|获得固定项大小(行,列的个数)|
调用例子:|
var r_row, r_col
grid.getfixedsize("表格0",r_row, r_col)
</example>
</function>

<!--设置固定项大小-->
<function name="setfixedsize">
<!--返回值:成功或失败-->

<!--参数:控件名称,长.宽-->
<pram>(Control_ID,row,col,parentID="")</pram>
<example>
函数原型:|grid.setfixedsize(Control_ID,row,col,parentID="")|
函数说明:|设置固定项大小(行,列的个数)|
调用例子:|grid.setfixedsize("表格0",100,100)
</example>
</function>

<!--获得内容-->
<function name="getcontent">
<!--返回值:内容-->

<!--参数:控件名称,行号.列号-->
<pram>(Control_ID,row,col,parentID="")</pram>
<example>
函数原型:|grid.getcontent(Control_ID,row,col,parentID="")|
函数说明:|获得表格某一项的数据内容|
调用例子:|
var content
content=grid.getcontent("表格0",1,1)
help.messagebox(content)
</example>
</function>

<!--设置内容-->
<function name="setcontent">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号-->
<pram>(Control_ID,row,col,content,parentID="")</pram>
<example>
函数原型:|grid.setcontent(Control_ID,row,col,content,parentID="")|
函数说明:|设置表格某一项的数据内容|
调用例子:|grid.setcontent("表格0",1,1,"TC简单开发")
</example>
</function>

<!--获得类型-->
<function name="gettype">
<!--返回值:获得的类型-->

<!--参数:控件名称,行号.列号-->
<pram>(Control_ID,row,col,parentID="")</pram>
<example>
函数原型:|grid.gettype(Control_ID,row,col,parentID="")|
函数说明:|获得表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|
var type
type=grid.gettype("表格0",1,1)
</example>
</function>

<!--设置类型-->
<function name="settype">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号,类型-->
<pram>(Control_ID,row,col,type,parentID="")</pram>
<example>
函数原型:|grid.settype(Control_ID,row,col,type,parentID="")|
函数说明:|设置表格某一项的数据的类型0:默认,1:只读,2:下拉框,3:复选框,4:日期框,5:数字框|
调用例子:|grid.settype("表格0",1,1,1)
</example>
</function>

<!--插入行-->
<function name="insertrow">
<!--返回值:成功或失败-->

<!--参数:控件名称,内容,行号-->
<pram>(Control_ID,content,row,parentID="")</pram>
<example>
函数原型:|grid.insertrow(Control_ID,content,row,parentID="")|
函数说明:|插入行|
调用例子:|grid.insertrow("表格0","TC简单开发",1)
</example>
</function>


<!--清空-->
<function name="deleteall">
<!--返回值:成功或失败-->

<!--参数:控件名称-->
<pram>(Control_ID,parentID="")</pram>
<example>
函数原型:|grid.deleteall(Control_ID,parentID="")|
函数说明:|清空表格控件所有项|
调用例子:|grid.deleteall("表格0")
</example>
</function>

<!--删除行-->
<function name="deleterow">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号-->
<pram>(Control_ID,row,parentID="")</pram>
<example>
函数原型:|grid.deleterow(Control_ID,row,parentID="")|
函数说明:|删除行|
调用例子:|grid.deleterow("表格0",1)
</example>
</function>

<!--删除列-->
<function name="deletecol">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号-->
<pram>(Control_ID,col,parentID="")</pram>
<example>
函数原型:|grid.deletecol(Control_ID,col,parentID="")|
函数说明:|删除列|
调用例子:|grid.deletecol("表格0",1)
</example>
</function>

<!--删除非固定行-->
<function name="deletenonfixedrow">
<!--返回值:成功或失败-->

<!--参数:控件名称-->
<pram>(Control_ID,parentID="")</pram>
<example>
函数原型:|grid.deletenonfixedrow(Control_ID,parentID="")|
函数说明:|删除非固定行|
调用例子:|grid.deletenonfixedrow("表格0")
</example>
</function>

<!--获得复选框状态-->
<function name="getcheckstate">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号-->
<pram>(Control_ID,row,col,parentID="")</pram>
<example>
函数原型:|grid.getcheckstate(Control_ID,row,col,parentID="")|
函数说明:|获得复选框状态,返回 真 为选中,返回 假 为未选中|
调用例子:|
var isChecked
isChecked=grid.getcheckstate("表格0",1,1)
</example>
</function>

<!--设置复选框状态-->
<function name="setcheckstate">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.列号,状态-->
<pram>(Control_ID,row,col,isChecked=true,parentID="")</pram>
<example>
函数原型:|grid.setcheckstate(Control_ID,row,col,isChecked=true,parentID="")|
函数说明:|设置复选框状态,参数4 设置 真 为选中,返回 假 为未选中|
调用例子:|grid.setcheckstate("表格0",1,1,true)
</example>
</function>

<!--设置下拉框内容-->
<function name="setcombocontent">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(Control_ID,row,col,content,parentID="")</pram>
<example>
函数原型:|grid.setcombocontent(Control_ID,row,col,content,parentID="")|
函数说明:|设置表格中下拉框的内容,content参数为一维数组|
调用例子:|
var content=array[2]
content[0]="TC"
content[1]="简单开发"
grid.setcombocontent("表格0",1,1,content)
</example>
</function>

<!--获取焦点项-->
<function name="getfocusitem">
<!--返回值:成功或失败-->

<!--参数:控件名称,返回长.返回宽-->
<pram>(Control_ID,r_row,r_col,parentID="")</pram>
<example>
函数原型:|grid.getfocusitem(Control_ID,r_row,r_col,parentID="")|
函数说明:|获得表格焦点项(焦点:当前光标所在的位置)|
调用例子:|
var r_row,r_col
grid.getfocusitem("表格0",r_row,r_col)
</example>
</function>

<!--获得行高-->
<function name="getrowheight">
<!--返回值:行高-->

<!--参数:控件名称,行-->
<pram>(Control_ID,row,parentID="")</pram>
<example>
函数原型:|grid.getrowheight(Control_ID,row,parentID="")|
函数说明:|获得并返回指定行的行高|
调用例子:|rowheight=grid.getrowheight("表格0",1)
</example>
</function>

<!--设置行高-->
<function name="setrowheight">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,高-->
<pram>(Control_ID,row,height,parentID="")</pram>
<example>
函数原型:|grid.setrowheight(Control_ID,row,height,parentID="")|
函数说明:|设置指定行的行高|
调用例子:|grid.setrowheight("表格0",1,50)
</example>
</function>

<!--获得列宽-->
<function name="getcolwide">
<!--返回值:列宽-->

<!--参数:控件名称,列-->
<pram>(Control_ID,col,parentID="")</pram>
<example>
函数原型:|grid.getcolwide(Control_ID,col,parentID="")|
函数说明:|获得并返回指定列的列高|
调用例子:|colwide=grid.getcolwide("表格0",1)
</example>
</function>

<!--设置列宽-->
<function name="setcolwide">
<!--返回值:成功或失败-->

<!--参数:控件名称,列,宽-->
<pram>(Control_ID,col,wide,parentID="")</pram>
<example>
函数原型:|grid.setcolwide(Control_ID,col,wide,parentID="")|
函数说明:|设置指定列的列高|
调用例子:|grid.setcolwide("表格0",1,50)
</example>
</function>

<!--设置项背景颜色-->
<function name="setitembgcolor">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列,颜色值-->
<pram>(Control_ID,row,col,color,parentID="")</pram>
<example>
函数原型:|grid.setitembgcolor(Control_ID,row,col,color,parentID="")|
函数说明:|设置表格某一项的背景颜色|
调用例子:|grid.setitembgcolor("表格0",1,1,#00ff00)
</example>
</function>

<!--设置项文本颜色-->
<function name="setitemtextcolor">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列,颜色值-->
<pram>(Control_ID,row,col,color,parentID="")</pram>
<example>
函数原型:|grid.setitemtextcolor(Control_ID,row,col,color,parentID="")|
函数说明:|设置表格指定项(行,列)的文本颜色|
调用例子:|grid.setitemtextcolor("表格0",1,1,#00ff00)
</example>
</function>

<!--填充-->
<function name="fill">
<!--返回值:成功或失败-->

<!--参数:控件名称-->
<pram>(Control_ID,parentID="")</pram>
<example>
函数原型:|grid.fill(Control_ID,parentID="")|
函数说明:|以表格外围边框为边界将表格项填充到整个边界,此时滚动条将消失|
调用例子:|grid.fill("表格0")
</example>
</function>

<!--获得选中范围-->
<function name="getselectrange">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列-->
<pram>(Control_ID,r_beginRow,r_beginCol,r_endRow,r_end_Col,parentID="")</pram>
<example>
函数原型:|grid.getselectrange(Control_ID,r_beginRow,r_beginCol,r_endRow,r_end_Col,parentID="")|
函数说明:|获得表格控件里选中的范围|
调用例子:|
r_beginRow,r_beginCol,r_endRow,r_end_Col
grid.getselectrange("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>

<!--设置选中范围-->
<function name="setselectrange">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列-->
<pram>(Control_ID,beginRow,beginCol,endRow,end_Col,parentID="")</pram>
<example>
函数原型:|grid.setselectrange(Control_ID,beginRow,beginCol,endRow,end_Col,parentID="")|
函数说明:|设置表格控件里选中的范围|
调用例子:|grid.setselectrange("表格0",0,0,10,10)
</example>
</function>

<!--获得可见范围-->
<function name="getvisualrange">
<!--返回值:成功或失败-->

<!--参数:控件名称,行,列-->
<pram>(Control_ID,r_beginRow,r_beginCol,r_endRow,r_end_Col,parentID="")</pram>
<example>
函数原型:|grid.getvisualrange(Control_ID,r_beginRow,r_beginCol,r_endRow,r_end_Col,parentID="")|
函数说明:|获得表格非固定项可见范围|
调用例子:|
var r_beginRow,r_beginCol,r_endRow,r_end_Col
grid.getvisualrange("表格0",r_beginRow,r_beginCol,r_endRow,r_end_Col)
</example>
</function>

<!--设置下拉框选项-->
<function name="setcombocursel">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(Control_ID,row,col,index,parentID="")</pram>
<example>
函数原型:|grid.setcombocursel(Control_ID,row,col,index,parentID="")|
函数说明:|设置表格中下拉框的当前选择项|
调用例子:|grid.setcombocursel("表格0",1,1,0)
</example>
</function>

<!--获得下拉框选项-->
<function name="getcombocursel">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(Control_ID,row,col,parentID="")</pram>
<example>
函数原型:|grid.getcombocursel(Control_ID,row,col,parentID="")|
函数说明:|获得表格中下拉框的当前选择项的索引|
调用例子:|index=grid.getcombocursel("表格0",1,1)
</example>
</function>

<!--获得下拉框内容-->
<function name="getcombocontent">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(Control_ID,row,col,content,parentID="")</pram>
<example>
函数原型:|grid.getcombocontent(Control_ID,row,col,content,parentID="")|
函数说明:|以数组形式返回指定下拉框的所有内容|
调用例子:|
内容
是否成功=grid.getcombocontent("表格0",1,1,内容)
</example>
</function>

<!--获得下拉框长度-->
<function name="getcombocount">
<!--返回值:成功或失败-->

<!--参数:控件名称,行号.内容-->
<pram>(Control_ID,row,col,parentID="")</pram>
<example>
函数原型:|grid.getcombocount(Control_ID,row,col,parentID="")|
函数说明:|获得指定下拉框的长度|
调用例子:|长度=grid.getcombocount("表格0",1,1)
</example>
</function>


</namespace>

</dll>

</api>